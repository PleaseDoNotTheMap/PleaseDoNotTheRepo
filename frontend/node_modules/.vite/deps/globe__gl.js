import {
  AmbientLight,
  BackSide,
  Box3,
  BufferAttribute,
  BufferGeometry,
  BufferGeometryUtils_exports,
  CircleGeometry,
  Clock,
  Color,
  Controls,
  CubicBezierCurve3,
  Curve,
  CylinderGeometry,
  DirectionalLight,
  DoubleSide,
  Euler,
  EventDispatcher,
  ExtrudeGeometry,
  Float32BufferAttribute,
  Group,
  HalfFloatType,
  InstancedBufferGeometry,
  InstancedInterleavedBuffer,
  InterleavedBufferAttribute,
  Line,
  Line3,
  LineBasicMaterial,
  LineSegments,
  MOUSE,
  MathUtils,
  Matrix4,
  Mesh,
  MeshBasicMaterial,
  MeshLambertMaterial,
  MeshPhongMaterial,
  NoBlending,
  NormalBlending,
  Object3D,
  OrthographicCamera,
  PerspectiveCamera,
  Plane,
  QuadraticBezierCurve3,
  Quaternion,
  REVISION,
  Ray,
  Raycaster,
  SRGBColorSpace,
  Scene,
  ShaderLib,
  ShaderMaterial,
  ShapePath,
  Sphere,
  SphereGeometry,
  Spherical,
  TOUCH,
  TextureLoader,
  TubeGeometry,
  UniformsLib,
  UniformsUtils,
  Vector2,
  Vector3,
  Vector4,
  WebGLRenderTarget,
  WebGLRenderer,
  WireframeGeometry,
  __commonJS,
  __toESM
} from "./chunk-QFK4X7GK.js";

// node_modules/frame-ticker/dist/FrameTicker.js
var require_FrameTicker = __commonJS({
  "node_modules/frame-ticker/dist/FrameTicker.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define("FrameTicker", [], t) : "object" == typeof exports ? exports.FrameTicker = t() : e.FrameTicker = t();
    }(exports, function() {
      return function(e) {
        function t(n) {
          if (i[n]) return i[n].exports;
          var r = i[n] = { exports: {}, id: n, loaded: false };
          return e[n].call(r.exports, r, r.exports, t), r.loaded = true, r.exports;
        }
        var i = {};
        return t.m = e, t.c = i, t.p = "", t(0);
      }([function(e, t, i) {
        "use strict";
        var n = i(1), r = function() {
          function e3(e4, t4, i2) {
            void 0 === e4 && (e4 = NaN), void 0 === t4 && (t4 = NaN), void 0 === i2 && (i2 = false), this._minFPS = t4, this._maxFPS = e4, this._timeScale = 1, this._currentTick = 0, this._currentTime = 0, this._tickDeltaTime = 0, this._isRunning = false, this._maxInterval = isNaN(this._minFPS) ? NaN : 1e3 / this._minFPS, this._minInterval = isNaN(this._maxFPS) ? NaN : 1e3 / this._maxFPS, this._onResume = new n.default(), this._onPause = new n.default(), this._onTick = new n.default(), this._onTickOncePerFrame = new n.default(), i2 || this.resume();
          }
          return e3.prototype.updateOnce = function(e4) {
            e4(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick);
          }, e3.prototype.resume = function() {
            this._isRunning || (this._isRunning = true, this._lastTimeUpdated = this.getTimer(), this._onResume.dispatch(), this.animateOnce());
          }, e3.prototype.pause = function() {
            this._isRunning && (this._isRunning = false, this._onPause.dispatch(), window.cancelAnimationFrame(this._animationFrameHandle));
          }, e3.prototype.dispose = function() {
            this.pause(), this._onResume.removeAll(), this._onPause.removeAll(), this._onTick.removeAll();
          }, Object.defineProperty(e3.prototype, "currentTick", { get: function() {
            return this._currentTick;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "currentTimeSeconds", { get: function() {
            return this._currentTime / 1e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "tickDeltaTimeSeconds", { get: function() {
            return this._tickDeltaTime / 1e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "timeScale", { get: function() {
            return this._timeScale;
          }, set: function(e4) {
            this._timeScale !== e4 && (this._timeScale = e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onResume", { get: function() {
            return this._onResume;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onPause", { get: function() {
            return this._onPause;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onTick", { get: function() {
            return this._onTick;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "onTickOncePerFrame", { get: function() {
            return this._onTickOncePerFrame;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "isRunning", { get: function() {
            return this._isRunning;
          }, enumerable: true, configurable: true }), e3.prototype.animateOnce = function() {
            var e4 = this;
            this._animationFrameHandle = window.requestAnimationFrame(function() {
              return e4.onFrame();
            });
          }, e3.prototype.onFrame = function() {
            if (this._now = this.getTimer(), this._frameDeltaTime = this._now - this._lastTimeUpdated, isNaN(this._minInterval) || this._frameDeltaTime >= this._minInterval) if (isNaN(this._maxInterval)) this.update(this._frameDeltaTime * this._timeScale, true), this._lastTimeUpdated = this._now;
            else for (this._interval = Math.min(this._frameDeltaTime, this._maxInterval); this._now >= this._lastTimeUpdated + this._interval; ) this.update(this._interval * this._timeScale, this._now <= this._lastTimeUpdated + 2 * this._maxInterval), this._lastTimeUpdated += this._interval;
            this._isRunning && this.animateOnce();
          }, e3.prototype.update = function(e4, t4) {
            void 0 === t4 && (t4 = true), this._currentTick++, this._currentTime += e4, this._tickDeltaTime = e4, this._onTick.dispatch(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick), t4 && this._onTickOncePerFrame.dispatch(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick);
          }, e3.prototype.getTimer = function() {
            return Date.now();
          }, e3;
        }();
        Object.defineProperty(t, "__esModule", { value: true }), t.default = r;
      }, function(e, t, i) {
        !function(t4, i2) {
          e.exports = i2();
        }(this, function() {
          return function(e3) {
            function t4(n) {
              if (i2[n]) return i2[n].exports;
              var r = i2[n] = { exports: {}, id: n, loaded: false };
              return e3[n].call(r.exports, r, r.exports, t4), r.loaded = true, r.exports;
            }
            var i2 = {};
            return t4.m = e3, t4.c = i2, t4.p = "", t4(0);
          }([function(e3, t4) {
            "use strict";
            var i2 = function() {
              function e4() {
                this.functions = [];
              }
              return e4.prototype.add = function(e6) {
                return this.functions.indexOf(e6) === -1 && (this.functions.push(e6), true);
              }, e4.prototype.remove = function(e6) {
                var t5 = this.functions.indexOf(e6);
                return t5 > -1 && (this.functions.splice(t5, 1), true);
              }, e4.prototype.removeAll = function() {
                return this.functions.length > 0 && (this.functions.length = 0, true);
              }, e4.prototype.dispatch = function() {
                for (var e6 = [], t5 = 0; t5 < arguments.length; t5++) e6[t5] = arguments[t5];
                var i3 = this.functions.concat();
                i3.forEach(function(t6) {
                  t6.apply(void 0, e6);
                });
              }, Object.defineProperty(e4.prototype, "numItems", { get: function() {
                return this.functions.length;
              }, enumerable: true, configurable: true }), e4;
            }();
            Object.defineProperty(t4, "__esModule", { value: true }), t4.default = i2;
          }]);
        });
      }]);
    });
  }
});

// node_modules/yaot/lib/bounds3.js
var require_bounds3 = __commonJS({
  "node_modules/yaot/lib/bounds3.js"(exports, module) {
    module.exports = Bounds3;
    function Bounds3(x, y, z, half) {
      this.x = typeof x === "number" ? x : 0;
      this.y = typeof y === "number" ? y : 0;
      this.z = typeof z === "number" ? z : 0;
      this.half = typeof half === "number" ? half : 0;
    }
    Bounds3.prototype.contains = function contains(x, y, z) {
      var half = this.half;
      return this.x - half <= x && x < this.x + half && this.y - half <= y && y < this.y + half && this.z - half <= z && z < this.z + half;
    };
  }
});

// node_modules/yaot/lib/treeNode.js
var require_treeNode = __commonJS({
  "node_modules/yaot/lib/treeNode.js"(exports, module) {
    var Bounds3 = require_bounds3();
    var MAX_ITEMS = 4;
    module.exports = TreeNode;
    function TreeNode(bounds) {
      this.bounds = bounds;
      this.q0 = null;
      this.q1 = null;
      this.q2 = null;
      this.q3 = null;
      this.q4 = null;
      this.q5 = null;
      this.q6 = null;
      this.q7 = null;
      this.items = null;
    }
    TreeNode.prototype.subdivide = function subdivide() {
      var bounds = this.bounds;
      var quarter = bounds.half / 2;
      this.q0 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y - quarter, bounds.z - quarter, quarter));
      this.q1 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y - quarter, bounds.z - quarter, quarter));
      this.q2 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y + quarter, bounds.z - quarter, quarter));
      this.q3 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y + quarter, bounds.z - quarter, quarter));
      this.q4 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y - quarter, bounds.z + quarter, quarter));
      this.q5 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y - quarter, bounds.z + quarter, quarter));
      this.q6 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y + quarter, bounds.z + quarter, quarter));
      this.q7 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y + quarter, bounds.z + quarter, quarter));
    };
    TreeNode.prototype.insert = function insert(idx, array2, depth) {
      var isLeaf = this.q0 === null;
      if (isLeaf) {
        if (this.items === null) {
          this.items = [idx];
        } else {
          this.items.push(idx);
        }
        if (this.items.length >= MAX_ITEMS && depth < 16) {
          this.subdivide();
          for (var i = 0; i < this.items.length; ++i) {
            this.insert(this.items[i], array2, depth + 1);
          }
          this.items = null;
        }
      } else {
        var x = array2[idx], y = array2[idx + 1], z = array2[idx + 2];
        var bounds = this.bounds;
        var quadIdx = 0;
        if (x > bounds.x) {
          quadIdx += 1;
        }
        if (y > bounds.y) {
          quadIdx += 2;
        }
        if (z > bounds.z) {
          quadIdx += 4;
        }
        var child = getChild(this, quadIdx);
        child.insert(idx, array2, depth + 1);
      }
    };
    TreeNode.prototype.query = function queryBounds(results, sourceArray, intersects2, preciseCheck) {
      if (!intersects2(this.bounds)) return;
      var items = this.items;
      var needsCheck = typeof preciseCheck === "function";
      if (items) {
        for (var i = 0; i < items.length; ++i) {
          var idx = items[i];
          if (needsCheck) {
            if (preciseCheck(sourceArray[idx], sourceArray[idx + 1], sourceArray[idx + 2])) {
              results.push(idx);
            }
          } else {
            results.push(idx);
          }
        }
      }
      if (!this.q0) return;
      this.q0.query(results, sourceArray, intersects2, preciseCheck);
      this.q1.query(results, sourceArray, intersects2, preciseCheck);
      this.q2.query(results, sourceArray, intersects2, preciseCheck);
      this.q3.query(results, sourceArray, intersects2, preciseCheck);
      this.q4.query(results, sourceArray, intersects2, preciseCheck);
      this.q5.query(results, sourceArray, intersects2, preciseCheck);
      this.q6.query(results, sourceArray, intersects2, preciseCheck);
      this.q7.query(results, sourceArray, intersects2, preciseCheck);
    };
    function getChild(node, idx) {
      if (idx === 0) return node.q0;
      if (idx === 1) return node.q1;
      if (idx === 2) return node.q2;
      if (idx === 3) return node.q3;
      if (idx === 4) return node.q4;
      if (idx === 5) return node.q5;
      if (idx === 6) return node.q6;
      if (idx === 7) return node.q7;
    }
  }
});

// node_modules/rafor/index.js
var require_rafor = __commonJS({
  "node_modules/rafor/index.js"(exports, module) {
    module.exports = asyncFor;
    function asyncFor(array2, visitCallback, doneCallback, options) {
      var start = 0;
      var elapsed = 0;
      options = options || {};
      var step = options.step || 1;
      var maxTimeMS = options.maxTimeMS || 8;
      var pointsPerLoopCycle = options.probeElements || 5e3;
      setTimeout(processSubset, 0);
      function processSubset() {
        var finish = Math.min(array2.length, start + pointsPerLoopCycle);
        var i = start;
        var timeStart = /* @__PURE__ */ new Date();
        for (i = start; i < finish; i += step) {
          visitCallback(array2[i], i, array2);
        }
        if (i < array2.length) {
          elapsed += /* @__PURE__ */ new Date() - timeStart;
          start = i;
          pointsPerLoopCycle = Math.round(start * maxTimeMS / elapsed);
          setTimeout(processSubset, 0);
        } else {
          doneCallback(array2);
        }
      }
    }
  }
});

// node_modules/yaot/index.js
var require_yaot = __commonJS({
  "node_modules/yaot/index.js"(exports, module) {
    var Bounds3 = require_bounds3();
    var TreeNode = require_treeNode();
    var EmptyRegion = new Bounds3();
    var asyncFor = require_rafor();
    module.exports = createTree;
    function createTree(options) {
      options = options || {};
      var noPoints = [];
      var root2;
      var originalArray;
      var api = {
        /**
         * Initializes tree asynchronously. Very useful when you have millions
         * of points and do not want to block rendering thread for too long.
         *
         * @param {number[]} points array of points for which we are building the
         * tree. Flat sequence of (x, y, z) coordinates. Array length should be
         * multiple of 3.
         *
         * @param {Function=} doneCallback called when tree is initialized. The
         * callback will be called with single argument which represent current
         * tree.
         */
        initAsync,
        /**
         * Synchronous version of `initAsync()`. Should only be used for small
         * trees (less than 50-70k of points).
         *
         * @param {number[]} points array of points for which we are building the
         * tree. Flat sequence of (x, y, z) coordinates. Array length should be
         * multiple of 3.
         */
        init: init18,
        /**
         * Gets bounds of the root node. Bounds are represented by center of the
         * node (x, y, z) and `half` attribute - distance from the center to an
         * edge of the root node.
         */
        bounds: getBounds,
        /**
         * Fires a ray from `rayOrigin` into `rayDirection` and collects all points
         * that lie in the octants intersected by the ray.
         *
         * This method implements An Efficient Parametric Algorithm for Octree Traversal
         * described in http://wscg.zcu.cz/wscg2000/Papers_2000/X31.pdf
         *
         * @param {Vector3} rayOrigin x,y,z coordinates where ray starts
         * @param {Vector3} rayDirection normalized x,y,z direction where ray shoots.
         * @param {number+} near minimum distance from the ray origin. 0 by default.
         * @param {number+} far maximum length of the ray. POSITIVE_INFINITY by default
         *
         * @return {Array} of indices in the source array. Each index represnts a start
         * of the x,y,z triplet of a point, that lies in the intersected octant.
         */
        intersectRay,
        /**
         * Once you have collected points from the octants intersected by a ray
         * (`intersectRay()` method), it may be worth to query points from the surrouning
         * area.
         */
        intersectSphere,
        /**
         * Gets root node of the tree
         */
        getRoot
      };
      return api;
      function getRoot() {
        return root2;
      }
      function intersectSphere(cx, cy, cz, r) {
        if (!root2) {
          return noPoints;
        }
        var indices = [];
        var r2 = r * r;
        root2.query(indices, originalArray, intersectCheck, preciseCheck);
        return indices;
        function intersectCheck(candidate) {
          var dist2 = r2;
          var half = candidate.half;
          if (cx < candidate.x - half) dist2 -= sqr(cx - (candidate.x - half));
          else if (cx > candidate.x + half) dist2 -= sqr(cx - (candidate.x + half));
          if (cy < candidate.y - half) dist2 -= sqr(cy - (candidate.y - half));
          else if (cy > candidate.y + half) dist2 -= sqr(cy - (candidate.y + half));
          if (cz < candidate.z - half) dist2 -= sqr(cz - (candidate.z - half));
          else if (cz > candidate.z + half) dist2 -= sqr(cz - (candidate.z + half));
          return dist2 > 0;
        }
        function preciseCheck(x, y, z) {
          return sqr(x - cx) + sqr(y - cy) + sqr(z - cz) < r2;
        }
      }
      function sqr(x) {
        return x * x;
      }
      function intersectRay(rayOrigin, rayDirection, near, far) {
        if (!root2) {
          return noPoints;
        }
        if (near === void 0) near = 0;
        if (far === void 0) far = Number.POSITIVE_INFINITY;
        near *= near;
        far *= far;
        var indices = [];
        root2.query(indices, originalArray, intersectCheck, farEnough);
        return indices.sort(byDistanceToCamera);
        function intersectCheck(candidate) {
          var half = candidate.half;
          var t13 = (candidate.x - half - rayOrigin.x) / rayDirection.x, t22 = (candidate.x + half - rayOrigin.x) / rayDirection.x, t32 = (candidate.y + half - rayOrigin.y) / rayDirection.y, t4 = (candidate.y - half - rayOrigin.y) / rayDirection.y, t5 = (candidate.z - half - rayOrigin.z) / rayDirection.z, t6 = (candidate.z + half - rayOrigin.z) / rayDirection.z, tmax = Math.min(Math.min(Math.max(t13, t22), Math.max(t32, t4)), Math.max(t5, t6)), tmin;
          if (tmax < 0) return false;
          tmin = Math.max(Math.max(Math.min(t13, t22), Math.min(t32, t4)), Math.min(t5, t6));
          return tmin <= tmax && tmin <= far;
        }
        function farEnough(x, y, z) {
          var dist2 = (x - rayOrigin.x) * (x - rayOrigin.x) + (y - rayOrigin.y) * (y - rayOrigin.y) + (z - rayOrigin.z) * (z - rayOrigin.z);
          return near <= dist2 && dist2 <= far;
        }
        function byDistanceToCamera(idx0, idx1) {
          var x03 = rayOrigin[idx0];
          var y03 = rayOrigin[idx0 + 1];
          var z02 = rayOrigin[idx0 + 2];
          var dist0 = (x03 - rayOrigin.x) * (x03 - rayOrigin.x) + (y03 - rayOrigin.y) * (y03 - rayOrigin.y) + (z02 - rayOrigin.z) * (z02 - rayOrigin.z);
          var x12 = rayOrigin[idx1];
          var y12 = rayOrigin[idx1 + 1];
          var z1 = rayOrigin[idx1 + 2];
          var dist1 = (x12 - rayOrigin.x) * (x12 - rayOrigin.x) + (y12 - rayOrigin.y) * (y12 - rayOrigin.y) + (z1 - rayOrigin.z) * (z1 - rayOrigin.z);
          return dist0 - dist1;
        }
      }
      function init18(points) {
        verifyPointsInvariant(points);
        originalArray = points;
        root2 = createRootNode(points);
        for (var i = 0; i < points.length; i += 3) {
          root2.insert(i, originalArray, 0);
        }
      }
      function initAsync(points, doneCallback) {
        verifyPointsInvariant(points);
        var tempRoot = createRootNode(points);
        asyncFor(points, insertToRoot, doneInternal, { step: 3 });
        function insertToRoot(element, i) {
          tempRoot.insert(i, points, 0);
        }
        function doneInternal() {
          originalArray = points;
          root2 = tempRoot;
          if (typeof doneCallback === "function") {
            doneCallback(api);
          }
        }
      }
      function verifyPointsInvariant(points) {
        if (!points) throw new Error("Points array is required for quadtree to work");
        if (typeof points.length !== "number") throw new Error("Points should be array-like object");
        if (points.length % 3 !== 0) throw new Error("Points array should consist of series of x,y,z coordinates and be multiple of 3");
      }
      function getBounds() {
        if (!root2) return EmptyRegion;
        return root2.bounds;
      }
      function createRootNode(points) {
        if (points.length === 0) {
          var empty = new Bounds3();
          return new TreeNode(empty);
        }
        var minX = Number.POSITIVE_INFINITY;
        var minY = Number.POSITIVE_INFINITY;
        var minZ = Number.POSITIVE_INFINITY;
        var maxX = Number.NEGATIVE_INFINITY;
        var maxY = Number.NEGATIVE_INFINITY;
        var maxZ = Number.NEGATIVE_INFINITY;
        for (var i = 0; i < points.length; i += 3) {
          var x = points[i], y = points[i + 1], z = points[i + 2];
          if (x < minX) minX = x;
          if (x > maxX) maxX = x;
          if (y < minY) minY = y;
          if (y > maxY) maxY = y;
          if (z < minZ) minZ = z;
          if (z > maxZ) maxZ = z;
        }
        var side = Math.max(Math.max(maxX - minX, maxY - minY), maxZ - minZ);
        side += 2;
        minX -= 1;
        minY -= 1;
        minZ -= 1;
        var half = side / 2;
        var bounds = new Bounds3(minX + half, minY + half, minZ + half, half);
        return new TreeNode(bounds);
      }
    }
  }
});

// node_modules/three/examples/jsm/renderers/CSS2DRenderer.js
var CSS2DObject = class extends Object3D {
  constructor(element = document.createElement("div")) {
    super();
    this.isCSS2DObject = true;
    this.element = element;
    this.element.style.position = "absolute";
    this.element.style.userSelect = "none";
    this.element.setAttribute("draggable", false);
    this.center = new Vector2(0.5, 0.5);
    this.addEventListener("removed", function() {
      this.traverse(function(object2) {
        if (object2.element instanceof Element && object2.element.parentNode !== null) {
          object2.element.parentNode.removeChild(object2.element);
        }
      });
    });
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.element = source.element.cloneNode(true);
    this.center = source.center;
    return this;
  }
};
var _vector = new Vector3();
var _viewMatrix = new Matrix4();
var _viewProjectionMatrix = new Matrix4();
var _a = new Vector3();
var _b = new Vector3();
var CSS2DRenderer = class {
  constructor(parameters = {}) {
    const _this = this;
    let _width, _height;
    let _widthHalf, _heightHalf;
    const cache = {
      objects: /* @__PURE__ */ new WeakMap()
    };
    const domElement = parameters.element !== void 0 ? parameters.element : document.createElement("div");
    domElement.style.overflow = "hidden";
    this.domElement = domElement;
    this.getSize = function() {
      return {
        width: _width,
        height: _height
      };
    };
    this.render = function(scene3, camera3) {
      if (scene3.matrixWorldAutoUpdate === true) scene3.updateMatrixWorld();
      if (camera3.parent === null && camera3.matrixWorldAutoUpdate === true) camera3.updateMatrixWorld();
      _viewMatrix.copy(camera3.matrixWorldInverse);
      _viewProjectionMatrix.multiplyMatrices(camera3.projectionMatrix, _viewMatrix);
      renderObject(scene3, scene3, camera3);
      zOrder2(scene3);
    };
    this.setSize = function(width, height) {
      _width = width;
      _height = height;
      _widthHalf = _width / 2;
      _heightHalf = _height / 2;
      domElement.style.width = width + "px";
      domElement.style.height = height + "px";
    };
    function hideObject(object2) {
      if (object2.isCSS2DObject) object2.element.style.display = "none";
      for (let i = 0, l = object2.children.length; i < l; i++) {
        hideObject(object2.children[i]);
      }
    }
    function renderObject(object2, scene3, camera3) {
      if (object2.visible === false) {
        hideObject(object2);
        return;
      }
      if (object2.isCSS2DObject) {
        _vector.setFromMatrixPosition(object2.matrixWorld);
        _vector.applyMatrix4(_viewProjectionMatrix);
        const visible = _vector.z >= -1 && _vector.z <= 1 && object2.layers.test(camera3.layers) === true;
        const element = object2.element;
        element.style.display = visible === true ? "" : "none";
        if (visible === true) {
          object2.onBeforeRender(_this, scene3, camera3);
          element.style.transform = "translate(" + -100 * object2.center.x + "%," + -100 * object2.center.y + "%)translate(" + (_vector.x * _widthHalf + _widthHalf) + "px," + (-_vector.y * _heightHalf + _heightHalf) + "px)";
          if (element.parentNode !== domElement) {
            domElement.appendChild(element);
          }
          object2.onAfterRender(_this, scene3, camera3);
        }
        const objectData = {
          distanceToCameraSquared: getDistanceToSquared(camera3, object2)
        };
        cache.objects.set(object2, objectData);
      }
      for (let i = 0, l = object2.children.length; i < l; i++) {
        renderObject(object2.children[i], scene3, camera3);
      }
    }
    function getDistanceToSquared(object1, object2) {
      _a.setFromMatrixPosition(object1.matrixWorld);
      _b.setFromMatrixPosition(object2.matrixWorld);
      return _a.distanceToSquared(_b);
    }
    function filterAndFlatten(scene3) {
      const result = [];
      scene3.traverseVisible(function(object2) {
        if (object2.isCSS2DObject) result.push(object2);
      });
      return result;
    }
    function zOrder2(scene3) {
      const sorted = filterAndFlatten(scene3).sort(function(a, b) {
        if (a.renderOrder !== b.renderOrder) {
          return b.renderOrder - a.renderOrder;
        }
        const distanceA = cache.objects.get(a).distanceToCameraSquared;
        const distanceB = cache.objects.get(b).distanceToCameraSquared;
        return distanceA - distanceB;
      });
      const zMax = sorted.length;
      for (let i = 0, l = sorted.length; i < l; i++) {
        sorted[i].element.style.zIndex = zMax - i;
      }
    }
  }
};

// node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;

// node_modules/lodash-es/now.js
var now = function() {
  return root_default.Date.now();
};
var now_default = now;

// node_modules/lodash-es/_trimmedEndIndex.js
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
  var index5 = string.length;
  while (index5-- && reWhitespace.test(string.charAt(index5))) {
  }
  return index5;
}
var trimmedEndIndex_default = trimmedEndIndex;

// node_modules/lodash-es/_baseTrim.js
var reTrimStart = /^\s+/;
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
}
var baseTrim_default = baseTrim;

// node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;

// node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var getRawTag_default = getRawTag;

// node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/lodash-es/isSymbol.js
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
}
var isSymbol_default = isSymbol;

// node_modules/lodash-es/toNumber.js
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN;
  }
  if (isObject_default(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_default(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim_default(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_default = toNumber;

// node_modules/lodash-es/debounce.js
var FUNC_ERROR_TEXT = "Expected a function";
var nativeMax = Math.max;
var nativeMin = Math.min;
function debounce(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber_default(wait) || 0;
  if (isObject_default(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax(toNumber_default(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time2) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time2;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time2) {
    lastInvokeTime = time2;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time2) : result;
  }
  function remainingWait(time2) {
    var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time2) {
    var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time2 = now_default();
    if (shouldInvoke(time2)) {
      return trailingEdge(time2);
    }
    timerId = setTimeout(timerExpired, remainingWait(time2));
  }
  function trailingEdge(time2) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time2);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now_default());
  }
  function debounced() {
    var time2 = now_default(), isInvoking = shouldInvoke(time2);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time2;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var debounce_default = debounce;

// node_modules/kapsule/dist/kapsule.mjs
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _createClass(e, r, t) {
  return Object.defineProperty(e, "prototype", {
    writable: false
  }), e;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u4, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) ;
      else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t.return && (u4 = t.return(), Object(u4) !== u4)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
var Prop = _createClass(function Prop2(name, _ref) {
  var _ref$default = _ref["default"], defaultVal = _ref$default === void 0 ? null : _ref$default, _ref$triggerUpdate = _ref.triggerUpdate, triggerUpdate = _ref$triggerUpdate === void 0 ? true : _ref$triggerUpdate, _ref$onChange = _ref.onChange, onChange12 = _ref$onChange === void 0 ? function(newVal, state) {
  } : _ref$onChange;
  _classCallCheck(this, Prop2);
  this.name = name;
  this.defaultVal = defaultVal;
  this.triggerUpdate = triggerUpdate;
  this.onChange = onChange12;
});
function index(_ref2) {
  var _ref2$stateInit = _ref2.stateInit, stateInit5 = _ref2$stateInit === void 0 ? function() {
    return {};
  } : _ref2$stateInit, _ref2$props = _ref2.props, rawProps = _ref2$props === void 0 ? {} : _ref2$props, _ref2$methods = _ref2.methods, methods = _ref2$methods === void 0 ? {} : _ref2$methods, _ref2$aliases = _ref2.aliases, aliases = _ref2$aliases === void 0 ? {} : _ref2$aliases, _ref2$init = _ref2.init, initFn = _ref2$init === void 0 ? function() {
  } : _ref2$init, _ref2$update = _ref2.update, updateFn = _ref2$update === void 0 ? function() {
  } : _ref2$update;
  var props = Object.keys(rawProps).map(function(propName) {
    return new Prop(propName, rawProps[propName]);
  });
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var state = Object.assign(
      {},
      stateInit5 instanceof Function ? stateInit5(options) : stateInit5,
      // Support plain objects for backwards compatibility
      {
        initialised: false
      }
    );
    var changedProps = {};
    function comp(nodeElement) {
      initStatic(nodeElement, options);
      digest();
      return comp;
    }
    var initStatic = function initStatic2(nodeElement, options2) {
      initFn.call(comp, nodeElement, state, options2);
      state.initialised = true;
    };
    var digest = debounce_default(function() {
      if (!state.initialised) {
        return;
      }
      updateFn.call(comp, state, changedProps);
      changedProps = {};
    }, 1);
    props.forEach(function(prop) {
      comp[prop.name] = getSetProp(prop);
      function getSetProp(_ref3) {
        var prop2 = _ref3.name, _ref3$triggerUpdate = _ref3.triggerUpdate, redigest = _ref3$triggerUpdate === void 0 ? false : _ref3$triggerUpdate, _ref3$onChange = _ref3.onChange, onChange12 = _ref3$onChange === void 0 ? function(newVal, state2) {
        } : _ref3$onChange, _ref3$defaultVal = _ref3.defaultVal, defaultVal = _ref3$defaultVal === void 0 ? null : _ref3$defaultVal;
        return function(_) {
          var curVal = state[prop2];
          if (!arguments.length) {
            return curVal;
          }
          var val = _ === void 0 ? defaultVal : _;
          state[prop2] = val;
          onChange12.call(comp, val, state, curVal);
          !changedProps.hasOwnProperty(prop2) && (changedProps[prop2] = curVal);
          if (redigest) {
            digest();
          }
          return comp;
        };
      }
    });
    Object.keys(methods).forEach(function(methodName) {
      comp[methodName] = function() {
        var _methods$methodName;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return (_methods$methodName = methods[methodName]).call.apply(_methods$methodName, [comp, state].concat(args));
      };
    });
    Object.entries(aliases).forEach(function(_ref4) {
      var _ref5 = _slicedToArray(_ref4, 2), alias = _ref5[0], target = _ref5[1];
      return comp[alias] = comp[target];
    });
    comp.resetProps = function() {
      props.forEach(function(prop) {
        comp[prop.name](prop.defaultVal);
      });
      return comp;
    };
    comp.resetProps();
    state._rerender = digest;
    return comp;
  };
}

// node_modules/@tweenjs/tween.js/dist/tween.esm.js
var Easing = Object.freeze({
  Linear: Object.freeze({
    None: function(amount) {
      return amount;
    },
    In: function(amount) {
      return amount;
    },
    Out: function(amount) {
      return amount;
    },
    InOut: function(amount) {
      return amount;
    }
  }),
  Quadratic: Object.freeze({
    In: function(amount) {
      return amount * amount;
    },
    Out: function(amount) {
      return amount * (2 - amount);
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount;
      }
      return -0.5 * (--amount * (amount - 2) - 1);
    }
  }),
  Cubic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount;
    },
    Out: function(amount) {
      return --amount * amount * amount + 1;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount;
      }
      return 0.5 * ((amount -= 2) * amount * amount + 2);
    }
  }),
  Quartic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount * amount;
    },
    Out: function(amount) {
      return 1 - --amount * amount * amount * amount;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount * amount;
      }
      return -0.5 * ((amount -= 2) * amount * amount * amount - 2);
    }
  }),
  Quintic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount * amount * amount;
    },
    Out: function(amount) {
      return --amount * amount * amount * amount * amount + 1;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount * amount * amount;
      }
      return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);
    }
  }),
  Sinusoidal: Object.freeze({
    In: function(amount) {
      return 1 - Math.sin((1 - amount) * Math.PI / 2);
    },
    Out: function(amount) {
      return Math.sin(amount * Math.PI / 2);
    },
    InOut: function(amount) {
      return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));
    }
  }),
  Exponential: Object.freeze({
    In: function(amount) {
      return amount === 0 ? 0 : Math.pow(1024, amount - 1);
    },
    Out: function(amount) {
      return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);
    },
    InOut: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      if ((amount *= 2) < 1) {
        return 0.5 * Math.pow(1024, amount - 1);
      }
      return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);
    }
  }),
  Circular: Object.freeze({
    In: function(amount) {
      return 1 - Math.sqrt(1 - amount * amount);
    },
    Out: function(amount) {
      return Math.sqrt(1 - --amount * amount);
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return -0.5 * (Math.sqrt(1 - amount * amount) - 1);
      }
      return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);
    }
  }),
  Elastic: Object.freeze({
    In: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
    },
    Out: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;
    },
    InOut: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      amount *= 2;
      if (amount < 1) {
        return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
      }
      return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;
    }
  }),
  Back: Object.freeze({
    In: function(amount) {
      var s = 1.70158;
      return amount === 1 ? 1 : amount * amount * ((s + 1) * amount - s);
    },
    Out: function(amount) {
      var s = 1.70158;
      return amount === 0 ? 0 : --amount * amount * ((s + 1) * amount + s) + 1;
    },
    InOut: function(amount) {
      var s = 1.70158 * 1.525;
      if ((amount *= 2) < 1) {
        return 0.5 * (amount * amount * ((s + 1) * amount - s));
      }
      return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);
    }
  }),
  Bounce: Object.freeze({
    In: function(amount) {
      return 1 - Easing.Bounce.Out(1 - amount);
    },
    Out: function(amount) {
      if (amount < 1 / 2.75) {
        return 7.5625 * amount * amount;
      } else if (amount < 2 / 2.75) {
        return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;
      } else if (amount < 2.5 / 2.75) {
        return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;
      } else {
        return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;
      }
    },
    InOut: function(amount) {
      if (amount < 0.5) {
        return Easing.Bounce.In(amount * 2) * 0.5;
      }
      return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;
    }
  }),
  generatePow: function(power) {
    if (power === void 0) {
      power = 4;
    }
    power = power < Number.EPSILON ? Number.EPSILON : power;
    power = power > 1e4 ? 1e4 : power;
    return {
      In: function(amount) {
        return Math.pow(amount, power);
      },
      Out: function(amount) {
        return 1 - Math.pow(1 - amount, power);
      },
      InOut: function(amount) {
        if (amount < 0.5) {
          return Math.pow(amount * 2, power) / 2;
        }
        return (1 - Math.pow(2 - amount * 2, power)) / 2 + 0.5;
      }
    };
  }
});
var now2 = function() {
  return performance.now();
};
var Group2 = (
  /** @class */
  function() {
    function Group3() {
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      this._tweens = {};
      this._tweensAddedDuringUpdate = {};
      this.add.apply(this, tweens);
    }
    Group3.prototype.getAll = function() {
      var _this = this;
      return Object.keys(this._tweens).map(function(tweenId) {
        return _this._tweens[tweenId];
      });
    };
    Group3.prototype.removeAll = function() {
      this._tweens = {};
    };
    Group3.prototype.add = function() {
      var _a2;
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      for (var _b2 = 0, tweens_1 = tweens; _b2 < tweens_1.length; _b2++) {
        var tween = tweens_1[_b2];
        (_a2 = tween._group) === null || _a2 === void 0 ? void 0 : _a2.remove(tween);
        tween._group = this;
        this._tweens[tween.getId()] = tween;
        this._tweensAddedDuringUpdate[tween.getId()] = tween;
      }
    };
    Group3.prototype.remove = function() {
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      for (var _a2 = 0, tweens_2 = tweens; _a2 < tweens_2.length; _a2++) {
        var tween = tweens_2[_a2];
        tween._group = void 0;
        delete this._tweens[tween.getId()];
        delete this._tweensAddedDuringUpdate[tween.getId()];
      }
    };
    Group3.prototype.allStopped = function() {
      return this.getAll().every(function(tween) {
        return !tween.isPlaying();
      });
    };
    Group3.prototype.update = function(time2, preserve) {
      if (time2 === void 0) {
        time2 = now2();
      }
      if (preserve === void 0) {
        preserve = true;
      }
      var tweenIds = Object.keys(this._tweens);
      if (tweenIds.length === 0)
        return;
      while (tweenIds.length > 0) {
        this._tweensAddedDuringUpdate = {};
        for (var i = 0; i < tweenIds.length; i++) {
          var tween = this._tweens[tweenIds[i]];
          var autoStart = !preserve;
          if (tween && tween.update(time2, autoStart) === false && !preserve)
            this.remove(tween);
        }
        tweenIds = Object.keys(this._tweensAddedDuringUpdate);
      }
    };
    return Group3;
  }()
);
var Interpolation = {
  Linear: function(v2, k) {
    var m = v2.length - 1;
    var f = m * k;
    var i = Math.floor(f);
    var fn = Interpolation.Utils.Linear;
    if (k < 0) {
      return fn(v2[0], v2[1], f);
    }
    if (k > 1) {
      return fn(v2[m], v2[m - 1], m - f);
    }
    return fn(v2[i], v2[i + 1 > m ? m : i + 1], f - i);
  },
  Bezier: function(v2, k) {
    var b = 0;
    var n = v2.length - 1;
    var pw = Math.pow;
    var bn = Interpolation.Utils.Bernstein;
    for (var i = 0; i <= n; i++) {
      b += pw(1 - k, n - i) * pw(k, i) * v2[i] * bn(n, i);
    }
    return b;
  },
  CatmullRom: function(v2, k) {
    var m = v2.length - 1;
    var f = m * k;
    var i = Math.floor(f);
    var fn = Interpolation.Utils.CatmullRom;
    if (v2[0] === v2[m]) {
      if (k < 0) {
        i = Math.floor(f = m * (1 + k));
      }
      return fn(v2[(i - 1 + m) % m], v2[i], v2[(i + 1) % m], v2[(i + 2) % m], f - i);
    } else {
      if (k < 0) {
        return v2[0] - (fn(v2[0], v2[0], v2[1], v2[1], -f) - v2[0]);
      }
      if (k > 1) {
        return v2[m] - (fn(v2[m], v2[m], v2[m - 1], v2[m - 1], f - m) - v2[m]);
      }
      return fn(v2[i ? i - 1 : 0], v2[i], v2[m < i + 1 ? m : i + 1], v2[m < i + 2 ? m : i + 2], f - i);
    }
  },
  Utils: {
    Linear: function(p02, p1, t) {
      return (p1 - p02) * t + p02;
    },
    Bernstein: function(n, i) {
      var fc = Interpolation.Utils.Factorial;
      return fc(n) / fc(i) / fc(n - i);
    },
    Factorial: /* @__PURE__ */ function() {
      var a = [1];
      return function(n) {
        var s = 1;
        if (a[n]) {
          return a[n];
        }
        for (var i = n; i > 1; i--) {
          s *= i;
        }
        a[n] = s;
        return s;
      };
    }(),
    CatmullRom: function(p02, p1, p2, p3, t) {
      var v0 = (p2 - p02) * 0.5;
      var v1 = (p3 - p1) * 0.5;
      var t22 = t * t;
      var t32 = t * t22;
      return (2 * p1 - 2 * p2 + v0 + v1) * t32 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t22 + v0 * t + p1;
    }
  }
};
var Sequence = (
  /** @class */
  function() {
    function Sequence2() {
    }
    Sequence2.nextId = function() {
      return Sequence2._nextId++;
    };
    Sequence2._nextId = 0;
    return Sequence2;
  }()
);
var mainGroup = new Group2();
var Tween = (
  /** @class */
  function() {
    function Tween2(object2, group2) {
      this._isPaused = false;
      this._pauseStart = 0;
      this._valuesStart = {};
      this._valuesEnd = {};
      this._valuesStartRepeat = {};
      this._duration = 1e3;
      this._isDynamic = false;
      this._initialRepeat = 0;
      this._repeat = 0;
      this._yoyo = false;
      this._isPlaying = false;
      this._reversed = false;
      this._delayTime = 0;
      this._startTime = 0;
      this._easingFunction = Easing.Linear.None;
      this._interpolationFunction = Interpolation.Linear;
      this._chainedTweens = [];
      this._onStartCallbackFired = false;
      this._onEveryStartCallbackFired = false;
      this._id = Sequence.nextId();
      this._isChainStopped = false;
      this._propertiesAreSetUp = false;
      this._goToEnd = false;
      this._object = object2;
      if (typeof group2 === "object") {
        this._group = group2;
        group2.add(this);
      } else if (group2 === true) {
        this._group = mainGroup;
        mainGroup.add(this);
      }
    }
    Tween2.prototype.getId = function() {
      return this._id;
    };
    Tween2.prototype.isPlaying = function() {
      return this._isPlaying;
    };
    Tween2.prototype.isPaused = function() {
      return this._isPaused;
    };
    Tween2.prototype.getDuration = function() {
      return this._duration;
    };
    Tween2.prototype.to = function(target, duration) {
      if (duration === void 0) {
        duration = 1e3;
      }
      if (this._isPlaying)
        throw new Error("Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.");
      this._valuesEnd = target;
      this._propertiesAreSetUp = false;
      this._duration = duration < 0 ? 0 : duration;
      return this;
    };
    Tween2.prototype.duration = function(duration) {
      if (duration === void 0) {
        duration = 1e3;
      }
      this._duration = duration < 0 ? 0 : duration;
      return this;
    };
    Tween2.prototype.dynamic = function(dynamic) {
      if (dynamic === void 0) {
        dynamic = false;
      }
      this._isDynamic = dynamic;
      return this;
    };
    Tween2.prototype.start = function(time2, overrideStartingValues) {
      if (time2 === void 0) {
        time2 = now2();
      }
      if (overrideStartingValues === void 0) {
        overrideStartingValues = false;
      }
      if (this._isPlaying) {
        return this;
      }
      this._repeat = this._initialRepeat;
      if (this._reversed) {
        this._reversed = false;
        for (var property in this._valuesStartRepeat) {
          this._swapEndStartRepeatValues(property);
          this._valuesStart[property] = this._valuesStartRepeat[property];
        }
      }
      this._isPlaying = true;
      this._isPaused = false;
      this._onStartCallbackFired = false;
      this._onEveryStartCallbackFired = false;
      this._isChainStopped = false;
      this._startTime = time2;
      this._startTime += this._delayTime;
      if (!this._propertiesAreSetUp || overrideStartingValues) {
        this._propertiesAreSetUp = true;
        if (!this._isDynamic) {
          var tmp = {};
          for (var prop in this._valuesEnd)
            tmp[prop] = this._valuesEnd[prop];
          this._valuesEnd = tmp;
        }
        this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, overrideStartingValues);
      }
      return this;
    };
    Tween2.prototype.startFromCurrentValues = function(time2) {
      return this.start(time2, true);
    };
    Tween2.prototype._setupProperties = function(_object, _valuesStart, _valuesEnd, _valuesStartRepeat, overrideStartingValues) {
      for (var property in _valuesEnd) {
        var startValue = _object[property];
        var startValueIsArray = Array.isArray(startValue);
        var propType = startValueIsArray ? "array" : typeof startValue;
        var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);
        if (propType === "undefined" || propType === "function") {
          continue;
        }
        if (isInterpolationList) {
          var endValues = _valuesEnd[property];
          if (endValues.length === 0) {
            continue;
          }
          var temp = [startValue];
          for (var i = 0, l = endValues.length; i < l; i += 1) {
            var value = this._handleRelativeValue(startValue, endValues[i]);
            if (isNaN(value)) {
              isInterpolationList = false;
              console.warn("Found invalid interpolation list. Skipping.");
              break;
            }
            temp.push(value);
          }
          if (isInterpolationList) {
            _valuesEnd[property] = temp;
          }
        }
        if ((propType === "object" || startValueIsArray) && startValue && !isInterpolationList) {
          _valuesStart[property] = startValueIsArray ? [] : {};
          var nestedObject = startValue;
          for (var prop in nestedObject) {
            _valuesStart[property][prop] = nestedObject[prop];
          }
          _valuesStartRepeat[property] = startValueIsArray ? [] : {};
          var endValues = _valuesEnd[property];
          if (!this._isDynamic) {
            var tmp = {};
            for (var prop in endValues)
              tmp[prop] = endValues[prop];
            _valuesEnd[property] = endValues = tmp;
          }
          this._setupProperties(nestedObject, _valuesStart[property], endValues, _valuesStartRepeat[property], overrideStartingValues);
        } else {
          if (typeof _valuesStart[property] === "undefined" || overrideStartingValues) {
            _valuesStart[property] = startValue;
          }
          if (!startValueIsArray) {
            _valuesStart[property] *= 1;
          }
          if (isInterpolationList) {
            _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();
          } else {
            _valuesStartRepeat[property] = _valuesStart[property] || 0;
          }
        }
      }
    };
    Tween2.prototype.stop = function() {
      if (!this._isChainStopped) {
        this._isChainStopped = true;
        this.stopChainedTweens();
      }
      if (!this._isPlaying) {
        return this;
      }
      this._isPlaying = false;
      this._isPaused = false;
      if (this._onStopCallback) {
        this._onStopCallback(this._object);
      }
      return this;
    };
    Tween2.prototype.end = function() {
      this._goToEnd = true;
      this.update(this._startTime + this._duration);
      return this;
    };
    Tween2.prototype.pause = function(time2) {
      if (time2 === void 0) {
        time2 = now2();
      }
      if (this._isPaused || !this._isPlaying) {
        return this;
      }
      this._isPaused = true;
      this._pauseStart = time2;
      return this;
    };
    Tween2.prototype.resume = function(time2) {
      if (time2 === void 0) {
        time2 = now2();
      }
      if (!this._isPaused || !this._isPlaying) {
        return this;
      }
      this._isPaused = false;
      this._startTime += time2 - this._pauseStart;
      this._pauseStart = 0;
      return this;
    };
    Tween2.prototype.stopChainedTweens = function() {
      for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
        this._chainedTweens[i].stop();
      }
      return this;
    };
    Tween2.prototype.group = function(group2) {
      if (!group2) {
        console.warn("tween.group() without args has been removed, use group.add(tween) instead.");
        return this;
      }
      group2.add(this);
      return this;
    };
    Tween2.prototype.remove = function() {
      var _a2;
      (_a2 = this._group) === null || _a2 === void 0 ? void 0 : _a2.remove(this);
      return this;
    };
    Tween2.prototype.delay = function(amount) {
      if (amount === void 0) {
        amount = 0;
      }
      this._delayTime = amount;
      return this;
    };
    Tween2.prototype.repeat = function(times) {
      if (times === void 0) {
        times = 0;
      }
      this._initialRepeat = times;
      this._repeat = times;
      return this;
    };
    Tween2.prototype.repeatDelay = function(amount) {
      this._repeatDelayTime = amount;
      return this;
    };
    Tween2.prototype.yoyo = function(yoyo) {
      if (yoyo === void 0) {
        yoyo = false;
      }
      this._yoyo = yoyo;
      return this;
    };
    Tween2.prototype.easing = function(easingFunction) {
      if (easingFunction === void 0) {
        easingFunction = Easing.Linear.None;
      }
      this._easingFunction = easingFunction;
      return this;
    };
    Tween2.prototype.interpolation = function(interpolationFunction) {
      if (interpolationFunction === void 0) {
        interpolationFunction = Interpolation.Linear;
      }
      this._interpolationFunction = interpolationFunction;
      return this;
    };
    Tween2.prototype.chain = function() {
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      this._chainedTweens = tweens;
      return this;
    };
    Tween2.prototype.onStart = function(callback) {
      this._onStartCallback = callback;
      return this;
    };
    Tween2.prototype.onEveryStart = function(callback) {
      this._onEveryStartCallback = callback;
      return this;
    };
    Tween2.prototype.onUpdate = function(callback) {
      this._onUpdateCallback = callback;
      return this;
    };
    Tween2.prototype.onRepeat = function(callback) {
      this._onRepeatCallback = callback;
      return this;
    };
    Tween2.prototype.onComplete = function(callback) {
      this._onCompleteCallback = callback;
      return this;
    };
    Tween2.prototype.onStop = function(callback) {
      this._onStopCallback = callback;
      return this;
    };
    Tween2.prototype.update = function(time2, autoStart) {
      var _this = this;
      var _a2;
      if (time2 === void 0) {
        time2 = now2();
      }
      if (autoStart === void 0) {
        autoStart = Tween2.autoStartOnUpdate;
      }
      if (this._isPaused)
        return true;
      var property;
      if (!this._goToEnd && !this._isPlaying) {
        if (autoStart)
          this.start(time2, true);
        else
          return false;
      }
      this._goToEnd = false;
      if (time2 < this._startTime) {
        return true;
      }
      if (this._onStartCallbackFired === false) {
        if (this._onStartCallback) {
          this._onStartCallback(this._object);
        }
        this._onStartCallbackFired = true;
      }
      if (this._onEveryStartCallbackFired === false) {
        if (this._onEveryStartCallback) {
          this._onEveryStartCallback(this._object);
        }
        this._onEveryStartCallbackFired = true;
      }
      var elapsedTime = time2 - this._startTime;
      var durationAndDelay = this._duration + ((_a2 = this._repeatDelayTime) !== null && _a2 !== void 0 ? _a2 : this._delayTime);
      var totalTime = this._duration + this._repeat * durationAndDelay;
      var calculateElapsedPortion = function() {
        if (_this._duration === 0)
          return 1;
        if (elapsedTime > totalTime) {
          return 1;
        }
        var timesRepeated = Math.trunc(elapsedTime / durationAndDelay);
        var timeIntoCurrentRepeat = elapsedTime - timesRepeated * durationAndDelay;
        var portion = Math.min(timeIntoCurrentRepeat / _this._duration, 1);
        if (portion === 0 && elapsedTime === _this._duration) {
          return 1;
        }
        return portion;
      };
      var elapsed = calculateElapsedPortion();
      var value = this._easingFunction(elapsed);
      this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);
      if (this._onUpdateCallback) {
        this._onUpdateCallback(this._object, elapsed);
      }
      if (this._duration === 0 || elapsedTime >= this._duration) {
        if (this._repeat > 0) {
          var completeCount = Math.min(Math.trunc((elapsedTime - this._duration) / durationAndDelay) + 1, this._repeat);
          if (isFinite(this._repeat)) {
            this._repeat -= completeCount;
          }
          for (property in this._valuesStartRepeat) {
            if (!this._yoyo && typeof this._valuesEnd[property] === "string") {
              this._valuesStartRepeat[property] = // eslint-disable-next-line
              // @ts-ignore FIXME?
              this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);
            }
            if (this._yoyo) {
              this._swapEndStartRepeatValues(property);
            }
            this._valuesStart[property] = this._valuesStartRepeat[property];
          }
          if (this._yoyo) {
            this._reversed = !this._reversed;
          }
          this._startTime += durationAndDelay * completeCount;
          if (this._onRepeatCallback) {
            this._onRepeatCallback(this._object);
          }
          this._onEveryStartCallbackFired = false;
          return true;
        } else {
          if (this._onCompleteCallback) {
            this._onCompleteCallback(this._object);
          }
          for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
            this._chainedTweens[i].start(this._startTime + this._duration, false);
          }
          this._isPlaying = false;
          return false;
        }
      }
      return true;
    };
    Tween2.prototype._updateProperties = function(_object, _valuesStart, _valuesEnd, value) {
      for (var property in _valuesEnd) {
        if (_valuesStart[property] === void 0) {
          continue;
        }
        var start = _valuesStart[property] || 0;
        var end = _valuesEnd[property];
        var startIsArray = Array.isArray(_object[property]);
        var endIsArray = Array.isArray(end);
        var isInterpolationList = !startIsArray && endIsArray;
        if (isInterpolationList) {
          _object[property] = this._interpolationFunction(end, value);
        } else if (typeof end === "object" && end) {
          this._updateProperties(_object[property], start, end, value);
        } else {
          end = this._handleRelativeValue(start, end);
          if (typeof end === "number") {
            _object[property] = start + (end - start) * value;
          }
        }
      }
    };
    Tween2.prototype._handleRelativeValue = function(start, end) {
      if (typeof end !== "string") {
        return end;
      }
      if (end.charAt(0) === "+" || end.charAt(0) === "-") {
        return start + parseFloat(end);
      }
      return parseFloat(end);
    };
    Tween2.prototype._swapEndStartRepeatValues = function(property) {
      var tmp = this._valuesStartRepeat[property];
      var endValue = this._valuesEnd[property];
      if (typeof endValue === "string") {
        this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);
      } else {
        this._valuesStartRepeat[property] = this._valuesEnd[property];
      }
      this._valuesEnd[property] = tmp;
    };
    Tween2.autoStartOnUpdate = false;
    return Tween2;
  }()
);
var nextId = Sequence.nextId;
var TWEEN = mainGroup;
var getAll = TWEEN.getAll.bind(TWEEN);
var removeAll = TWEEN.removeAll.bind(TWEEN);
var add = TWEEN.add.bind(TWEEN);
var remove = TWEEN.remove.bind(TWEEN);
var update = TWEEN.update.bind(TWEEN);

// node_modules/earcut/src/earcut.js
function earcut(data, holeIndices, dim = 2) {
  const hasHoles = holeIndices && holeIndices.length;
  const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
  let outerNode = linkedList(data, 0, outerLen, dim, true);
  const triangles = [];
  if (!outerNode || outerNode.next === outerNode.prev) return triangles;
  let minX, minY, invSize;
  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
  if (data.length > 80 * dim) {
    minX = Infinity;
    minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i = dim; i < outerLen; i += dim) {
      const x = data[i];
      const y = data[i + 1];
      if (x < minX) minX = x;
      if (y < minY) minY = y;
      if (x > maxX) maxX = x;
      if (y > maxY) maxY = y;
    }
    invSize = Math.max(maxX - minX, maxY - minY);
    invSize = invSize !== 0 ? 32767 / invSize : 0;
  }
  earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
  return triangles;
}
function linkedList(data, start, end, dim, clockwise) {
  let last;
  if (clockwise === signedArea(data, start, end, dim) > 0) {
    for (let i = start; i < end; i += dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);
  } else {
    for (let i = end - dim; i >= start; i -= dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);
  }
  if (last && equals(last, last.next)) {
    removeNode(last);
    last = last.next;
  }
  return last;
}
function filterPoints(start, end) {
  if (!start) return start;
  if (!end) end = start;
  let p = start, again;
  do {
    again = false;
    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
      removeNode(p);
      p = end = p.prev;
      if (p === p.next) break;
      again = true;
    } else {
      p = p.next;
    }
  } while (again || p !== end);
  return end;
}
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
  if (!ear) return;
  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
  let stop = ear;
  while (ear.prev !== ear.next) {
    const prev = ear.prev;
    const next = ear.next;
    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
      triangles.push(prev.i, ear.i, next.i);
      removeNode(ear);
      ear = next.next;
      stop = next.next;
      continue;
    }
    ear = next;
    if (ear === stop) {
      if (!pass) {
        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
      } else if (pass === 1) {
        ear = cureLocalIntersections(filterPoints(ear), triangles);
        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
      } else if (pass === 2) {
        splitEarcut(ear, triangles, dim, minX, minY, invSize);
      }
      break;
    }
  }
}
function isEar(ear) {
  const a = ear.prev, b = ear, c3 = ear.next;
  if (area(a, b, c3) >= 0) return false;
  const ax = a.x, bx = b.x, cx = c3.x, ay = a.y, by = b.y, cy = c3.y;
  const x03 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y03 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x12 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y12 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
  let p = c3.next;
  while (p !== a) {
    if (p.x >= x03 && p.x <= x12 && p.y >= y03 && p.y <= y12 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
    p = p.next;
  }
  return true;
}
function isEarHashed(ear, minX, minY, invSize) {
  const a = ear.prev, b = ear, c3 = ear.next;
  if (area(a, b, c3) >= 0) return false;
  const ax = a.x, bx = b.x, cx = c3.x, ay = a.y, by = b.y, cy = c3.y;
  const x03 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y03 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x12 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y12 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
  const minZ = zOrder(x03, y03, minX, minY, invSize), maxZ = zOrder(x12, y12, minX, minY, invSize);
  let p = ear.prevZ, n = ear.nextZ;
  while (p && p.z >= minZ && n && n.z <= maxZ) {
    if (p.x >= x03 && p.x <= x12 && p.y >= y03 && p.y <= y12 && p !== a && p !== c3 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
    p = p.prevZ;
    if (n.x >= x03 && n.x <= x12 && n.y >= y03 && n.y <= y12 && n !== a && n !== c3 && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
    n = n.nextZ;
  }
  while (p && p.z >= minZ) {
    if (p.x >= x03 && p.x <= x12 && p.y >= y03 && p.y <= y12 && p !== a && p !== c3 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
    p = p.prevZ;
  }
  while (n && n.z <= maxZ) {
    if (n.x >= x03 && n.x <= x12 && n.y >= y03 && n.y <= y12 && n !== a && n !== c3 && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
    n = n.nextZ;
  }
  return true;
}
function cureLocalIntersections(start, triangles) {
  let p = start;
  do {
    const a = p.prev, b = p.next.next;
    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
      triangles.push(a.i, p.i, b.i);
      removeNode(p);
      removeNode(p.next);
      p = start = b;
    }
    p = p.next;
  } while (p !== start);
  return filterPoints(p);
}
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
  let a = start;
  do {
    let b = a.next.next;
    while (b !== a.prev) {
      if (a.i !== b.i && isValidDiagonal(a, b)) {
        let c3 = splitPolygon(a, b);
        a = filterPoints(a, a.next);
        c3 = filterPoints(c3, c3.next);
        earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
        earcutLinked(c3, triangles, dim, minX, minY, invSize, 0);
        return;
      }
      b = b.next;
    }
    a = a.next;
  } while (a !== start);
}
function eliminateHoles(data, holeIndices, outerNode, dim) {
  const queue = [];
  for (let i = 0, len = holeIndices.length; i < len; i++) {
    const start = holeIndices[i] * dim;
    const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
    const list = linkedList(data, start, end, dim, false);
    if (list === list.next) list.steiner = true;
    queue.push(getLeftmost(list));
  }
  queue.sort(compareX);
  for (let i = 0; i < queue.length; i++) {
    outerNode = eliminateHole(queue[i], outerNode);
  }
  return outerNode;
}
function compareX(a, b) {
  return a.x - b.x;
}
function eliminateHole(hole, outerNode) {
  const bridge = findHoleBridge(hole, outerNode);
  if (!bridge) {
    return outerNode;
  }
  const bridgeReverse = splitPolygon(bridge, hole);
  filterPoints(bridgeReverse, bridgeReverse.next);
  return filterPoints(bridge, bridge.next);
}
function findHoleBridge(hole, outerNode) {
  let p = outerNode;
  const hx = hole.x;
  const hy = hole.y;
  let qx = -Infinity;
  let m;
  do {
    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
      const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
      if (x <= hx && x > qx) {
        qx = x;
        m = p.x < p.next.x ? p : p.next;
        if (x === hx) return m;
      }
    }
    p = p.next;
  } while (p !== outerNode);
  if (!m) return null;
  const stop = m;
  const mx = m.x;
  const my = m.y;
  let tanMin = Infinity;
  p = m;
  do {
    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
      const tan2 = Math.abs(hy - p.y) / (hx - p.x);
      if (locallyInside(p, hole) && (tan2 < tanMin || tan2 === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
        m = p;
        tanMin = tan2;
      }
    }
    p = p.next;
  } while (p !== stop);
  return m;
}
function sectorContainsSector(m, p) {
  return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}
function indexCurve(start, minX, minY, invSize) {
  let p = start;
  do {
    if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);
    p.prevZ = p.prev;
    p.nextZ = p.next;
    p = p.next;
  } while (p !== start);
  p.prevZ.nextZ = null;
  p.prevZ = null;
  sortLinked(p);
}
function sortLinked(list) {
  let numMerges;
  let inSize = 1;
  do {
    let p = list;
    let e;
    list = null;
    let tail = null;
    numMerges = 0;
    while (p) {
      numMerges++;
      let q = p;
      let pSize = 0;
      for (let i = 0; i < inSize; i++) {
        pSize++;
        q = q.nextZ;
        if (!q) break;
      }
      let qSize = inSize;
      while (pSize > 0 || qSize > 0 && q) {
        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
          e = p;
          p = p.nextZ;
          pSize--;
        } else {
          e = q;
          q = q.nextZ;
          qSize--;
        }
        if (tail) tail.nextZ = e;
        else list = e;
        e.prevZ = tail;
        tail = e;
      }
      p = q;
    }
    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);
  return list;
}
function zOrder(x, y, minX, minY, invSize) {
  x = (x - minX) * invSize | 0;
  y = (y - minY) * invSize | 0;
  x = (x | x << 8) & 16711935;
  x = (x | x << 4) & 252645135;
  x = (x | x << 2) & 858993459;
  x = (x | x << 1) & 1431655765;
  y = (y | y << 8) & 16711935;
  y = (y | y << 4) & 252645135;
  y = (y | y << 2) & 858993459;
  y = (y | y << 1) & 1431655765;
  return x | y << 1;
}
function getLeftmost(start) {
  let p = start, leftmost = start;
  do {
    if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
    p = p.next;
  } while (p !== start);
  return leftmost;
}
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
  return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
}
function isValidDiagonal(a, b) {
  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
  (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
  (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
  equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
}
function area(p, q, r) {
  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
function equals(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
}
function intersects(p1, q1, p2, q2) {
  const o1 = sign(area(p1, q1, p2));
  const o2 = sign(area(p1, q1, q2));
  const o3 = sign(area(p2, q2, p1));
  const o4 = sign(area(p2, q2, q1));
  if (o1 !== o2 && o3 !== o4) return true;
  if (o1 === 0 && onSegment(p1, p2, q1)) return true;
  if (o2 === 0 && onSegment(p1, q2, q1)) return true;
  if (o3 === 0 && onSegment(p2, p1, q2)) return true;
  if (o4 === 0 && onSegment(p2, q1, q2)) return true;
  return false;
}
function onSegment(p, q, r) {
  return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function sign(num) {
  return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon(a, b) {
  let p = a;
  do {
    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;
    p = p.next;
  } while (p !== a);
  return false;
}
function locallyInside(a, b) {
  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}
function middleInside(a, b) {
  let p = a;
  let inside = false;
  const px = (a.x + b.x) / 2;
  const py = (a.y + b.y) / 2;
  do {
    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)
      inside = !inside;
    p = p.next;
  } while (p !== a);
  return inside;
}
function splitPolygon(a, b) {
  const a2 = createNode(a.i, a.x, a.y), b2 = createNode(b.i, b.x, b.y), an = a.next, bp = b.prev;
  a.next = b;
  b.prev = a;
  a2.next = an;
  an.prev = a2;
  b2.next = a2;
  a2.prev = b2;
  bp.next = b2;
  b2.prev = bp;
  return b2;
}
function insertNode(i, x, y, last) {
  const p = createNode(i, x, y);
  if (!last) {
    p.prev = p;
    p.next = p;
  } else {
    p.next = last.next;
    p.prev = last;
    last.next.prev = p;
    last.next = p;
  }
  return p;
}
function removeNode(p) {
  p.next.prev = p.prev;
  p.prev.next = p.next;
  if (p.prevZ) p.prevZ.nextZ = p.nextZ;
  if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}
function createNode(i, x, y) {
  return {
    i,
    // vertex index in coordinates array
    x,
    y,
    // vertex coordinates
    prev: null,
    // previous and next vertex nodes in a polygon ring
    next: null,
    z: 0,
    // z-order curve value
    prevZ: null,
    // previous and next nodes in z-order
    nextZ: null,
    steiner: false
    // indicates whether this is a steiner point
  };
}
function signedArea(data, start, end, dim) {
  let sum3 = 0;
  for (let i = start, j = end - dim; i < end; i += dim) {
    sum3 += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
    j = i;
  }
  return sum3;
}
function flatten(data) {
  const vertices = [];
  const holes = [];
  const dimensions = data[0][0].length;
  let holeIndex = 0;
  let prevLen = 0;
  for (const ring of data) {
    for (const p of ring) {
      for (let d = 0; d < dimensions; d++) vertices.push(p[d]);
    }
    if (prevLen) {
      holeIndex += prevLen;
      holes.push(holeIndex);
    }
    prevLen = ring.length;
  }
  return { vertices, holes, dimensions };
}

// node_modules/d3-array/src/ascending.js
function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a, b) {
  return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d, x) => ascending(f(d), x);
    delta = (d, x) => f(d) - x;
  } else {
    compare1 = f === ascending || f === descending ? f : zero;
    compare2 = f;
    delta = f;
  }
  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }
  return { left, center, right };
}
function zero() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x) {
  return x === null ? NaN : +x;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;

// node_modules/d3-array/src/blur.js
var blur2 = Blur2(blurf);
var blurImage = Blur2(blurfImage);
function Blur2(blur3) {
  return function(data, rx, ry = rx) {
    if (!((rx = +rx) >= 0)) throw new RangeError("invalid rx");
    if (!((ry = +ry) >= 0)) throw new RangeError("invalid ry");
    let { data: values, width, height } = data;
    if (!((width = Math.floor(width)) >= 0)) throw new RangeError("invalid width");
    if (!((height = Math.floor(height !== void 0 ? height : values.length / width)) >= 0)) throw new RangeError("invalid height");
    if (!width || !height || !rx && !ry) return data;
    const blurx = rx && blur3(rx);
    const blury = ry && blur3(ry);
    const temp = values.slice();
    if (blurx && blury) {
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    } else if (blurx) {
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
    } else if (blury) {
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    }
    return data;
  };
}
function blurh(blur3, T, S, w, h) {
  for (let y = 0, n = w * h; y < n; ) {
    blur3(T, S, y, y += w, 1);
  }
}
function blurv(blur3, T, S, w, h) {
  for (let x = 0, n = w * h; x < w; ++x) {
    blur3(T, S, x, x + n, w);
  }
}
function blurfImage(radius) {
  const blur3 = blurf(radius);
  return (T, S, start, stop, step) => {
    start <<= 2, stop <<= 2, step <<= 2;
    blur3(T, S, start + 0, stop + 0, step);
    blur3(T, S, start + 1, stop + 1, step);
    blur3(T, S, start + 2, stop + 2, step);
    blur3(T, S, start + 3, stop + 3, step);
  };
}
function blurf(radius) {
  const radius0 = Math.floor(radius);
  if (radius0 === radius) return bluri(radius);
  const t = radius - radius0;
  const w = 2 * radius + 1;
  return (T, S, start, stop, step) => {
    if (!((stop -= step) >= start)) return;
    let sum3 = radius0 * S[start];
    const s0 = step * radius0;
    const s1 = s0 + step;
    for (let i = start, j = start + s0; i < j; i += step) {
      sum3 += S[Math.min(stop, i)];
    }
    for (let i = start, j = stop; i <= j; i += step) {
      sum3 += S[Math.min(stop, i + s0)];
      T[i] = (sum3 + t * (S[Math.max(start, i - s1)] + S[Math.min(stop, i + s1)])) / w;
      sum3 -= S[Math.max(start, i - s0)];
    }
  };
}
function bluri(radius) {
  const w = 2 * radius + 1;
  return (T, S, start, stop, step) => {
    if (!((stop -= step) >= start)) return;
    let sum3 = radius * S[start];
    const s = step * radius;
    for (let i = start, j = start + s; i < j; i += step) {
      sum3 += S[Math.min(stop, i)];
    }
    for (let i = start, j = stop; i <= j; i += step) {
      sum3 += S[Math.min(stop, i + s)];
      T[i] = sum3 / w;
      sum3 -= S[Math.max(start, i - s)];
    }
  };
}

// node_modules/d3-array/src/extent.js
function extent(values, valueof) {
  let min3;
  let max3;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null) {
        if (min3 === void 0) {
          if (value >= value) min3 = max3 = value;
        } else {
          if (min3 > value) min3 = value;
          if (max3 < value) max3 = value;
        }
      }
    }
  } else {
    let index5 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index5, values)) != null) {
        if (min3 === void 0) {
          if (value >= value) min3 = max3 = value;
        } else {
          if (min3 > value) min3 = value;
          if (max3 < value) max3 = value;
        }
      }
    }
  }
  return [min3, max3];
}

// node_modules/d3-array/src/fsum.js
var Adder = class {
  constructor() {
    this._partials = new Float64Array(32);
    this._n = 0;
  }
  add(x) {
    const p = this._partials;
    let i = 0;
    for (let j = 0; j < this._n && j < 32; j++) {
      const y = p[j], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
      if (lo) p[i++] = lo;
      x = hi;
    }
    p[i] = x;
    this._n = i + 1;
    return this;
  }
  valueOf() {
    const p = this._partials;
    let n = this._n, x, y, lo, hi = 0;
    if (n > 0) {
      hi = p[--n];
      while (n > 0) {
        x = hi;
        y = p[--n];
        hi = x + y;
        lo = y - (hi - x);
        if (lo) break;
      }
      if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
        y = lo * 2;
        x = hi + y;
        if (y == x - hi) hi = x;
      }
    }
    return hi;
  }
};

// node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start, stop, count2) {
  const step = (stop - start) / Math.max(0, count2), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start) ++i1;
    if (i2 / inc > stop) --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start) ++i1;
    if (i2 * inc > stop) --i2;
  }
  if (i2 < i1 && 0.5 <= count2 && count2 < 2) return tickSpec(start, stop, count2 * 2);
  return [i1, i2, inc];
}
function ticks(start, stop, count2) {
  stop = +stop, start = +start, count2 = +count2;
  if (!(count2 > 0)) return [];
  if (start === stop) return [start];
  const reverse2 = stop < start, [i1, i2, inc] = reverse2 ? tickSpec(stop, start, count2) : tickSpec(start, stop, count2);
  if (!(i2 >= i1)) return [];
  const n = i2 - i1 + 1, ticks2 = new Array(n);
  if (reverse2) {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) / -inc;
    else for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) * inc;
  } else {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) / -inc;
    else for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) * inc;
  }
  return ticks2;
}
function tickIncrement(start, stop, count2) {
  stop = +stop, start = +start, count2 = +count2;
  return tickSpec(start, stop, count2)[2];
}
function tickStep(start, stop, count2) {
  stop = +stop, start = +start, count2 = +count2;
  const reverse2 = stop < start, inc = reverse2 ? tickIncrement(stop, start, count2) : tickIncrement(start, stop, count2);
  return (reverse2 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

// node_modules/d3-array/src/max.js
function max(values, valueof) {
  let max3;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (max3 < value || max3 === void 0 && value >= value)) {
        max3 = value;
      }
    }
  } else {
    let index5 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index5, values)) != null && (max3 < value || max3 === void 0 && value >= value)) {
        max3 = value;
      }
    }
  }
  return max3;
}

// node_modules/d3-array/src/mean.js
function mean(values, valueof) {
  let count2 = 0;
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count2, sum3 += value;
      }
    }
  } else {
    let index5 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index5, values)) != null && (value = +value) >= value) {
        ++count2, sum3 += value;
      }
    }
  }
  if (count2) return sum3 / count2;
}

// node_modules/d3-array/src/merge.js
function* flatten2(arrays) {
  for (const array2 of arrays) {
    yield* array2;
  }
}
function merge(arrays) {
  return Array.from(flatten2(arrays));
}

// node_modules/d3-array/src/range.js
function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range3 = new Array(n);
  while (++i < n) {
    range3[i] = start + i * step;
  }
  return range3;
}

// node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array2, i0 = 0, i1 = array2.length) {
    let m = i1 - (i0 = +i0);
    while (m) {
      const i = random() * m-- | 0, t = array2[m + i0];
      array2[m + i0] = array2[i + i0];
      array2[i + i0] = t;
    }
    return array2;
  };
}

// node_modules/d3-array/src/sum.js
function sum(values, valueof) {
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value = +value) {
        sum3 += value;
      }
    }
  } else {
    let index5 = -1;
    for (let value of values) {
      if (value = +valueof(value, ++index5, values)) {
        sum3 += value;
      }
    }
  }
  return sum3;
}

// node_modules/d3-geo/src/math.js
var epsilon = 1e-6;
var epsilon2 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;
var degrees = 180 / pi;
var radians = pi / 180;
var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var hypot = Math.hypot;
var log = Math.log;
var sin = Math.sin;
var sign2 = Math.sign || function(x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt = Math.sqrt;
var tan = Math.tan;
function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}
function haversin(x) {
  return (x = sin(x / 2)) * x;
}

// node_modules/d3-geo/src/noop.js
function noop() {
}

// node_modules/d3-geo/src/stream.js
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}
var streamObjectType = {
  Feature: function(object2, stream) {
    streamGeometry(object2.geometry, stream);
  },
  FeatureCollection: function(object2, stream) {
    var features = object2.features, i = -1, n = features.length;
    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function(object2, stream) {
    stream.sphere();
  },
  Point: function(object2, stream) {
    object2 = object2.coordinates;
    stream.point(object2[0], object2[1], object2[2]);
  },
  MultiPoint: function(object2, stream) {
    var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
    while (++i < n) object2 = coordinates2[i], stream.point(object2[0], object2[1], object2[2]);
  },
  LineString: function(object2, stream) {
    streamLine(object2.coordinates, stream, 0);
  },
  MultiLineString: function(object2, stream) {
    var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
    while (++i < n) streamLine(coordinates2[i], stream, 0);
  },
  Polygon: function(object2, stream) {
    streamPolygon(object2.coordinates, stream);
  },
  MultiPolygon: function(object2, stream) {
    var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
    while (++i < n) streamPolygon(coordinates2[i], stream);
  },
  GeometryCollection: function(object2, stream) {
    var geometries = object2.geometries, i = -1, n = geometries.length;
    while (++i < n) streamGeometry(geometries[i], stream);
  }
};
function streamLine(coordinates2, stream, closed) {
  var i = -1, n = coordinates2.length - closed, coordinate;
  stream.lineStart();
  while (++i < n) coordinate = coordinates2[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}
function streamPolygon(coordinates2, stream) {
  var i = -1, n = coordinates2.length;
  stream.polygonStart();
  while (++i < n) streamLine(coordinates2[i], stream, 1);
  stream.polygonEnd();
}
function stream_default(object2, stream) {
  if (object2 && streamObjectType.hasOwnProperty(object2.type)) {
    streamObjectType[object2.type](object2, stream);
  } else {
    streamGeometry(object2, stream);
  }
}

// node_modules/d3-geo/src/area.js
var areaRingSum = new Adder();
var areaSum = new Adder();
var lambda00;
var phi00;
var lambda0;
var cosPhi0;
var sinPhi0;
var areaStream = {
  point: noop,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: function() {
    areaRingSum = new Adder();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = noop;
  },
  sphere: function() {
    areaSum.add(tau);
  }
};
function areaRingStart() {
  areaStream.point = areaPointFirst;
}
function areaRingEnd() {
  areaPoint(lambda00, phi00);
}
function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= radians, phi *= radians;
  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
}
function areaPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  phi = phi / 2 + quarterPi;
  var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos(phi), sinPhi = sin(phi), k = sinPhi0 * sinPhi, u4 = cosPhi0 * cosPhi + k * cos(adLambda), v2 = k * sdLambda * sin(adLambda);
  areaRingSum.add(atan2(v2, u4));
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

// node_modules/d3-geo/src/cartesian.js
function spherical(cartesian3) {
  return [atan2(cartesian3[1], cartesian3[0]), asin(cartesian3[2])];
}
function cartesian(spherical3) {
  var lambda = spherical3[0], phi = spherical3[1], cosPhi = cos(phi);
  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
}
function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}
function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}
function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}
function cartesianNormalizeInPlace(d) {
  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

// node_modules/d3-geo/src/bounds.js
var lambda02;
var phi0;
var lambda1;
var phi1;
var lambda2;
var lambda002;
var phi002;
var p0;
var deltaSum;
var ranges;
var range2;
var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum = new Adder();
    areaStream.polygonStart();
  },
  polygonEnd: function() {
    areaStream.polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (areaRingSum < 0) lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    else if (deltaSum > epsilon) phi1 = 90;
    else if (deltaSum < -epsilon) phi0 = -90;
    range2[0] = lambda02, range2[1] = lambda1;
  },
  sphere: function() {
    lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};
function boundsPoint(lambda, phi) {
  ranges.push(range2 = [lambda02 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}
function linePoint(lambda, phi) {
  var p = cartesian([lambda * radians, phi * radians]);
  if (p0) {
    var normal = cartesianCross(p0, p), equatorial = [normal[1], -normal[0], 0], inflection = cartesianCross(equatorial, normal);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    var delta = lambda - lambda2, sign4 = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees * sign4, phii, antimeridian = abs(delta) > 180;
    if (antimeridian ^ (sign4 * lambda2 < lambdai && lambdai < sign4 * lambda)) {
      phii = inflection[1] * degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign4 * lambda2 < lambdai && lambdai < sign4 * lambda)) {
      phii = -inflection[1] * degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda02, lambda) > angle(lambda02, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda02, lambda1)) lambda02 = lambda;
      }
    } else {
      if (lambda1 >= lambda02) {
        if (lambda < lambda02) lambda02 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda02, lambda) > angle(lambda02, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda02, lambda1)) lambda02 = lambda;
        }
      }
    }
  } else {
    ranges.push(range2 = [lambda02 = lambda, lambda1 = lambda]);
  }
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}
function boundsLineStart() {
  boundsStream.point = linePoint;
}
function boundsLineEnd() {
  range2[0] = lambda02, range2[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}
function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda002 = lambda, phi002 = phi;
  }
  areaStream.point(lambda, phi);
  linePoint(lambda, phi);
}
function boundsRingStart() {
  areaStream.lineStart();
}
function boundsRingEnd() {
  boundsRingPoint(lambda002, phi002);
  areaStream.lineEnd();
  if (abs(deltaSum) > epsilon) lambda02 = -(lambda1 = 180);
  range2[0] = lambda02, range2[1] = lambda1;
  p0 = null;
}
function angle(lambda04, lambda12) {
  return (lambda12 -= lambda04) < 0 ? lambda12 + 360 : lambda12;
}
function rangeCompare(a, b) {
  return a[0] - b[0];
}
function rangeContains(range3, x) {
  return range3[0] <= range3[1] ? range3[0] <= x && x <= range3[1] : x < range3[0] || range3[1] < x;
}
function bounds_default(feature) {
  var i, n, a, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda02 = phi0 = Infinity);
  ranges = [];
  stream_default(feature, boundsStream);
  if (n = ranges.length) {
    ranges.sort(rangeCompare);
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    }
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda02 = b[0], lambda1 = a[1];
    }
  }
  ranges = range2 = null;
  return lambda02 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda02, phi0], [lambda1, phi1]];
}

// node_modules/d3-geo/src/centroid.js
var W0;
var W1;
var X0;
var Y0;
var Z0;
var X1;
var Y1;
var Z1;
var X2;
var Y2;
var Z2;
var lambda003;
var phi003;
var x0;
var y0;
var z0;
var centroidStream = {
  sphere: noop,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};
function centroidPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi);
  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
}
function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}
function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}
function centroidLinePointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi);
  x0 = cosPhi * cos(lambda);
  y0 = cosPhi * sin(lambda);
  z0 = sin(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}
function centroidLinePoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi), x = cosPhi * cos(lambda), y = cosPhi * sin(lambda), z = sin(phi), w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}
function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}
function centroidRingEnd() {
  centroidRingPoint(lambda003, phi003);
  centroidStream.point = centroidPoint;
}
function centroidRingPointFirst(lambda, phi) {
  lambda003 = lambda, phi003 = phi;
  lambda *= radians, phi *= radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = cos(phi);
  x0 = cosPhi * cos(lambda);
  y0 = cosPhi * sin(lambda);
  z0 = sin(phi);
  centroidPointCartesian(x0, y0, z0);
}
function centroidRingPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi), x = cosPhi * cos(lambda), y = cosPhi * sin(lambda), z = sin(phi), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = hypot(cx, cy, cz), w = asin(m), v2 = m && -w / m;
  X2.add(v2 * cx);
  Y2.add(v2 * cy);
  Z2.add(v2 * cz);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}
function centroid_default(object2) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = 0;
  X2 = new Adder();
  Y2 = new Adder();
  Z2 = new Adder();
  stream_default(object2, centroidStream);
  var x = +X2, y = +Y2, z = +Z2, m = hypot(x, y, z);
  if (m < epsilon2) {
    x = X1, y = Y1, z = Z1;
    if (W1 < epsilon) x = X0, y = Y0, z = Z0;
    m = hypot(x, y, z);
    if (m < epsilon2) return [NaN, NaN];
  }
  return [atan2(y, x) * degrees, asin(z / m) * degrees];
}

// node_modules/d3-geo/src/compose.js
function compose_default(a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }
  if (a.invert && b.invert) compose.invert = function(x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };
  return compose;
}

// node_modules/d3-geo/src/rotation.js
function rotationIdentity(lambda, phi) {
  if (abs(lambda) > pi) lambda -= Math.round(lambda / tau) * tau;
  return [lambda, phi];
}
rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose_default(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    lambda += deltaLambda;
    if (abs(lambda) > pi) lambda -= Math.round(lambda / tau) * tau;
    return [lambda, phi];
  };
}
function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos(deltaPhi), sinDeltaPhi = sin(deltaPhi), cosDeltaGamma = cos(deltaGamma), sinDeltaGamma = sin(deltaGamma);
  function rotation(lambda, phi) {
    var cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [
      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
      asin(k * cosDeltaGamma + y * sinDeltaGamma)
    ];
  }
  rotation.invert = function(lambda, phi) {
    var cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [
      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
      asin(k * cosDeltaPhi - x * sinDeltaPhi)
    ];
  };
  return rotation;
}
function rotation_default(rotate) {
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
  function forward(coordinates2) {
    coordinates2 = rotate(coordinates2[0] * radians, coordinates2[1] * radians);
    return coordinates2[0] *= degrees, coordinates2[1] *= degrees, coordinates2;
  }
  forward.invert = function(coordinates2) {
    coordinates2 = rotate.invert(coordinates2[0] * radians, coordinates2[1] * radians);
    return coordinates2[0] *= degrees, coordinates2[1] *= degrees, coordinates2;
  };
  return forward;
}

// node_modules/d3-geo/src/circle.js
function circleStream(stream, radius, delta, direction, t03, t13) {
  if (!delta) return;
  var cosRadius = cos(radius), sinRadius = sin(radius), step = direction * delta;
  if (t03 == null) {
    t03 = radius + direction * tau;
    t13 = radius - step / 2;
  } else {
    t03 = circleRadius(cosRadius, t03);
    t13 = circleRadius(cosRadius, t13);
    if (direction > 0 ? t03 < t13 : t03 > t13) t03 += direction * tau;
  }
  for (var point2, t = t03; direction > 0 ? t > t13 : t < t13; t -= step) {
    point2 = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
    stream.point(point2[0], point2[1]);
  }
}
function circleRadius(cosRadius, point2) {
  point2 = cartesian(point2), point2[0] -= cosRadius;
  cartesianNormalizeInPlace(point2);
  var radius = acos(-point2[1]);
  return ((-point2[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
}

// node_modules/d3-geo/src/clip/buffer.js
function buffer_default() {
  var lines = [], line;
  return {
    point: function(x, y, m) {
      line.push([x, y, m]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop,
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

// node_modules/d3-geo/src/pointEqual.js
function pointEqual_default(a, b) {
  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
}

// node_modules/d3-geo/src/clip/rejoin.js
function Intersection(point2, points, other, entry) {
  this.x = point2;
  this.z = points;
  this.o = other;
  this.e = entry;
  this.v = false;
  this.n = this.p = null;
}
function rejoin_default(segments, compareIntersection2, startInside, interpolate, stream) {
  var subject = [], clip = [], i, n;
  segments.forEach(function(segment) {
    if ((n2 = segment.length - 1) <= 0) return;
    var n2, p02 = segment[0], p1 = segment[n2], x;
    if (pointEqual_default(p02, p1)) {
      if (!p02[2] && !p1[2]) {
        stream.lineStart();
        for (i = 0; i < n2; ++i) stream.point((p02 = segment[i])[0], p02[1]);
        stream.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon;
    }
    subject.push(x = new Intersection(p02, segment, null, true));
    clip.push(x.o = new Intersection(p02, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection2);
  link(subject);
  link(clip);
  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }
  var start = subject[0], points, point2;
  while (1) {
    var current = start, isSubject = true;
    while (current.v) if ((current = current.n) === start) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point2 = points[i])[0], point2[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) stream.point((point2 = points[i])[0], point2[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}
function link(array2) {
  if (!(n = array2.length)) return;
  var n, i = 0, a = array2[0], b;
  while (++i < n) {
    a.n = b = array2[i];
    b.p = a;
    a = b;
  }
  a.n = b = array2[0];
  b.p = a;
}

// node_modules/d3-geo/src/polygonContains.js
function longitude(point2) {
  return abs(point2[0]) <= pi ? point2[0] : sign2(point2[0]) * ((abs(point2[0]) + pi) % tau - pi);
}
function polygonContains_default(polygon, point2) {
  var lambda = longitude(point2), phi = point2[1], sinPhi = sin(phi), normal = [sin(lambda), -cos(lambda), 0], angle2 = 0, winding = 0;
  var sum3 = new Adder();
  if (sinPhi === 1) phi = halfPi + epsilon;
  else if (sinPhi === -1) phi = -halfPi - epsilon;
  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring, m, point0 = ring[m - 1], lambda04 = longitude(point0), phi02 = point0[1] / 2 + quarterPi, sinPhi03 = sin(phi02), cosPhi03 = cos(phi02);
    for (var j = 0; j < m; ++j, lambda04 = lambda12, sinPhi03 = sinPhi1, cosPhi03 = cosPhi1, point0 = point1) {
      var point1 = ring[j], lambda12 = longitude(point1), phi12 = point1[1] / 2 + quarterPi, sinPhi1 = sin(phi12), cosPhi1 = cos(phi12), delta = lambda12 - lambda04, sign4 = delta >= 0 ? 1 : -1, absDelta = sign4 * delta, antimeridian = absDelta > pi, k = sinPhi03 * sinPhi1;
      sum3.add(atan2(k * sign4 * sin(absDelta), cosPhi03 * cosPhi1 + k * cos(absDelta)));
      angle2 += antimeridian ? delta + sign4 * tau : delta;
      if (antimeridian ^ lambda04 >= lambda ^ lambda12 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection2 = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection2);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection2[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }
  return (angle2 < -epsilon || angle2 < epsilon && sum3 < -epsilon2) ^ winding & 1;
}

// node_modules/d3-geo/src/clip/index.js
function clip_default(pointVisible, clipLine, interpolate, start) {
  return function(sink) {
    var line = clipLine(sink), ringBuffer = buffer_default(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
    var clip = {
      point: point2,
      lineStart,
      lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point2;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge(segments);
        var startInside = polygonContains_default(polygon, start);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          rejoin_default(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };
    function point2(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }
    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }
    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }
    function lineEnd() {
      clip.point = point2;
      line.lineEnd();
    }
    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }
    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }
    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point3;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n) return;
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i) sink.point((point3 = segment[i])[0], point3[1]);
          sink.lineEnd();
        }
        return;
      }
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }
    return clip;
  };
}
function validSegment(segment) {
  return segment.length > 1;
}
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
}

// node_modules/d3-geo/src/clip/antimeridian.js
var antimeridian_default = clip_default(
  function() {
    return true;
  },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi, -halfPi]
);
function clipAntimeridianLine(stream) {
  var lambda04 = NaN, phi02 = NaN, sign0 = NaN, clean;
  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda12, phi12) {
      var sign1 = lambda12 > 0 ? pi : -pi, delta = abs(lambda12 - lambda04);
      if (abs(delta - pi) < epsilon) {
        stream.point(lambda04, phi02 = (phi02 + phi12) / 2 > 0 ? halfPi : -halfPi);
        stream.point(sign0, phi02);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi02);
        stream.point(lambda12, phi02);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi) {
        if (abs(lambda04 - sign0) < epsilon) lambda04 -= sign0 * epsilon;
        if (abs(lambda12 - sign1) < epsilon) lambda12 -= sign1 * epsilon;
        phi02 = clipAntimeridianIntersect(lambda04, phi02, lambda12, phi12);
        stream.point(sign0, phi02);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi02);
        clean = 0;
      }
      stream.point(lambda04 = lambda12, phi02 = phi12);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda04 = phi02 = NaN;
    },
    clean: function() {
      return 2 - clean;
    }
  };
}
function clipAntimeridianIntersect(lambda04, phi02, lambda12, phi12) {
  var cosPhi03, cosPhi1, sinLambda0Lambda1 = sin(lambda04 - lambda12);
  return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi02) * (cosPhi1 = cos(phi12)) * sin(lambda12) - sin(phi12) * (cosPhi03 = cos(phi02)) * sin(lambda04)) / (cosPhi03 * cosPhi1 * sinLambda0Lambda1)) : (phi02 + phi12) / 2;
}
function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * halfPi;
    stream.point(-pi, phi);
    stream.point(0, phi);
    stream.point(pi, phi);
    stream.point(pi, 0);
    stream.point(pi, -phi);
    stream.point(0, -phi);
    stream.point(-pi, -phi);
    stream.point(-pi, 0);
    stream.point(-pi, phi);
  } else if (abs(from[0] - to[0]) > epsilon) {
    var lambda = from[0] < to[0] ? pi : -pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

// node_modules/d3-geo/src/clip/circle.js
function circle_default(radius) {
  var cr = cos(radius), delta = 2 * radians, smallRadius = cr > 0, notHemisphere = abs(cr) > epsilon;
  function interpolate(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
  }
  function visible(lambda, phi) {
    return cos(lambda) * cos(phi) > cr;
  }
  function clipLine(stream) {
    var point0, c0, v0, v00, clean;
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi], point2, v2 = visible(lambda, phi), c3 = smallRadius ? v2 ? 0 : code(lambda, phi) : v2 ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
        if (!point0 && (v00 = v0 = v2)) stream.lineStart();
        if (v2 !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || pointEqual_default(point0, point2) || pointEqual_default(point1, point2))
            point1[2] = 1;
        }
        if (v2 !== v0) {
          clean = 0;
          if (v2) {
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1], 2);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v2) {
          var t;
          if (!(c3 & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1], 3);
            }
          }
        }
        if (v2 && (!point0 || !pointEqual_default(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v2, c0 = c3;
      },
      lineEnd: function() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | (v00 && v0) << 1;
      }
    };
  }
  function intersect(a, b, two) {
    var pa = cartesian(a), pb = cartesian(b);
    var n1 = [1, 0, 0], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
    if (!determinant) return !two && a;
    var c1 = cr * n2n2 / determinant, c22 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A5 = cartesianScale(n1, c1), B3 = cartesianScale(n2, c22);
    cartesianAddInPlace(A5, B3);
    var u4 = n1xn2, w = cartesianDot(A5, u4), uu = cartesianDot(u4, u4), t22 = w * w - uu * (cartesianDot(A5, A5) - 1);
    if (t22 < 0) return;
    var t = sqrt(t22), q = cartesianScale(u4, (-w - t) / uu);
    cartesianAddInPlace(q, A5);
    q = spherical(q);
    if (!two) return q;
    var lambda04 = a[0], lambda12 = b[0], phi02 = a[1], phi12 = b[1], z;
    if (lambda12 < lambda04) z = lambda04, lambda04 = lambda12, lambda12 = z;
    var delta2 = lambda12 - lambda04, polar = abs(delta2 - pi) < epsilon, meridian = polar || delta2 < epsilon;
    if (!polar && phi12 < phi02) z = phi02, phi02 = phi12, phi12 = z;
    if (meridian ? polar ? phi02 + phi12 > 0 ^ q[1] < (abs(q[0] - lambda04) < epsilon ? phi02 : phi12) : phi02 <= q[1] && q[1] <= phi12 : delta2 > pi ^ (lambda04 <= q[0] && q[0] <= lambda12)) {
      var q1 = cartesianScale(u4, (-w + t) / uu);
      cartesianAddInPlace(q1, A5);
      return [q, spherical(q1)];
    }
  }
  function code(lambda, phi) {
    var r = smallRadius ? radius : pi - radius, code2 = 0;
    if (lambda < -r) code2 |= 1;
    else if (lambda > r) code2 |= 2;
    if (phi < -r) code2 |= 4;
    else if (phi > r) code2 |= 8;
    return code2;
  }
  return clip_default(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
}

// node_modules/d3-geo/src/clip/line.js
function line_default(a, b, x03, y03, x12, y12) {
  var ax = a[0], ay = a[1], bx = b[0], by = b[1], t03 = 0, t13 = 1, dx = bx - ax, dy = by - ay, r;
  r = x03 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  } else if (dx > 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  }
  r = x12 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  } else if (dx > 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  }
  r = y03 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  } else if (dy > 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  }
  r = y12 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  } else if (dy > 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  }
  if (t03 > 0) a[0] = ax + t03 * dx, a[1] = ay + t03 * dy;
  if (t13 < 1) b[0] = ax + t13 * dx, b[1] = ay + t13 * dy;
  return true;
}

// node_modules/d3-geo/src/clip/rectangle.js
var clipMax = 1e9;
var clipMin = -clipMax;
function clipRectangle(x03, y03, x12, y12) {
  function visible(x, y) {
    return x03 <= x && x <= x12 && y03 <= y && y <= y12;
  }
  function interpolate(from, to, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do
        stream.point(a === 0 || a === 3 ? x03 : x12, a > 1 ? y12 : y03);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }
  function corner(p, direction) {
    return abs(p[0] - x03) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x12) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y03) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
  }
  function compareIntersection2(a, b) {
    return comparePoint(a.x, b.x);
  }
  function comparePoint(a, b) {
    var ca3 = corner(a, 1), cb = corner(b, 1);
    return ca3 !== cb ? ca3 - cb : ca3 === 0 ? b[1] - a[1] : ca3 === 1 ? a[0] - b[0] : ca3 === 2 ? a[1] - b[1] : b[0] - a[0];
  }
  return function(stream) {
    var activeStream = stream, bufferStream = buffer_default(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
    var clipStream = {
      point: point2,
      lineStart,
      lineEnd,
      polygonStart,
      polygonEnd
    };
    function point2(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }
    function polygonInside() {
      var winding = 0;
      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring2 = polygon[i], j = 1, m = ring2.length, point3 = ring2[0], a0, a1, b0 = point3[0], b1 = point3[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point3 = ring2[j], b0 = point3[0], b1 = point3[1];
          if (a1 <= y12) {
            if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x03 - a0)) ++winding;
          } else {
            if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x03 - a0)) --winding;
          }
        }
      }
      return winding;
    }
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }
    function polygonEnd() {
      var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments = merge(segments)).length;
      if (cleanInside || visible2) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible2) {
          rejoin_default(segments, compareIntersection2, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }
    function lineStart() {
      clipStream.point = linePoint2;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }
    function lineEnd() {
      if (segments) {
        linePoint2(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point2;
      if (v_) activeStream.lineEnd();
    }
    function linePoint2(x, y) {
      var v2 = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v2;
        first = false;
        if (v2) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v2 && v_) activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if (line_default(a, b, x03, y03, x12, y12)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v2) activeStream.lineEnd();
            clean = false;
          } else if (v2) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v2;
    }
    return clipStream;
  };
}

// node_modules/d3-geo/src/length.js
var lengthSum;
var lambda03;
var sinPhi02;
var cosPhi02;
var lengthStream = {
  sphere: noop,
  point: noop,
  lineStart: lengthLineStart,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop
};
function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}
function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = noop;
}
function lengthPointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  lambda03 = lambda, sinPhi02 = sin(phi), cosPhi02 = cos(phi);
  lengthStream.point = lengthPoint;
}
function lengthPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var sinPhi = sin(phi), cosPhi = cos(phi), delta = abs(lambda - lambda03), cosDelta = cos(delta), sinDelta = sin(delta), x = cosPhi * sinDelta, y = cosPhi02 * sinPhi - sinPhi02 * cosPhi * cosDelta, z = sinPhi02 * sinPhi + cosPhi02 * cosPhi * cosDelta;
  lengthSum.add(atan2(sqrt(x * x + y * y), z));
  lambda03 = lambda, sinPhi02 = sinPhi, cosPhi02 = cosPhi;
}
function length_default(object2) {
  lengthSum = new Adder();
  stream_default(object2, lengthStream);
  return +lengthSum;
}

// node_modules/d3-geo/src/distance.js
var coordinates = [null, null];
var object = { type: "LineString", coordinates };
function distance_default(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return length_default(object);
}

// node_modules/d3-geo/src/contains.js
var containsObjectType = {
  Feature: function(object2, point2) {
    return containsGeometry(object2.geometry, point2);
  },
  FeatureCollection: function(object2, point2) {
    var features = object2.features, i = -1, n = features.length;
    while (++i < n) if (containsGeometry(features[i].geometry, point2)) return true;
    return false;
  }
};
var containsGeometryType = {
  Sphere: function() {
    return true;
  },
  Point: function(object2, point2) {
    return containsPoint(object2.coordinates, point2);
  },
  MultiPoint: function(object2, point2) {
    var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
    while (++i < n) if (containsPoint(coordinates2[i], point2)) return true;
    return false;
  },
  LineString: function(object2, point2) {
    return containsLine(object2.coordinates, point2);
  },
  MultiLineString: function(object2, point2) {
    var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
    while (++i < n) if (containsLine(coordinates2[i], point2)) return true;
    return false;
  },
  Polygon: function(object2, point2) {
    return containsPolygon(object2.coordinates, point2);
  },
  MultiPolygon: function(object2, point2) {
    var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
    while (++i < n) if (containsPolygon(coordinates2[i], point2)) return true;
    return false;
  },
  GeometryCollection: function(object2, point2) {
    var geometries = object2.geometries, i = -1, n = geometries.length;
    while (++i < n) if (containsGeometry(geometries[i], point2)) return true;
    return false;
  }
};
function containsGeometry(geometry, point2) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point2) : false;
}
function containsPoint(coordinates2, point2) {
  return distance_default(coordinates2, point2) === 0;
}
function containsLine(coordinates2, point2) {
  var ao, bo, ab4;
  for (var i = 0, n = coordinates2.length; i < n; i++) {
    bo = distance_default(coordinates2[i], point2);
    if (bo === 0) return true;
    if (i > 0) {
      ab4 = distance_default(coordinates2[i], coordinates2[i - 1]);
      if (ab4 > 0 && ao <= ab4 && bo <= ab4 && (ao + bo - ab4) * (1 - Math.pow((ao - bo) / ab4, 2)) < epsilon2 * ab4)
        return true;
    }
    ao = bo;
  }
  return false;
}
function containsPolygon(coordinates2, point2) {
  return !!polygonContains_default(coordinates2.map(ringRadians), pointRadians(point2));
}
function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}
function pointRadians(point2) {
  return [point2[0] * radians, point2[1] * radians];
}
function contains_default(object2, point2) {
  return (object2 && containsObjectType.hasOwnProperty(object2.type) ? containsObjectType[object2.type] : containsGeometry)(object2, point2);
}

// node_modules/d3-geo/src/graticule.js
function graticuleX(y03, y12, dy) {
  var y = range(y03, y12 - epsilon, dy).concat(y12);
  return function(x) {
    return y.map(function(y2) {
      return [x, y2];
    });
  };
}
function graticuleY(x03, x12, dx) {
  var x = range(x03, x12 - epsilon, dx).concat(x12);
  return function(y) {
    return x.map(function(x2) {
      return [x2, y];
    });
  };
}
function graticule() {
  var x12, x03, X12, X02, y12, y03, Y12, Y02, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
  function graticule2() {
    return { type: "MultiLineString", coordinates: lines() };
  }
  function lines() {
    return range(ceil(X02 / DX) * DX, X12, DX).map(X).concat(range(ceil(Y02 / DY) * DY, Y12, DY).map(Y)).concat(range(ceil(x03 / dx) * dx, x12, dx).filter(function(x2) {
      return abs(x2 % DX) > epsilon;
    }).map(x)).concat(range(ceil(y03 / dy) * dy, y12, dy).filter(function(y2) {
      return abs(y2 % DY) > epsilon;
    }).map(y));
  }
  graticule2.lines = function() {
    return lines().map(function(coordinates2) {
      return { type: "LineString", coordinates: coordinates2 };
    });
  };
  graticule2.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X(X02).concat(
          Y(Y12).slice(1),
          X(X12).reverse().slice(1),
          Y(Y02).reverse().slice(1)
        )
      ]
    };
  };
  graticule2.extent = function(_) {
    if (!arguments.length) return graticule2.extentMinor();
    return graticule2.extentMajor(_).extentMinor(_);
  };
  graticule2.extentMajor = function(_) {
    if (!arguments.length) return [[X02, Y02], [X12, Y12]];
    X02 = +_[0][0], X12 = +_[1][0];
    Y02 = +_[0][1], Y12 = +_[1][1];
    if (X02 > X12) _ = X02, X02 = X12, X12 = _;
    if (Y02 > Y12) _ = Y02, Y02 = Y12, Y12 = _;
    return graticule2.precision(precision);
  };
  graticule2.extentMinor = function(_) {
    if (!arguments.length) return [[x03, y03], [x12, y12]];
    x03 = +_[0][0], x12 = +_[1][0];
    y03 = +_[0][1], y12 = +_[1][1];
    if (x03 > x12) _ = x03, x03 = x12, x12 = _;
    if (y03 > y12) _ = y03, y03 = y12, y12 = _;
    return graticule2.precision(precision);
  };
  graticule2.step = function(_) {
    if (!arguments.length) return graticule2.stepMinor();
    return graticule2.stepMajor(_).stepMinor(_);
  };
  graticule2.stepMajor = function(_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule2;
  };
  graticule2.stepMinor = function(_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule2;
  };
  graticule2.precision = function(_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y03, y12, 90);
    y = graticuleY(x03, x12, precision);
    X = graticuleX(Y02, Y12, 90);
    Y = graticuleY(X02, X12, precision);
    return graticule2;
  };
  return graticule2.extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]]).extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
}
function graticule10() {
  return graticule()();
}

// node_modules/d3-geo/src/interpolate.js
function interpolate_default(a, b) {
  var x03 = a[0] * radians, y03 = a[1] * radians, x12 = b[0] * radians, y12 = b[1] * radians, cy0 = cos(y03), sy0 = sin(y03), cy1 = cos(y12), sy1 = sin(y12), kx0 = cy0 * cos(x03), ky0 = cy0 * sin(x03), kx1 = cy1 * cos(x12), ky1 = cy1 * sin(x12), d = 2 * asin(sqrt(haversin(y12 - y03) + cy0 * cy1 * haversin(x12 - x03))), k = sin(d);
  var interpolate = d ? function(t) {
    var B3 = sin(t *= d) / k, A5 = sin(d - t) / k, x = A5 * kx0 + B3 * kx1, y = A5 * ky0 + B3 * ky1, z = A5 * sy0 + B3 * sy1;
    return [
      atan2(y, x) * degrees,
      atan2(z, sqrt(x * x + y * y)) * degrees
    ];
  } : function() {
    return [x03 * degrees, y03 * degrees];
  };
  interpolate.distance = d;
  return interpolate;
}

// node_modules/d3-geo/src/identity.js
var identity_default = (x) => x;

// node_modules/d3-geo/src/path/area.js
var areaSum2 = new Adder();
var areaRingSum2 = new Adder();

// node_modules/d3-geo/src/path/bounds.js
var x02 = Infinity;
var y02 = x02;
var x1 = -x02;
var y1 = x1;
var boundsStream2 = {
  point: boundsPoint2,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop,
  result: function() {
    var bounds = [[x02, y02], [x1, y1]];
    x1 = y1 = -(y02 = x02 = Infinity);
    return bounds;
  }
};
function boundsPoint2(x, y) {
  if (x < x02) x02 = x;
  if (x > x1) x1 = x;
  if (y < y02) y02 = y;
  if (y > y1) y1 = y;
}
var bounds_default2 = boundsStream2;

// node_modules/d3-geo/src/path/context.js
function PathContext(context) {
  this._context = context;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, tau);
        break;
      }
    }
  },
  result: noop
};

// node_modules/d3-geo/src/path/measure.js
var lengthSum2 = new Adder();

// node_modules/d3-geo/src/transform.js
function transformer(methods) {
  return function(stream) {
    var s = new TransformStream();
    for (var key in methods) s[key] = methods[key];
    s.stream = stream;
    return s;
  };
}
function TransformStream() {
}
TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x, y) {
    this.stream.point(x, y);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};

// node_modules/d3-geo/src/projection/fit.js
function fit(projection2, fitBounds, object2) {
  var clip = projection2.clipExtent && projection2.clipExtent();
  projection2.scale(150).translate([0, 0]);
  if (clip != null) projection2.clipExtent(null);
  stream_default(object2, projection2.stream(bounds_default2));
  fitBounds(bounds_default2.result());
  if (clip != null) projection2.clipExtent(clip);
  return projection2;
}
function fitExtent(projection2, extent2, object2) {
  return fit(projection2, function(b) {
    var w = extent2[1][0] - extent2[0][0], h = extent2[1][1] - extent2[0][1], k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent2[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent2[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection2.scale(150 * k).translate([x, y]);
  }, object2);
}
function fitSize(projection2, size, object2) {
  return fitExtent(projection2, [[0, 0], size], object2);
}
function fitWidth(projection2, width, object2) {
  return fit(projection2, function(b) {
    var w = +width, k = w / (b[1][0] - b[0][0]), x = (w - k * (b[1][0] + b[0][0])) / 2, y = -k * b[0][1];
    projection2.scale(150 * k).translate([x, y]);
  }, object2);
}
function fitHeight(projection2, height, object2) {
  return fit(projection2, function(b) {
    var h = +height, k = h / (b[1][1] - b[0][1]), x = -k * b[0][0], y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection2.scale(150 * k).translate([x, y]);
  }, object2);
}

// node_modules/d3-geo/src/projection/resample.js
var maxDepth = 16;
var cosMinDistance = cos(30 * radians);
function resample_default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}
function resampleNone(project) {
  return transformer({
    point: function(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}
function resample(project, delta2) {
  function resampleLineTo(x03, y03, lambda04, a0, b0, c0, x12, y12, lambda12, a1, b1, c1, depth, stream) {
    var dx = x12 - x03, dy = y12 - y03, d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1, b = b0 + b1, c3 = c0 + c1, m = sqrt(a * a + b * b + c3 * c3), phi2 = asin(c3 /= m), lambda22 = abs(abs(c3) - 1) < epsilon || abs(lambda04 - lambda12) < epsilon ? (lambda04 + lambda12) / 2 : atan2(b, a), p = project(lambda22, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x03, dy2 = y2 - y03, dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        resampleLineTo(x03, y03, lambda04, a0, b0, c0, x2, y2, lambda22, a /= m, b /= m, c3, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda22, a, b, c3, x12, y12, lambda12, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda004, x00, y00, a00, b00, c00, lambda04, x03, y03, a0, b0, c0;
    var resampleStream = {
      point: point2,
      lineStart,
      lineEnd,
      polygonStart: function() {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function() {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };
    function point2(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }
    function lineStart() {
      x03 = NaN;
      resampleStream.point = linePoint2;
      stream.lineStart();
    }
    function linePoint2(lambda, phi) {
      var c3 = cartesian([lambda, phi]), p = project(lambda, phi);
      resampleLineTo(x03, y03, lambda04, a0, b0, c0, x03 = p[0], y03 = p[1], lambda04 = lambda, a0 = c3[0], b0 = c3[1], c0 = c3[2], maxDepth, stream);
      stream.point(x03, y03);
    }
    function lineEnd() {
      resampleStream.point = point2;
      stream.lineEnd();
    }
    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }
    function ringPoint(lambda, phi) {
      linePoint2(lambda004 = lambda, phi), x00 = x03, y00 = y03, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint2;
    }
    function ringEnd() {
      resampleLineTo(x03, y03, lambda04, a0, b0, c0, x00, y00, lambda004, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }
    return resampleStream;
  };
}

// node_modules/d3-geo/src/projection/index.js
var transformRadians = transformer({
  point: function(x, y) {
    this.stream.point(x * radians, y * radians);
  }
});
function transformRotate(rotate) {
  return transformer({
    point: function(x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}
function scaleTranslate(k, dx, dy, sx, sy) {
  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [dx + k * x, dy - k * y];
  }
  transform.invert = function(x, y) {
    return [(x - dx) / k * sx, (dy - y) / k * sy];
  };
  return transform;
}
function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
  var cosAlpha = cos(alpha), sinAlpha = sin(alpha), a = cosAlpha * k, b = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [a * x - b * y + dx, dy - b * x - a * y];
  }
  transform.invert = function(x, y) {
    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
  };
  return transform;
}
function projection(project) {
  return projectionMutator(function() {
    return project;
  })();
}
function projectionMutator(projectAt) {
  var project, k = 150, x = 480, y = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = antimeridian_default, x03 = null, y03, x12, y12, postclip = identity_default, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
  function projection2(point2) {
    return projectRotateTransform(point2[0] * radians, point2[1] * radians);
  }
  function invert(point2) {
    point2 = projectRotateTransform.invert(point2[0], point2[1]);
    return point2 && [point2[0] * degrees, point2[1] * degrees];
  }
  projection2.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };
  projection2.preclip = function(_) {
    return arguments.length ? (preclip = _, theta = void 0, reset()) : preclip;
  };
  projection2.postclip = function(_) {
    return arguments.length ? (postclip = _, x03 = y03 = x12 = y12 = null, reset()) : postclip;
  };
  projection2.clipAngle = function(_) {
    return arguments.length ? (preclip = +_ ? circle_default(theta = _ * radians) : (theta = null, antimeridian_default), reset()) : theta * degrees;
  };
  projection2.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x03 = y03 = x12 = y12 = null, identity_default) : clipRectangle(x03 = +_[0][0], y03 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reset()) : x03 == null ? null : [[x03, y03], [x12, y12]];
  };
  projection2.scale = function(_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };
  projection2.translate = function(_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };
  projection2.center = function(_) {
    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
  };
  projection2.rotate = function(_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
  };
  projection2.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
  };
  projection2.reflectX = function(_) {
    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
  };
  projection2.reflectY = function(_) {
    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
  };
  projection2.precision = function(_) {
    return arguments.length ? (projectResample = resample_default(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
  };
  projection2.fitExtent = function(extent2, object2) {
    return fitExtent(projection2, extent2, object2);
  };
  projection2.fitSize = function(size, object2) {
    return fitSize(projection2, size, object2);
  };
  projection2.fitWidth = function(width, object2) {
    return fitWidth(projection2, width, object2);
  };
  projection2.fitHeight = function(height, object2) {
    return fitHeight(projection2, height, object2);
  };
  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose_default(project, transform);
    projectRotateTransform = compose_default(rotate, projectTransform);
    projectResample = resample_default(projectTransform, delta2);
    return reset();
  }
  function reset() {
    cache = cacheStream = null;
    return projection2;
  }
  return function() {
    project = projectAt.apply(this, arguments);
    projection2.invert = project.invert && invert;
    return recenter();
  };
}

// node_modules/d3-geo/src/projection/azimuthal.js
function azimuthalRaw(scale2) {
  return function(x, y) {
    var cx = cos(x), cy = cos(y), k = scale2(cx * cy);
    if (k === Infinity) return [2, 0];
    return [
      k * cy * sin(x),
      k * sin(y)
    ];
  };
}
function azimuthalInvert(angle2) {
  return function(x, y) {
    var z = sqrt(x * x + y * y), c3 = angle2(z), sc = sin(c3), cc2 = cos(c3);
    return [
      atan2(x * sc, z * cc2),
      asin(z && y * sc / z)
    ];
  };
}

// node_modules/d3-geo/src/projection/azimuthalEqualArea.js
var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
  return 2 * asin(z / 2);
});

// node_modules/d3-geo/src/projection/azimuthalEquidistant.js
var azimuthalEquidistantRaw = azimuthalRaw(function(c3) {
  return (c3 = acos(c3)) && c3 / sin(c3);
});
azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
  return z;
});

// node_modules/d3-geo/src/projection/mercator.js
function mercatorRaw(lambda, phi) {
  return [lambda, log(tan((halfPi + phi) / 2))];
}
mercatorRaw.invert = function(x, y) {
  return [x, 2 * atan(exp(y)) - halfPi];
};

// node_modules/d3-geo/src/projection/equirectangular.js
function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}
equirectangularRaw.invert = equirectangularRaw;

// node_modules/d3-geo/src/projection/equalEarth.js
var A1 = 1.340264;
var A2 = -0.081106;
var A3 = 893e-6;
var A4 = 3796e-6;
var M = sqrt(3) / 2;
var iterations = 12;
function equalEarthRaw(lambda, phi) {
  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;
  return [
    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
  ];
}
equalEarthRaw.invert = function(x, y) {
  var l = y, l2 = l * l, l6 = l2 * l2 * l2;
  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if (abs(delta) < epsilon2) break;
  }
  return [
    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),
    asin(sin(l) / M)
  ];
};

// node_modules/d3-geo/src/projection/gnomonic.js
function gnomonicRaw(x, y) {
  var cy = cos(y), k = cos(x) * cy;
  return [cy * sin(x) / k, sin(y) / k];
}
gnomonicRaw.invert = azimuthalInvert(atan);

// node_modules/d3-geo/src/projection/naturalEarth1.js
function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi, phi4 = phi2 * phi2;
  return [
    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (3971e-6 * phi2 - 1529e-6 * phi4))),
    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4)))
  ];
}
naturalEarth1Raw.invert = function(x, y) {
  var phi = y, i = 25, delta;
  do {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 5916e-6 * 11 * phi4)));
  } while (abs(delta) > epsilon && --i > 0);
  return [
    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (3971e-6 - 1529e-6 * phi2)))),
    phi
  ];
};

// node_modules/d3-geo/src/projection/orthographic.js
function orthographicRaw(x, y) {
  return [cos(y) * sin(x), sin(y)];
}
orthographicRaw.invert = azimuthalInvert(asin);

// node_modules/d3-geo/src/projection/stereographic.js
function stereographicRaw(x, y) {
  var cy = cos(y), k = 1 + cos(x) * cy;
  return [cy * sin(x) / k, sin(y) / k];
}
stereographicRaw.invert = azimuthalInvert(function(z) {
  return 2 * atan(z);
});
function stereographic_default() {
  return projection(stereographicRaw).scale(250).clipAngle(142);
}

// node_modules/d3-geo/src/projection/transverseMercator.js
function transverseMercatorRaw(lambda, phi) {
  return [log(tan((halfPi + phi) / 2)), -lambda];
}
transverseMercatorRaw.invert = function(x, y) {
  return [-y, 2 * atan(exp(x)) - halfPi];
};

// node_modules/three-geojson-geometry/dist/three-geojson-geometry.mjs
function _arrayLikeToArray2(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithHoles2(r) {
  if (Array.isArray(r)) return r;
}
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _classCallCheck2(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _createClass2(e, r, t) {
  return Object.defineProperty(e, "prototype", {
    writable: false
  }), e;
}
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray2(r)) || e) {
      t && (r = t);
      var n = 0, F = function() {
      };
      return {
        s: F,
        n: function() {
          return n >= r.length ? {
            done: true
          } : {
            done: false,
            value: r[n++]
          };
        },
        e: function(r2) {
          throw r2;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o, a = true, u4 = false;
  return {
    s: function() {
      t = t.call(r);
    },
    n: function() {
      var r2 = t.next();
      return a = r2.done, r2;
    },
    e: function(r2) {
      u4 = true, o = r2;
    },
    f: function() {
      try {
        a || null == t.return || t.return();
      } finally {
        if (u4) throw o;
      }
    }
  };
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
    return t4.__proto__ || Object.getPrototypeOf(t4);
  }, _getPrototypeOf(t);
}
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t, "prototype", {
    writable: false
  }), e && _setPrototypeOf(t, e);
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t4) {
  }
  return (_isNativeReflectConstruct = function() {
    return !!t;
  })();
}
function _iterableToArrayLimit2(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u4, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = false;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t.return && (u4 = t.return(), Object(u4) !== u4)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == typeof e || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e3) {
    return t4.__proto__ = e3, t4;
  }, _setPrototypeOf(t, e);
}
function _slicedToArray2(r, e) {
  return _arrayWithHoles2(r) || _iterableToArrayLimit2(r, e) || _unsupportedIterableToArray2(r, e) || _nonIterableRest2();
}
function _unsupportedIterableToArray2(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray2(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray2(r, a) : void 0;
  }
}
var interpolateLine = function interpolateLine2() {
  var lineCoords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var maxDegDistance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var result = [];
  var prevPnt = null;
  lineCoords.forEach(function(pnt) {
    if (prevPnt) {
      var dist2 = distance_default(pnt, prevPnt) * 180 / Math.PI;
      if (dist2 > maxDegDistance) {
        var interpol = interpolate_default(prevPnt, pnt);
        var tStep = 1 / Math.ceil(dist2 / maxDegDistance);
        var t = tStep;
        while (t < 1) {
          result.push(interpol(t));
          t += tStep;
        }
      }
    }
    result.push(prevPnt = pnt);
  });
  return result;
};
var THREE = typeof window !== "undefined" && window.THREE ? window.THREE : {
  BufferGeometry,
  Float32BufferAttribute
};
var setAttributeFn = new THREE.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var GeoJsonGeometry = function(_THREE$BufferGeometry) {
  function GeoJsonGeometry2(geoJson) {
    var _this;
    var radius = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var resolution2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;
    _classCallCheck2(this, GeoJsonGeometry2);
    _this = _callSuper(this, GeoJsonGeometry2);
    _this.type = "GeoJsonGeometry";
    _this.parameters = {
      geoJson,
      radius,
      resolution: resolution2
    };
    var groups2 = ({
      Point: genPoint,
      MultiPoint: genMultiPoint,
      LineString: genLineString,
      MultiLineString: genMultiLineString,
      Polygon: genPolygon,
      MultiPolygon: genMultiPolygon
    }[geoJson.type] || function() {
      return [];
    })(geoJson.coordinates, radius);
    var indices = [], vertices = [];
    var groupCnt = 0;
    groups2.forEach(function(newG) {
      var prevIndCnt = indices.length;
      concatGroup({
        indices,
        vertices
      }, newG);
      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);
    });
    indices.length && _this.setIndex(indices);
    vertices.length && _this[setAttributeFn]("position", new THREE.Float32BufferAttribute(vertices, 3));
    function genPoint(coords, r) {
      var vertices2 = polar2Cartesian(coords[1], coords[0], r);
      var indices2 = [];
      return [{
        vertices: vertices2,
        indices: indices2
      }];
    }
    function genMultiPoint(coords, r) {
      var result = {
        vertices: [],
        indices: []
      };
      coords.map(function(c3) {
        return genPoint(c3, r);
      }).forEach(function(_ref) {
        var _ref2 = _slicedToArray2(_ref, 1), newPnt = _ref2[0];
        concatGroup(result, newPnt);
      });
      return [result];
    }
    function genLineString(coords, r) {
      var coords3d = interpolateLine(coords, resolution2).map(function(_ref3) {
        var _ref4 = _slicedToArray2(_ref3, 2), lng = _ref4[0], lat = _ref4[1];
        return polar2Cartesian(lat, lng, r);
      });
      var _earcutFlatten = flatten([coords3d]), vertices2 = _earcutFlatten.vertices;
      var numPoints = Math.round(vertices2.length / 3);
      var indices2 = [];
      for (var vIdx = 1; vIdx < numPoints; vIdx++) {
        indices2.push(vIdx - 1, vIdx);
      }
      return [{
        vertices: vertices2,
        indices: indices2
      }];
    }
    function genMultiLineString(coords, r) {
      var result = {
        vertices: [],
        indices: []
      };
      coords.map(function(c3) {
        return genLineString(c3, r);
      }).forEach(function(_ref5) {
        var _ref6 = _slicedToArray2(_ref5, 1), newLine = _ref6[0];
        concatGroup(result, newLine);
      });
      return [result];
    }
    function genPolygon(coords, r) {
      var coords3d = coords.map(function(coordsSegment) {
        return interpolateLine(coordsSegment, resolution2).map(function(_ref7) {
          var _ref8 = _slicedToArray2(_ref7, 2), lng = _ref8[0], lat = _ref8[1];
          return polar2Cartesian(lat, lng, r);
        });
      });
      var _earcutFlatten2 = flatten(coords3d), vertices2 = _earcutFlatten2.vertices, holes = _earcutFlatten2.holes;
      var firstHoleIdx = holes[0] || Infinity;
      var outerVertices = vertices2.slice(0, firstHoleIdx * 3);
      var holeVertices = vertices2.slice(firstHoleIdx * 3);
      var holesIdx = new Set(holes);
      var numPoints = Math.round(vertices2.length / 3);
      var outerIndices = [], holeIndices = [];
      for (var vIdx = 1; vIdx < numPoints; vIdx++) {
        if (!holesIdx.has(vIdx)) {
          if (vIdx < firstHoleIdx) {
            outerIndices.push(vIdx - 1, vIdx);
          } else {
            holeIndices.push(vIdx - 1 - firstHoleIdx, vIdx - firstHoleIdx);
          }
        }
      }
      var groups3 = [{
        indices: outerIndices,
        vertices: outerVertices
      }];
      if (holes.length) {
        groups3.push({
          indices: holeIndices,
          vertices: holeVertices
        });
      }
      return groups3;
    }
    function genMultiPolygon(coords, r) {
      var outer = {
        vertices: [],
        indices: []
      };
      var holes = {
        vertices: [],
        indices: []
      };
      coords.map(function(c3) {
        return genPolygon(c3, r);
      }).forEach(function(_ref9) {
        var _ref10 = _slicedToArray2(_ref9, 2), newOuter = _ref10[0], newHoles = _ref10[1];
        concatGroup(outer, newOuter);
        newHoles && concatGroup(holes, newHoles);
      });
      var groups3 = [outer];
      holes.vertices.length && groups3.push(holes);
      return groups3;
    }
    return _this;
  }
  _inherits(GeoJsonGeometry2, _THREE$BufferGeometry);
  return _createClass2(GeoJsonGeometry2);
}(THREE.BufferGeometry);
function concatGroup(main, extra) {
  var prevVertCnt = Math.round(main.vertices.length / 3);
  concatArr(main.vertices, extra.vertices);
  concatArr(main.indices, extra.indices.map(function(ind) {
    return ind + prevVertCnt;
  }));
}
function concatArr(target, src) {
  var _iterator = _createForOfIteratorHelper(src), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var e = _step.value;
      target.push(e);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function polar2Cartesian(lat, lng) {
  var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  return [
    r * Math.sin(phi) * Math.cos(theta),
    // x
    r * Math.cos(phi),
    // y
    r * Math.sin(phi) * Math.sin(theta)
    // z
  ];
}

// node_modules/accessor-fn/dist/accessor-fn.mjs
var index3 = function(p) {
  return typeof p === "function" ? p : typeof p === "string" ? function(obj) {
    return obj[p];
  } : function(obj) {
    return p;
  };
};

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color2() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color2, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m = reHex.exec(format3)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format3)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format3)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format3)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format3)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format3)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format3)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
  if (!(o instanceof Color2)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color2, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}
function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color2)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min3 = Math.min(r, g, b), max3 = Math.max(r, g, b), h = NaN, s = max3 - min3, l = (max3 + min3) / 2;
  if (s) {
    if (r === max3) h = (g - b) / s + (g < b) * 6;
    else if (g === max3) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color2, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/d3-color/src/math.js
var radians2 = Math.PI / 180;
var degrees2 = 180 / Math.PI;

// node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
  if (r === g && g === b) x = z = y;
  else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}
function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}
function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color2, {
  brighter(k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker(k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb() {
    var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new Rgb(
      lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.033454 * z),
      lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
      this.opacity
    );
  }
}));
function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}
function lrgb2rgb(x) {
  return 255 * (x <= 31308e-7 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * degrees2;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function hcl(h, c3, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c3, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c3, l, opacity) {
  this.h = +h;
  this.c = +c3;
  this.l = +l;
  this.opacity = +opacity;
}
function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * radians2;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
define_default(Hcl, hcl, extend(Color2, {
  brighter(k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker(k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb() {
    return hcl2lab(this).rgb();
  }
}));

// node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;
function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), h = s ? Math.atan2(k, bl) * degrees2 - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}
function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color2, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians2, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h), sinh2 = Math.sin(h);
    return new Rgb(
      255 * (l + a * (A * cosh2 + B * sinh2)),
      255 * (l + a * (C * cosh2 + D * sinh2)),
      255 * (l + a * (E * cosh2)),
      this.opacity
    );
  }
}));

// node_modules/tinycolor2/esm/tinycolor.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
var trimLeft = /^\s+/;
var trimRight = /\s+$/;
function tinycolor(color2, opts) {
  color2 = color2 ? color2 : "";
  opts = opts || {};
  if (color2 instanceof tinycolor) {
    return color2;
  }
  if (!(this instanceof tinycolor)) {
    return new tinycolor(color2, opts);
  }
  var rgb3 = inputToRGB(color2);
  this._originalInput = color2, this._r = rgb3.r, this._g = rgb3.g, this._b = rgb3.b, this._a = rgb3.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb3.format;
  this._gradientType = opts.gradientType;
  if (this._r < 1) this._r = Math.round(this._r);
  if (this._g < 1) this._g = Math.round(this._g);
  if (this._b < 1) this._b = Math.round(this._b);
  this._ok = rgb3.ok;
}
tinycolor.prototype = {
  isDark: function isDark() {
    return this.getBrightness() < 128;
  },
  isLight: function isLight() {
    return !this.isDark();
  },
  isValid: function isValid() {
    return this._ok;
  },
  getOriginalInput: function getOriginalInput() {
    return this._originalInput;
  },
  getFormat: function getFormat() {
    return this._format;
  },
  getAlpha: function getAlpha() {
    return this._a;
  },
  getBrightness: function getBrightness() {
    var rgb3 = this.toRgb();
    return (rgb3.r * 299 + rgb3.g * 587 + rgb3.b * 114) / 1e3;
  },
  getLuminance: function getLuminance() {
    var rgb3 = this.toRgb();
    var RsRGB, GsRGB, BsRGB, R, G, B3;
    RsRGB = rgb3.r / 255;
    GsRGB = rgb3.g / 255;
    BsRGB = rgb3.b / 255;
    if (RsRGB <= 0.03928) R = RsRGB / 12.92;
    else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
    if (GsRGB <= 0.03928) G = GsRGB / 12.92;
    else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
    if (BsRGB <= 0.03928) B3 = BsRGB / 12.92;
    else B3 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
    return 0.2126 * R + 0.7152 * G + 0.0722 * B3;
  },
  setAlpha: function setAlpha(value) {
    this._a = boundAlpha(value);
    this._roundA = Math.round(100 * this._a) / 100;
    return this;
  },
  toHsv: function toHsv() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v,
      a: this._a
    };
  },
  toHsvString: function toHsvString() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    var h = Math.round(hsv.h * 360), s = Math.round(hsv.s * 100), v2 = Math.round(hsv.v * 100);
    return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v2 + "%)" : "hsva(" + h + ", " + s + "%, " + v2 + "%, " + this._roundA + ")";
  },
  toHsl: function toHsl() {
    var hsl4 = rgbToHsl(this._r, this._g, this._b);
    return {
      h: hsl4.h * 360,
      s: hsl4.s,
      l: hsl4.l,
      a: this._a
    };
  },
  toHslString: function toHslString() {
    var hsl4 = rgbToHsl(this._r, this._g, this._b);
    var h = Math.round(hsl4.h * 360), s = Math.round(hsl4.s * 100), l = Math.round(hsl4.l * 100);
    return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
  },
  toHex: function toHex(allow3Char) {
    return rgbToHex(this._r, this._g, this._b, allow3Char);
  },
  toHexString: function toHexString(allow3Char) {
    return "#" + this.toHex(allow3Char);
  },
  toHex8: function toHex8(allow4Char) {
    return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
  },
  toHex8String: function toHex8String(allow4Char) {
    return "#" + this.toHex8(allow4Char);
  },
  toRgb: function toRgb() {
    return {
      r: Math.round(this._r),
      g: Math.round(this._g),
      b: Math.round(this._b),
      a: this._a
    };
  },
  toRgbString: function toRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
  },
  toPercentageRgb: function toPercentageRgb() {
    return {
      r: Math.round(bound01(this._r, 255) * 100) + "%",
      g: Math.round(bound01(this._g, 255) * 100) + "%",
      b: Math.round(bound01(this._b, 255) * 100) + "%",
      a: this._a
    };
  },
  toPercentageRgbString: function toPercentageRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
  },
  toName: function toName() {
    if (this._a === 0) {
      return "transparent";
    }
    if (this._a < 1) {
      return false;
    }
    return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
  },
  toFilter: function toFilter(secondColor) {
    var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
    var secondHex8String = hex8String;
    var gradientType = this._gradientType ? "GradientType = 1, " : "";
    if (secondColor) {
      var s = tinycolor(secondColor);
      secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
    }
    return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
  },
  toString: function toString(format3) {
    var formatSet = !!format3;
    format3 = format3 || this._format;
    var formattedString = false;
    var hasAlpha = this._a < 1 && this._a >= 0;
    var needsAlphaFormat = !formatSet && hasAlpha && (format3 === "hex" || format3 === "hex6" || format3 === "hex3" || format3 === "hex4" || format3 === "hex8" || format3 === "name");
    if (needsAlphaFormat) {
      if (format3 === "name" && this._a === 0) {
        return this.toName();
      }
      return this.toRgbString();
    }
    if (format3 === "rgb") {
      formattedString = this.toRgbString();
    }
    if (format3 === "prgb") {
      formattedString = this.toPercentageRgbString();
    }
    if (format3 === "hex" || format3 === "hex6") {
      formattedString = this.toHexString();
    }
    if (format3 === "hex3") {
      formattedString = this.toHexString(true);
    }
    if (format3 === "hex4") {
      formattedString = this.toHex8String(true);
    }
    if (format3 === "hex8") {
      formattedString = this.toHex8String();
    }
    if (format3 === "name") {
      formattedString = this.toName();
    }
    if (format3 === "hsl") {
      formattedString = this.toHslString();
    }
    if (format3 === "hsv") {
      formattedString = this.toHsvString();
    }
    return formattedString || this.toHexString();
  },
  clone: function clone() {
    return tinycolor(this.toString());
  },
  _applyModification: function _applyModification(fn, args) {
    var color2 = fn.apply(null, [this].concat([].slice.call(args)));
    this._r = color2._r;
    this._g = color2._g;
    this._b = color2._b;
    this.setAlpha(color2._a);
    return this;
  },
  lighten: function lighten() {
    return this._applyModification(_lighten, arguments);
  },
  brighten: function brighten() {
    return this._applyModification(_brighten, arguments);
  },
  darken: function darken() {
    return this._applyModification(_darken, arguments);
  },
  desaturate: function desaturate() {
    return this._applyModification(_desaturate, arguments);
  },
  saturate: function saturate() {
    return this._applyModification(_saturate, arguments);
  },
  greyscale: function greyscale() {
    return this._applyModification(_greyscale, arguments);
  },
  spin: function spin() {
    return this._applyModification(_spin, arguments);
  },
  _applyCombination: function _applyCombination(fn, args) {
    return fn.apply(null, [this].concat([].slice.call(args)));
  },
  analogous: function analogous() {
    return this._applyCombination(_analogous, arguments);
  },
  complement: function complement() {
    return this._applyCombination(_complement, arguments);
  },
  monochromatic: function monochromatic() {
    return this._applyCombination(_monochromatic, arguments);
  },
  splitcomplement: function splitcomplement() {
    return this._applyCombination(_splitcomplement, arguments);
  },
  // Disabled until https://github.com/bgrins/TinyColor/issues/254
  // polyad: function (number) {
  //   return this._applyCombination(polyad, [number]);
  // },
  triad: function triad() {
    return this._applyCombination(polyad, [3]);
  },
  tetrad: function tetrad() {
    return this._applyCombination(polyad, [4]);
  }
};
tinycolor.fromRatio = function(color2, opts) {
  if (_typeof(color2) == "object") {
    var newColor = {};
    for (var i in color2) {
      if (color2.hasOwnProperty(i)) {
        if (i === "a") {
          newColor[i] = color2[i];
        } else {
          newColor[i] = convertToPercentage(color2[i]);
        }
      }
    }
    color2 = newColor;
  }
  return tinycolor(color2, opts);
};
function inputToRGB(color2) {
  var rgb3 = {
    r: 0,
    g: 0,
    b: 0
  };
  var a = 1;
  var s = null;
  var v2 = null;
  var l = null;
  var ok = false;
  var format3 = false;
  if (typeof color2 == "string") {
    color2 = stringInputToObject(color2);
  }
  if (_typeof(color2) == "object") {
    if (isValidCSSUnit(color2.r) && isValidCSSUnit(color2.g) && isValidCSSUnit(color2.b)) {
      rgb3 = rgbToRgb(color2.r, color2.g, color2.b);
      ok = true;
      format3 = String(color2.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color2.h) && isValidCSSUnit(color2.s) && isValidCSSUnit(color2.v)) {
      s = convertToPercentage(color2.s);
      v2 = convertToPercentage(color2.v);
      rgb3 = hsvToRgb(color2.h, s, v2);
      ok = true;
      format3 = "hsv";
    } else if (isValidCSSUnit(color2.h) && isValidCSSUnit(color2.s) && isValidCSSUnit(color2.l)) {
      s = convertToPercentage(color2.s);
      l = convertToPercentage(color2.l);
      rgb3 = hslToRgb(color2.h, s, l);
      ok = true;
      format3 = "hsl";
    }
    if (color2.hasOwnProperty("a")) {
      a = color2.a;
    }
  }
  a = boundAlpha(a);
  return {
    ok,
    format: color2.format || format3,
    r: Math.min(255, Math.max(rgb3.r, 0)),
    g: Math.min(255, Math.max(rgb3.g, 0)),
    b: Math.min(255, Math.max(rgb3.b, 0)),
    a
  };
}
function rgbToRgb(r, g, b) {
  return {
    r: bound01(r, 255) * 255,
    g: bound01(g, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max3 = Math.max(r, g, b), min3 = Math.min(r, g, b);
  var h, s, l = (max3 + min3) / 2;
  if (max3 == min3) {
    h = s = 0;
  } else {
    var d = max3 - min3;
    s = l > 0.5 ? d / (2 - max3 - min3) : d / (max3 + min3);
    switch (max3) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h,
    s,
    l
  };
}
function hslToRgb(h, s, l) {
  var r, g, b;
  h = bound01(h, 360);
  s = bound01(s, 100);
  l = bound01(l, 100);
  function hue2rgb(p2, q2, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p2 + (q2 - p2) * 6 * t;
    if (t < 1 / 2) return q2;
    if (t < 2 / 3) return p2 + (q2 - p2) * (2 / 3 - t) * 6;
    return p2;
  }
  if (s === 0) {
    r = g = b = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255
  };
}
function rgbToHsv(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max3 = Math.max(r, g, b), min3 = Math.min(r, g, b);
  var h, s, v2 = max3;
  var d = max3 - min3;
  s = max3 === 0 ? 0 : d / max3;
  if (max3 == min3) {
    h = 0;
  } else {
    switch (max3) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h,
    s,
    v: v2
  };
}
function hsvToRgb(h, s, v2) {
  h = bound01(h, 360) * 6;
  s = bound01(s, 100);
  v2 = bound01(v2, 100);
  var i = Math.floor(h), f = h - i, p = v2 * (1 - s), q = v2 * (1 - f * s), t = v2 * (1 - (1 - f) * s), mod = i % 6, r = [v2, q, p, p, t, v2][mod], g = [t, v2, v2, q, p, p][mod], b = [p, p, t, v2, v2, q][mod];
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255
  };
}
function rgbToHex(r, g, b, allow3Char) {
  var hex2 = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
  if (allow3Char && hex2[0].charAt(0) == hex2[0].charAt(1) && hex2[1].charAt(0) == hex2[1].charAt(1) && hex2[2].charAt(0) == hex2[2].charAt(1)) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
  }
  return hex2.join("");
}
function rgbaToHex(r, g, b, a, allow4Char) {
  var hex2 = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];
  if (allow4Char && hex2[0].charAt(0) == hex2[0].charAt(1) && hex2[1].charAt(0) == hex2[1].charAt(1) && hex2[2].charAt(0) == hex2[2].charAt(1) && hex2[3].charAt(0) == hex2[3].charAt(1)) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
  }
  return hex2.join("");
}
function rgbaToArgbHex(r, g, b, a) {
  var hex2 = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
  return hex2.join("");
}
tinycolor.equals = function(color1, color2) {
  if (!color1 || !color2) return false;
  return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};
tinycolor.random = function() {
  return tinycolor.fromRatio({
    r: Math.random(),
    g: Math.random(),
    b: Math.random()
  });
};
function _desaturate(color2, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl4 = tinycolor(color2).toHsl();
  hsl4.s -= amount / 100;
  hsl4.s = clamp01(hsl4.s);
  return tinycolor(hsl4);
}
function _saturate(color2, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl4 = tinycolor(color2).toHsl();
  hsl4.s += amount / 100;
  hsl4.s = clamp01(hsl4.s);
  return tinycolor(hsl4);
}
function _greyscale(color2) {
  return tinycolor(color2).desaturate(100);
}
function _lighten(color2, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl4 = tinycolor(color2).toHsl();
  hsl4.l += amount / 100;
  hsl4.l = clamp01(hsl4.l);
  return tinycolor(hsl4);
}
function _brighten(color2, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var rgb3 = tinycolor(color2).toRgb();
  rgb3.r = Math.max(0, Math.min(255, rgb3.r - Math.round(255 * -(amount / 100))));
  rgb3.g = Math.max(0, Math.min(255, rgb3.g - Math.round(255 * -(amount / 100))));
  rgb3.b = Math.max(0, Math.min(255, rgb3.b - Math.round(255 * -(amount / 100))));
  return tinycolor(rgb3);
}
function _darken(color2, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl4 = tinycolor(color2).toHsl();
  hsl4.l -= amount / 100;
  hsl4.l = clamp01(hsl4.l);
  return tinycolor(hsl4);
}
function _spin(color2, amount) {
  var hsl4 = tinycolor(color2).toHsl();
  var hue2 = (hsl4.h + amount) % 360;
  hsl4.h = hue2 < 0 ? 360 + hue2 : hue2;
  return tinycolor(hsl4);
}
function _complement(color2) {
  var hsl4 = tinycolor(color2).toHsl();
  hsl4.h = (hsl4.h + 180) % 360;
  return tinycolor(hsl4);
}
function polyad(color2, number3) {
  if (isNaN(number3) || number3 <= 0) {
    throw new Error("Argument to polyad must be a positive number");
  }
  var hsl4 = tinycolor(color2).toHsl();
  var result = [tinycolor(color2)];
  var step = 360 / number3;
  for (var i = 1; i < number3; i++) {
    result.push(tinycolor({
      h: (hsl4.h + i * step) % 360,
      s: hsl4.s,
      l: hsl4.l
    }));
  }
  return result;
}
function _splitcomplement(color2) {
  var hsl4 = tinycolor(color2).toHsl();
  var h = hsl4.h;
  return [tinycolor(color2), tinycolor({
    h: (h + 72) % 360,
    s: hsl4.s,
    l: hsl4.l
  }), tinycolor({
    h: (h + 216) % 360,
    s: hsl4.s,
    l: hsl4.l
  })];
}
function _analogous(color2, results, slices) {
  results = results || 6;
  slices = slices || 30;
  var hsl4 = tinycolor(color2).toHsl();
  var part = 360 / slices;
  var ret = [tinycolor(color2)];
  for (hsl4.h = (hsl4.h - (part * results >> 1) + 720) % 360; --results; ) {
    hsl4.h = (hsl4.h + part) % 360;
    ret.push(tinycolor(hsl4));
  }
  return ret;
}
function _monochromatic(color2, results) {
  results = results || 6;
  var hsv = tinycolor(color2).toHsv();
  var h = hsv.h, s = hsv.s, v2 = hsv.v;
  var ret = [];
  var modification = 1 / results;
  while (results--) {
    ret.push(tinycolor({
      h,
      s,
      v: v2
    }));
    v2 = (v2 + modification) % 1;
  }
  return ret;
}
tinycolor.mix = function(color1, color2, amount) {
  amount = amount === 0 ? 0 : amount || 50;
  var rgb1 = tinycolor(color1).toRgb();
  var rgb22 = tinycolor(color2).toRgb();
  var p = amount / 100;
  var rgba3 = {
    r: (rgb22.r - rgb1.r) * p + rgb1.r,
    g: (rgb22.g - rgb1.g) * p + rgb1.g,
    b: (rgb22.b - rgb1.b) * p + rgb1.b,
    a: (rgb22.a - rgb1.a) * p + rgb1.a
  };
  return tinycolor(rgba3);
};
tinycolor.readability = function(color1, color2) {
  var c1 = tinycolor(color1);
  var c22 = tinycolor(color2);
  return (Math.max(c1.getLuminance(), c22.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c22.getLuminance()) + 0.05);
};
tinycolor.isReadable = function(color1, color2, wcag2) {
  var readability = tinycolor.readability(color1, color2);
  var wcag2Parms, out;
  out = false;
  wcag2Parms = validateWCAG2Parms(wcag2);
  switch (wcag2Parms.level + wcag2Parms.size) {
    case "AAsmall":
    case "AAAlarge":
      out = readability >= 4.5;
      break;
    case "AAlarge":
      out = readability >= 3;
      break;
    case "AAAsmall":
      out = readability >= 7;
      break;
  }
  return out;
};
tinycolor.mostReadable = function(baseColor, colorList, args) {
  var bestColor = null;
  var bestScore = 0;
  var readability;
  var includeFallbackColors, level, size;
  args = args || {};
  includeFallbackColors = args.includeFallbackColors;
  level = args.level;
  size = args.size;
  for (var i = 0; i < colorList.length; i++) {
    readability = tinycolor.readability(baseColor, colorList[i]);
    if (readability > bestScore) {
      bestScore = readability;
      bestColor = tinycolor(colorList[i]);
    }
  }
  if (tinycolor.isReadable(baseColor, bestColor, {
    level,
    size
  }) || !includeFallbackColors) {
    return bestColor;
  } else {
    args.includeFallbackColors = false;
    return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
  }
};
var names = tinycolor.names = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "0ff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "00f",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  burntsienna: "ea7e5d",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "0ff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "f0f",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "663399",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
var hexNames = tinycolor.hexNames = flip(names);
function flip(o) {
  var flipped = {};
  for (var i in o) {
    if (o.hasOwnProperty(i)) {
      flipped[o[i]] = i;
    }
  }
  return flipped;
}
function boundAlpha(a) {
  a = parseFloat(a);
  if (isNaN(a) || a < 0 || a > 1) {
    a = 1;
  }
  return a;
}
function bound01(n, max3) {
  if (isOnePointZero(n)) n = "100%";
  var processPercent = isPercentage(n);
  n = Math.min(max3, Math.max(0, parseFloat(n)));
  if (processPercent) {
    n = parseInt(n * max3, 10) / 100;
  }
  if (Math.abs(n - max3) < 1e-6) {
    return 1;
  }
  return n % max3 / parseFloat(max3);
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function isOnePointZero(n) {
  return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") != -1;
}
function pad2(c3) {
  return c3.length == 1 ? "0" + c3 : "" + c3;
}
function convertToPercentage(n) {
  if (n <= 1) {
    n = n * 100 + "%";
  }
  return n;
}
function convertDecimalToHex(d) {
  return Math.round(parseFloat(d) * 255).toString(16);
}
function convertHexToDecimal(h) {
  return parseIntFromHex(h) / 255;
}
var matchers = function() {
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  return {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
}();
function isValidCSSUnit(color2) {
  return !!matchers.CSS_UNIT.exec(color2);
}
function stringInputToObject(color2) {
  color2 = color2.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
  var named2 = false;
  if (names[color2]) {
    color2 = names[color2];
    named2 = true;
  } else if (color2 == "transparent") {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 0,
      format: "name"
    };
  }
  var match;
  if (match = matchers.rgb.exec(color2)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3]
    };
  }
  if (match = matchers.rgba.exec(color2)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsl.exec(color2)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3]
    };
  }
  if (match = matchers.hsla.exec(color2)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsv.exec(color2)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3]
    };
  }
  if (match = matchers.hsva.exec(color2)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hex8.exec(color2)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named2 ? "name" : "hex8"
    };
  }
  if (match = matchers.hex6.exec(color2)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named2 ? "name" : "hex"
    };
  }
  if (match = matchers.hex4.exec(color2)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      a: convertHexToDecimal(match[4] + "" + match[4]),
      format: named2 ? "name" : "hex8"
    };
  }
  if (match = matchers.hex3.exec(color2)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      format: named2 ? "name" : "hex"
    };
  }
  return false;
}
function validateWCAG2Parms(parms) {
  var level, size;
  parms = parms || {
    level: "AA",
    size: "small"
  };
  level = (parms.level || "AA").toUpperCase();
  size = (parms.size || "small").toLowerCase();
  if (level !== "AA" && level !== "AAA") {
    level = "AA";
  }
  if (size !== "small" && size !== "large") {
    size = "small";
  }
  return {
    level,
    size
  };
}

// node_modules/index-array-by/dist/index-array-by.mjs
function _arrayLikeToArray3(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithHoles3(r) {
  if (Array.isArray(r)) return r;
}
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray3(r);
}
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _iterableToArrayLimit3(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u4, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) ;
      else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t.return && (u4 = t.return(), Object(u4) !== u4)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _objectWithoutProperties(e, t) {
  if (null == e) return {};
  var o, r, i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(e);
    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (e.includes(n)) continue;
    t[n] = r[n];
  }
  return t;
}
function _slicedToArray3(r, e) {
  return _arrayWithHoles3(r) || _iterableToArrayLimit3(r, e) || _unsupportedIterableToArray3(r, e) || _nonIterableRest3();
}
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray3(r) || _nonIterableSpread();
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _unsupportedIterableToArray3(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray3(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray3(r, a) : void 0;
  }
}
var index4 = function() {
  var list = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var keyAccessors = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var multiItem = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var flattenKeys = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var keys = (keyAccessors instanceof Array ? keyAccessors.length ? keyAccessors : [void 0] : [keyAccessors]).map(function(key) {
    return {
      keyAccessor: key,
      isProp: !(key instanceof Function)
    };
  });
  var indexedResult = list.reduce(function(res, item) {
    var iterObj = res;
    var itemVal = item;
    keys.forEach(function(_ref, idx) {
      var keyAccessor = _ref.keyAccessor, isProp = _ref.isProp;
      var key;
      if (isProp) {
        var _itemVal = itemVal, propVal = _itemVal[keyAccessor], rest = _objectWithoutProperties(_itemVal, [keyAccessor].map(_toPropertyKey));
        key = propVal;
        itemVal = rest;
      } else {
        key = keyAccessor(itemVal, idx);
      }
      if (idx + 1 < keys.length) {
        if (!iterObj.hasOwnProperty(key)) {
          iterObj[key] = {};
        }
        iterObj = iterObj[key];
      } else {
        if (multiItem) {
          if (!iterObj.hasOwnProperty(key)) {
            iterObj[key] = [];
          }
          iterObj[key].push(itemVal);
        } else {
          iterObj[key] = itemVal;
        }
      }
    });
    return res;
  }, {});
  if (multiItem instanceof Function) {
    (function reduce2(node) {
      var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      if (level === keys.length) {
        Object.keys(node).forEach(function(k) {
          return node[k] = multiItem(node[k]);
        });
      } else {
        Object.values(node).forEach(function(child) {
          return reduce2(child, level + 1);
        });
      }
    })(indexedResult);
  }
  var result = indexedResult;
  if (flattenKeys) {
    result = [];
    (function flatten3(node) {
      var accKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      if (accKeys.length === keys.length) {
        result.push({
          keys: accKeys,
          vals: node
        });
      } else {
        Object.entries(node).forEach(function(_ref2) {
          var _ref3 = _slicedToArray3(_ref2, 2), key = _ref3[0], val = _ref3[1];
          return flatten3(val, [].concat(_toConsumableArray(accKeys), [key]));
        });
      }
    })(indexedResult);
    if (keyAccessors instanceof Array && keyAccessors.length === 0 && result.length === 1) {
      result[0].keys = [];
    }
  }
  return result;
};

// node_modules/data-joint/dist/data-joint.mjs
function _iterableToArrayLimit4(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = false;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true) ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function ownKeys(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object2);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey2(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties2(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray4(arr, i) {
  return _arrayWithHoles4(arr) || _iterableToArrayLimit4(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
}
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray4(arr) || _nonIterableSpread2();
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray4(arr);
}
function _arrayWithHoles4(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray4(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray4(o, minLen);
}
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive2(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var _excluded = ["createObj", "updateObj", "exitObj", "objBindAttr", "dataBindAttr"];
function diffArrays(prev, next, idAccessor) {
  var result = {
    enter: [],
    update: [],
    exit: []
  };
  if (!idAccessor) {
    var prevSet = new Set(prev);
    var nextSet = new Set(next);
    new Set([].concat(_toConsumableArray2(prevSet), _toConsumableArray2(nextSet))).forEach(function(item) {
      var type = !prevSet.has(item) ? "enter" : !nextSet.has(item) ? "exit" : "update";
      result[type].push(type === "update" ? [item, item] : item);
    });
  } else {
    var prevById = index4(prev, idAccessor, false);
    var nextById = index4(next, idAccessor, false);
    var byId = Object.assign({}, prevById, nextById);
    Object.entries(byId).forEach(function(_ref) {
      var _ref2 = _slicedToArray4(_ref, 2), id = _ref2[0], item = _ref2[1];
      var type = !prevById.hasOwnProperty(id) ? "enter" : !nextById.hasOwnProperty(id) ? "exit" : "update";
      result[type].push(type === "update" ? [prevById[id], nextById[id]] : item);
    });
  }
  return result;
}
function dataBindDiff(data, existingObjs, _ref3) {
  var _ref3$objBindAttr = _ref3.objBindAttr, objBindAttr = _ref3$objBindAttr === void 0 ? "__obj" : _ref3$objBindAttr, _ref3$dataBindAttr = _ref3.dataBindAttr, dataBindAttr = _ref3$dataBindAttr === void 0 ? "__data" : _ref3$dataBindAttr, idAccessor = _ref3.idAccessor, _ref3$purge = _ref3.purge, purge = _ref3$purge === void 0 ? false : _ref3$purge;
  var isObjValid = function isObjValid2(obj) {
    return obj.hasOwnProperty(dataBindAttr);
  };
  var removeObjs = existingObjs.filter(function(obj) {
    return !isObjValid(obj);
  });
  var prevD = existingObjs.filter(isObjValid).map(function(obj) {
    return obj[dataBindAttr];
  });
  var nextD = data;
  var diff = purge ? {
    enter: nextD,
    exit: prevD,
    update: []
  } : diffArrays(prevD, nextD, idAccessor);
  diff.update = diff.update.map(function(_ref4) {
    var _ref5 = _slicedToArray4(_ref4, 2), prevD2 = _ref5[0], nextD2 = _ref5[1];
    if (prevD2 !== nextD2) {
      nextD2[objBindAttr] = prevD2[objBindAttr];
      nextD2[objBindAttr][dataBindAttr] = nextD2;
    }
    return nextD2;
  });
  diff.exit = diff.exit.concat(removeObjs.map(function(obj) {
    return _defineProperty({}, objBindAttr, obj);
  }));
  return diff;
}
function viewDigest(data, existingObjs, appendObj, removeObj, _ref7) {
  var _ref7$createObj = _ref7.createObj, createObj = _ref7$createObj === void 0 ? function(d) {
    return {};
  } : _ref7$createObj, _ref7$updateObj = _ref7.updateObj, updateObj = _ref7$updateObj === void 0 ? function(obj, d) {
  } : _ref7$updateObj, _ref7$exitObj = _ref7.exitObj, exitObj = _ref7$exitObj === void 0 ? function(obj) {
  } : _ref7$exitObj, _ref7$objBindAttr = _ref7.objBindAttr, objBindAttr = _ref7$objBindAttr === void 0 ? "__obj" : _ref7$objBindAttr, _ref7$dataBindAttr = _ref7.dataBindAttr, dataBindAttr = _ref7$dataBindAttr === void 0 ? "__data" : _ref7$dataBindAttr, dataDiffOptions = _objectWithoutProperties2(_ref7, _excluded);
  var _dataBindDiff = dataBindDiff(data, existingObjs, _objectSpread2({
    objBindAttr,
    dataBindAttr
  }, dataDiffOptions)), enter = _dataBindDiff.enter, update18 = _dataBindDiff.update, exit = _dataBindDiff.exit;
  exit.forEach(function(d) {
    var obj = d[objBindAttr];
    delete d[objBindAttr];
    exitObj(obj);
    removeObj(obj);
  });
  var newObjs = createObjs(enter);
  var pointsData = [].concat(_toConsumableArray2(enter), _toConsumableArray2(update18));
  updateObjs(pointsData);
  newObjs.forEach(appendObj);
  function createObjs(data2) {
    var newObjs2 = [];
    data2.forEach(function(d) {
      var obj = createObj(d);
      if (obj) {
        obj[dataBindAttr] = d;
        d[objBindAttr] = obj;
        newObjs2.push(obj);
      }
    });
    return newObjs2;
  }
  function updateObjs(data2) {
    data2.forEach(function(d) {
      var obj = d[objBindAttr];
      if (obj) {
        obj[dataBindAttr] = d;
        updateObj(obj, d);
      }
    });
  }
}

// node_modules/three-globe/dist/three-globe.mjs
var import_frame_ticker = __toESM(require_FrameTicker(), 1);

// node_modules/d3-scale/src/init.js
function initRange(domain, range3) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range3).domain(domain);
      break;
  }
  return this;
}

// node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");

// node_modules/d3-interpolate/src/basis.js
function basis(t13, v0, v1, v2, v3) {
  var t22 = t13 * t13, t32 = t22 * t13;
  return ((1 - 3 * t13 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t13 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
}
function basis_default(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default2 = (x) => () => x;

// node_modules/d3-interpolate/src/color.js
function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}
function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}
function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default2(isNaN(a) ? b : a);
}
function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant_default2(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant_default2(isNaN(a) ? b : a);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y) {
  var color2 = gamma(y);
  function rgb3(start, end) {
    var r = color2((start = rgb(start)).r, (end = rgb(end)).r), g = color2(start.g, end.g), b = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
  rgb3.gamma = rgbGamma;
  return rgb3;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
    for (i = 0; i < n; ++i) {
      color2 = rgb(colors[i]);
      r[i] = color2.r || 0;
      g[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t) {
      color2.r = r(t);
      color2.g = g(t);
      color2.b = b(t);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0, c3 = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i) c3[i] = a[i] * (1 - t) + b[i] * t;
    return c3;
  };
}
function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function array_default(a, b) {
  return (isNumberArray(b) ? numberArray_default : genericArray)(a, b);
}
function genericArray(a, b) {
  var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c3 = new Array(nb), i;
  for (i = 0; i < na; ++i) x[i] = value_default(a[i], b[i]);
  for (; i < nb; ++i) c3[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i) c3[i] = x[i](t);
    return c3;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a, b) {
  var d = /* @__PURE__ */ new Date();
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a, b) {
  var i = {}, c3 = {}, k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};
  for (k in b) {
    if (k in a) {
      i[k] = value_default(a[k], b[k]);
    } else {
      c3[k] = b[k];
    }
  }
  return function(t) {
    for (k in i) c3[k] = i[k](t);
    return c3;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero2(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a = a + "", b = b + "";
  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs;
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i]) s[i] += bm;
      else s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs;
    else s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero2(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2) s[(o = q[i2]).i] = o.x(t);
    return s.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a, b) {
  var t = typeof b, c3;
  return b == null || t === "boolean" ? constant_default2(b) : (t === "number" ? number_default : t === "string" ? (c3 = color(b)) ? (b = c3, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default)(a, b);
}

// node_modules/d3-interpolate/src/round.js
function round_default(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees3 = 180 / Math.PI;
var identity2 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a, b, c3, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c3 + b * d) c3 -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c3 * c3 + d * d)) c3 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c3) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees3,
    skewX: Math.atan(skewX) * degrees3,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity2 : decompose_default(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null) return identity2;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity2;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;
      else if (b - a > 180) a += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default(a, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default(a, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale2(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a, b) {
    var s = [], q = [];
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale2(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon22 = 1e-12;
function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}
function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}
function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p02, p1) {
    var ux0 = p02[0], uy0 = p02[1], w0 = p02[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon22) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s = t * S, coshr0 = cosh(r0), u4 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u4 * dx,
          uy0 + u4 * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-interpolate/src/hsl.js
function hsl2(hue2) {
  return function(start, end) {
    var h = hue2((start = hsl(start)).h, (end = hsl(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}
var hsl_default = hsl2(hue);
var hslLong = hsl2(nogamma);

// node_modules/d3-interpolate/src/hcl.js
function hcl2(hue2) {
  return function(start, end) {
    var h = hue2((start = hcl(start)).h, (end = hcl(end)).h), c3 = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c3(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue2) {
  return function cubehelixGamma(y) {
    y = +y;
    function cubehelix3(start, end) {
      var h = hue2((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }
    cubehelix3.gamma = cubehelixGamma;
    return cubehelix3;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// node_modules/d3-scale/src/constant.js
function constants(x) {
  return function() {
    return x;
  };
}

// node_modules/d3-scale/src/number.js
function number2(x) {
  return +x;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity3(x) {
  return x;
}
function normalize(a, b) {
  return (b -= a = +a) ? function(x) {
    return (x - a) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a, b) {
  var t;
  if (a > b) t = a, a = b, b = t;
  return function(x) {
    return Math.max(a, Math.min(b, x));
  };
}
function bimap(domain, range3, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range3[0], r1 = range3[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) {
    return r0(d0(x));
  };
}
function polymap(domain, range3, interpolate) {
  var j = Math.min(domain.length, range3.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range3 = range3.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range3[i], range3[i + 1]);
  }
  return function(x) {
    var i2 = bisect_default(domain, x, 1, j) - 1;
    return r[i2](d[i2](x));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer2() {
  var domain = unit, range3 = unit, interpolate = value_default, transform, untransform, unknown, clamp = identity3, piecewise2, output, input;
  function rescale() {
    var n = Math.min(domain.length, range3.length);
    if (clamp !== identity3) clamp = clamper(domain[0], domain[n - 1]);
    piecewise2 = n > 2 ? polymap : bimap;
    output = input = null;
    return scale2;
  }
  function scale2(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise2(domain.map(transform), range3, interpolate)))(transform(clamp(x)));
  }
  scale2.invert = function(y) {
    return clamp(untransform((input || (input = piecewise2(range3, domain.map(transform), number_default)))(y)));
  };
  scale2.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number2), rescale()) : domain.slice();
  };
  scale2.range = function(_) {
    return arguments.length ? (range3 = Array.from(_), rescale()) : range3.slice();
  };
  scale2.rangeRound = function(_) {
    return range3 = Array.from(_), interpolate = round_default, rescale();
  };
  scale2.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity3, rescale()) : clamp !== identity3;
  };
  scale2.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale2.unknown = function(_) {
    return arguments.length ? (unknown = _, scale2) : unknown;
  };
  return function(t, u4) {
    transform = t, untransform = u4;
    return rescale();
  };
}
function continuous() {
  return transformer2()(identity3, identity3);
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null;
  var i, coefficient = x.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;
      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;
      default:
        if (!+s[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": formatDecimal_default,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => formatRounded_default(x * 100, p),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default3(x) {
  return x;
}

// node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale3) {
  var group2 = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default3 : formatGroup_default(map3.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default3 : formatNumerals_default(map3.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "−" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign4 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n") comma = true, type = "g";
    else if (!formatTypes_default[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero3 || fill === "0" && align === "=") zero3 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c3;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim) value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign4 !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign4 === "(" ? sign4 : minus : sign4 === "-" || sign4 === "(" ? "" : sign4) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign4 === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c3 = value.charCodeAt(i), 48 > c3 || c3 > 57) {
              valueSuffix = (c3 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero3) value = group2(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero3) value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max3) {
  step = Math.abs(step), max3 = Math.abs(max3) - step;
  return Math.max(0, exponent_default(max3) - exponent_default(step)) + 1;
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start, stop, count2, specifier) {
  var step = tickStep(start, stop, count2), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale2) {
  var domain = scale2.domain;
  scale2.ticks = function(count2) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count2 == null ? 10 : count2);
  };
  scale2.tickFormat = function(count2, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count2 == null ? 10 : count2, specifier);
  };
  scale2.nice = function(count2) {
    if (count2 == null) count2 = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count2);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale2;
  };
  return scale2;
}
function linear2() {
  var scale2 = continuous();
  scale2.copy = function() {
    return copy(scale2, linear2());
  };
  initRange.apply(scale2, arguments);
  return linearish(scale2);
}

// node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function timeInterval(floori, offseti, count2, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = (date) => {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = (date) => {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = (date) => {
    const d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = (date, step) => {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = (start, stop, step) => {
    const range3 = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range3;
    let previous;
    do
      range3.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range3;
  };
  interval.filter = (test) => {
    return timeInterval((date) => {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, (date, step) => {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {
          }
        }
        else while (--step >= 0) {
          while (offseti(date, 1), !test(date)) {
          }
        }
      }
    });
  };
  if (count2) {
    interval.count = (start, end) => {
      t02.setTime(+start), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count2(t02, t12));
    };
    interval.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d) => field(d) % step === 0 : (d) => interval.count(0, d) % step === 0);
    };
  }
  return interval;
}

// node_modules/d3-time/src/millisecond.js
var millisecond = timeInterval(() => {
}, (date, step) => {
  date.setTime(+date + step);
}, (start, end) => {
  return end - start;
});
millisecond.every = (k) => {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return timeInterval((date) => {
    date.setTime(Math.floor(date / k) * k);
  }, (date, step) => {
    date.setTime(+date + step * k);
  }, (start, end) => {
    return (end - start) / k;
  });
};
var milliseconds = millisecond.range;

// node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/d3-time/src/second.js
var second = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds());
}, (date, step) => {
  date.setTime(+date + step * durationSecond);
}, (start, end) => {
  return (end - start) / durationSecond;
}, (date) => {
  return date.getUTCSeconds();
});
var seconds = second.range;

// node_modules/d3-time/src/minute.js
var timeMinute = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, (date, step) => {
  date.setTime(+date + step * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date) => {
  return date.getMinutes();
});
var timeMinutes = timeMinute.range;
var utcMinute = timeInterval((date) => {
  date.setUTCSeconds(0, 0);
}, (date, step) => {
  date.setTime(+date + step * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date) => {
  return date.getUTCMinutes();
});
var utcMinutes = utcMinute.range;

// node_modules/d3-time/src/hour.js
var timeHour = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, (date, step) => {
  date.setTime(+date + step * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date) => {
  return date.getHours();
});
var timeHours = timeHour.range;
var utcHour = timeInterval((date) => {
  date.setUTCMinutes(0, 0, 0);
}, (date, step) => {
  date.setTime(+date + step * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date) => {
  return date.getUTCHours();
});
var utcHours = utcHour.range;

// node_modules/d3-time/src/day.js
var timeDay = timeInterval(
  (date) => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  (date) => date.getDate() - 1
);
var timeDays = timeDay.range;
var utcDay = timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return date.getUTCDate() - 1;
});
var utcDays = utcDay.range;
var unixDay = timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return Math.floor(date / durationDay);
});
var unixDays = unixDay.range;

// node_modules/d3-time/src/week.js
function timeWeekday(i) {
  return timeInterval((date) => {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setDate(date.getDate() + step * 7);
  }, (start, end) => {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var timeSunday = timeWeekday(0);
var timeMonday = timeWeekday(1);
var timeTuesday = timeWeekday(2);
var timeWednesday = timeWeekday(3);
var timeThursday = timeWeekday(4);
var timeFriday = timeWeekday(5);
var timeSaturday = timeWeekday(6);
var timeSundays = timeSunday.range;
var timeMondays = timeMonday.range;
var timeTuesdays = timeTuesday.range;
var timeWednesdays = timeWednesday.range;
var timeThursdays = timeThursday.range;
var timeFridays = timeFriday.range;
var timeSaturdays = timeSaturday.range;
function utcWeekday(i) {
  return timeInterval((date) => {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, (start, end) => {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/d3-time/src/month.js
var timeMonth = timeInterval((date) => {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, (date, step) => {
  date.setMonth(date.getMonth() + step);
}, (start, end) => {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, (date) => {
  return date.getMonth();
});
var timeMonths = timeMonth.range;
var utcMonth = timeInterval((date) => {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCMonth(date.getUTCMonth() + step);
}, (start, end) => {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, (date) => {
  return date.getUTCMonth();
});
var utcMonths = utcMonth.range;

// node_modules/d3-time/src/year.js
var timeYear = timeInterval((date) => {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, (date, step) => {
  date.setFullYear(date.getFullYear() + step);
}, (start, end) => {
  return end.getFullYear() - start.getFullYear();
}, (date) => {
  return date.getFullYear();
});
timeYear.every = (k) => {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setFullYear(date.getFullYear() + step * k);
  });
};
var timeYears = timeYear.range;
var utcYear = timeInterval((date) => {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, (start, end) => {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, (date) => {
  return date.getUTCFullYear();
});
utcYear.every = (k) => {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};
var utcYears = utcYear.range;

// node_modules/d3-time/src/ticks.js
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start, stop, count2) {
    const reverse2 = stop < start;
    if (reverse2) [start, stop] = [stop, start];
    const interval = count2 && typeof count2.range === "function" ? count2 : tickInterval(start, stop, count2);
    const ticks3 = interval ? interval.range(start, +stop + 1) : [];
    return reverse2 ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start, stop, count2) {
    const target = Math.abs(stop - start) / count2;
    const i = bisector(([, , step2]) => step2).right(tickIntervals, target);
    if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count2));
    if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count2), 1));
    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
    return t.every(step);
  }
  return [ticks2, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);

// node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y, m, d) {
  return { y, m, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i = -1, j = 0, n = specifier.length, c3, pad3, format3;
      if (!(date instanceof Date)) date = /* @__PURE__ */ new Date(+date);
      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad3 = pads[c3 = specifier.charAt(++i)]) != null) c3 = specifier.charAt(++i);
          else pad3 = c3 === "e" ? " " : "0";
          if (format3 = formats2[c3]) c3 = format3(date, pad3);
          string.push(c3);
          j = i + 1;
        }
      }
      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
      if (i != string.length) return null;
      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d)) d.Z = 0;
      if ("p" in d) d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0) d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i = 0, n = specifier.length, m = string.length, c3, parse;
    while (i < n) {
      if (j >= m) return -1;
      c3 = specifier.charCodeAt(i++);
      if (c3 === 37) {
        c3 = specifier.charAt(i++);
        parse = parses[c3 in pads ? specifier.charAt(i++) : c3];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c3 != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }
  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }
  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign4 = value < 0 ? "-" : "", string = (sign4 ? -value : value) + "", length = string.length;
  return sign4 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s) {
  return s.replace(requoteRe, "\\$&");
}
function formatRe(names2) {
  return new RegExp("^(?:" + names2.map(requote).join("|") + ")", "i");
}
function formatLookup(names2) {
  return new Map(names2.map((name, i) => [name.toLowerCase(), i]));
}
function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}
function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}
function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
  return pad(1 + timeDay.count(timeYear(d), d), p, 3);
}
function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d, p) {
  return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);
}
function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
}
function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p) {
  return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);
}
function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
}
function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}

// node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date) {
  return date.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/robust-predicates/esm/util.js
var epsilon3 = 11102230246251565e-32;
var splitter = 134217729;
var resulterrbound = (3 + 8 * epsilon3) * epsilon3;
function sum2(elen, e, flen, f, h) {
  let Q, Qnew, hh, bvirt;
  let enow = e[0];
  let fnow = f[0];
  let eindex = 0;
  let findex = 0;
  if (fnow > enow === fnow > -enow) {
    Q = enow;
    enow = e[++eindex];
  } else {
    Q = fnow;
    fnow = f[++findex];
  }
  let hindex = 0;
  if (eindex < elen && findex < flen) {
    if (fnow > enow === fnow > -enow) {
      Qnew = enow + Q;
      hh = Q - (Qnew - enow);
      enow = e[++eindex];
    } else {
      Qnew = fnow + Q;
      hh = Q - (Qnew - fnow);
      fnow = f[++findex];
    }
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
    while (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = Q + enow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (enow - bvirt);
        enow = e[++eindex];
      } else {
        Qnew = Q + fnow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f[++findex];
      }
      Q = Qnew;
      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }
  }
  while (eindex < elen) {
    Qnew = Q + enow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (enow - bvirt);
    enow = e[++eindex];
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
  }
  while (findex < flen) {
    Qnew = Q + fnow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (fnow - bvirt);
    fnow = f[++findex];
    Q = Qnew;
    if (hh !== 0) {
      h[hindex++] = hh;
    }
  }
  if (Q !== 0 || hindex === 0) {
    h[hindex++] = Q;
  }
  return hindex;
}
function estimate(elen, e) {
  let Q = e[0];
  for (let i = 1; i < elen; i++) Q += e[i];
  return Q;
}
function vec(n) {
  return new Float64Array(n);
}

// node_modules/robust-predicates/esm/orient2d.js
var ccwerrboundA = (3 + 16 * epsilon3) * epsilon3;
var ccwerrboundB = (2 + 12 * epsilon3) * epsilon3;
var ccwerrboundC = (9 + 64 * epsilon3) * epsilon3 * epsilon3;
var B2 = vec(4);
var C1 = vec(8);
var C2 = vec(12);
var D2 = vec(16);
var u = vec(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
  let acxtail, acytail, bcxtail, bcytail;
  let bvirt, c3, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t13, t03, u32;
  const acx = ax - cx;
  const bcx = bx - cx;
  const acy = ay - cy;
  const bcy = by - cy;
  s1 = acx * bcy;
  c3 = splitter * acx;
  ahi = c3 - (c3 - acx);
  alo = acx - ahi;
  c3 = splitter * bcy;
  bhi = c3 - (c3 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcx;
  c3 = splitter * acy;
  ahi = c3 - (c3 - acy);
  alo = acy - ahi;
  c3 = splitter * bcx;
  bhi = c3 - (c3 - bcx);
  blo = bcx - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  B2[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  B2[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  B2[2] = _j - (u32 - bvirt) + (_i - bvirt);
  B2[3] = u32;
  let det = estimate(4, B2);
  let errbound = ccwerrboundB * detsum;
  if (det >= errbound || -det >= errbound) {
    return det;
  }
  bvirt = ax - acx;
  acxtail = ax - (acx + bvirt) + (bvirt - cx);
  bvirt = bx - bcx;
  bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
  bvirt = ay - acy;
  acytail = ay - (acy + bvirt) + (bvirt - cy);
  bvirt = by - bcy;
  bcytail = by - (bcy + bvirt) + (bvirt - cy);
  if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
    return det;
  }
  errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
  det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
  if (det >= errbound || -det >= errbound) return det;
  s1 = acxtail * bcy;
  c3 = splitter * acxtail;
  ahi = c3 - (c3 - acxtail);
  alo = acxtail - ahi;
  c3 = splitter * bcy;
  bhi = c3 - (c3 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcx;
  c3 = splitter * acytail;
  ahi = c3 - (c3 - acytail);
  alo = acytail - ahi;
  c3 = splitter * bcx;
  bhi = c3 - (c3 - bcx);
  blo = bcx - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C1len = sum2(4, B2, 4, u, C1);
  s1 = acx * bcytail;
  c3 = splitter * acx;
  ahi = c3 - (c3 - acx);
  alo = acx - ahi;
  c3 = splitter * bcytail;
  bhi = c3 - (c3 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcxtail;
  c3 = splitter * acy;
  ahi = c3 - (c3 - acy);
  alo = acy - ahi;
  c3 = splitter * bcxtail;
  bhi = c3 - (c3 - bcxtail);
  blo = bcxtail - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C2len = sum2(C1len, C1, 4, u, C2);
  s1 = acxtail * bcytail;
  c3 = splitter * acxtail;
  ahi = c3 - (c3 - acxtail);
  alo = acxtail - ahi;
  c3 = splitter * bcytail;
  bhi = c3 - (c3 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcxtail;
  c3 = splitter * acytail;
  ahi = c3 - (c3 - acytail);
  alo = acytail - ahi;
  c3 = splitter * bcxtail;
  bhi = c3 - (c3 - bcxtail);
  blo = bcxtail - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const Dlen = sum2(C2len, C2, 4, u, D2);
  return D2[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
  const detleft = (ay - cy) * (bx - cx);
  const detright = (ax - cx) * (by - cy);
  const det = detleft - detright;
  const detsum = Math.abs(detleft + detright);
  if (Math.abs(det) >= ccwerrboundA * detsum) return det;
  return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}

// node_modules/robust-predicates/esm/orient3d.js
var o3derrboundA = (7 + 56 * epsilon3) * epsilon3;
var o3derrboundB = (3 + 28 * epsilon3) * epsilon3;
var o3derrboundC = (26 + 288 * epsilon3) * epsilon3 * epsilon3;
var bc = vec(4);
var ca = vec(4);
var ab = vec(4);
var at_b = vec(4);
var at_c = vec(4);
var bt_c = vec(4);
var bt_a = vec(4);
var ct_a = vec(4);
var ct_b = vec(4);
var bct = vec(8);
var cat = vec(8);
var abt = vec(8);
var u2 = vec(4);
var _8 = vec(8);
var _8b = vec(8);
var _16 = vec(8);
var _12 = vec(12);
var fin = vec(192);
var fin2 = vec(192);

// node_modules/robust-predicates/esm/incircle.js
var iccerrboundA = (10 + 96 * epsilon3) * epsilon3;
var iccerrboundB = (4 + 48 * epsilon3) * epsilon3;
var iccerrboundC = (44 + 576 * epsilon3) * epsilon3 * epsilon3;
var bc2 = vec(4);
var ca2 = vec(4);
var ab2 = vec(4);
var aa = vec(4);
var bb = vec(4);
var cc = vec(4);
var u3 = vec(4);
var v = vec(4);
var axtbc = vec(8);
var aytbc = vec(8);
var bxtca = vec(8);
var bytca = vec(8);
var cxtab = vec(8);
var cytab = vec(8);
var abt2 = vec(8);
var bct2 = vec(8);
var cat2 = vec(8);
var abtt = vec(4);
var bctt = vec(4);
var catt = vec(4);
var _82 = vec(8);
var _162 = vec(16);
var _16b = vec(16);
var _16c = vec(16);
var _32 = vec(32);
var _32b = vec(32);
var _48 = vec(48);
var _64 = vec(64);
var fin3 = vec(1152);
var fin22 = vec(1152);

// node_modules/robust-predicates/esm/insphere.js
var isperrboundA = (16 + 224 * epsilon3) * epsilon3;
var isperrboundB = (5 + 72 * epsilon3) * epsilon3;
var isperrboundC = (71 + 1408 * epsilon3) * epsilon3 * epsilon3;
var ab3 = vec(4);
var bc3 = vec(4);
var cd = vec(4);
var de = vec(4);
var ea = vec(4);
var ac = vec(4);
var bd = vec(4);
var ce = vec(4);
var da = vec(4);
var eb = vec(4);
var abc = vec(24);
var bcd = vec(24);
var cde = vec(24);
var dea = vec(24);
var eab = vec(24);
var abd = vec(24);
var bce = vec(24);
var cda = vec(24);
var deb = vec(24);
var eac = vec(24);
var adet = vec(1152);
var bdet = vec(1152);
var cdet = vec(1152);
var ddet = vec(1152);
var edet = vec(1152);
var abdet = vec(2304);
var cddet = vec(2304);
var cdedet = vec(3456);
var deter = vec(5760);
var _83 = vec(8);
var _8b2 = vec(8);
var _8c = vec(8);
var _163 = vec(16);
var _24 = vec(24);
var _482 = vec(48);
var _48b = vec(48);
var _96 = vec(96);
var _192 = vec(192);
var _384x = vec(384);
var _384y = vec(384);
var _384z = vec(384);
var _768 = vec(768);
var xdet = vec(96);
var ydet = vec(96);
var zdet = vec(96);
var fin4 = vec(1152);

// node_modules/delaunator/index.js
var EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class _Delaunator {
  static from(points, getX = defaultGetX, getY = defaultGetY) {
    const n = points.length;
    const coords = new Float64Array(n * 2);
    for (let i = 0; i < n; i++) {
      const p = points[i];
      coords[2 * i] = getX(p);
      coords[2 * i + 1] = getY(p);
    }
    return new _Delaunator(coords);
  }
  constructor(coords) {
    const n = coords.length >> 1;
    if (n > 0 && typeof coords[0] !== "number") throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n));
    this._hullPrev = new Uint32Array(n);
    this._hullNext = new Uint32Array(n);
    this._hullTri = new Uint32Array(n);
    this._hullHash = new Int32Array(this._hashSize);
    this._ids = new Uint32Array(n);
    this._dists = new Float64Array(n);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i = 0; i < n; i++) {
      const x = coords[2 * i];
      const y = coords[2 * i + 1];
      if (x < minX) minX = x;
      if (y < minY) minY = y;
      if (x > maxX) maxX = x;
      if (y > maxY) maxY = y;
      this._ids[i] = i;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let i0, i1, i2;
    for (let i = 0, minDist = Infinity; i < n; i++) {
      const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist) {
        i0 = i;
        minDist = d;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    for (let i = 0, minDist = Infinity; i < n; i++) {
      if (i === i0) continue;
      const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist && d > 0) {
        i1 = i;
        minDist = d;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i = 0; i < n; i++) {
      if (i === i0 || i === i1) continue;
      const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
      if (r < minRadius) {
        i2 = i;
        minRadius = r;
      }
    }
    let i2x = coords[2 * i2];
    let i2y = coords[2 * i2 + 1];
    if (minRadius === Infinity) {
      for (let i = 0; i < n; i++) {
        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n - 1);
      const hull = new Uint32Array(n);
      let j = 0;
      for (let i = 0, d0 = -Infinity; i < n; i++) {
        const id = this._ids[i];
        const d = this._dists[id];
        if (d > d0) {
          hull[j++] = id;
          d0 = d;
        }
      }
      this.hull = hull.subarray(0, j);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
      const i = i1;
      const x = i1x;
      const y = i1y;
      i1 = i2;
      i1x = i2x;
      i1y = i2y;
      i2 = i;
      i2x = x;
      i2y = y;
    }
    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i = 0; i < n; i++) {
      this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
    }
    quicksort(this._ids, this._dists, 0, n - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i2] = i1;
    hullNext[i1] = hullPrev[i0] = i2;
    hullNext[i2] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i2] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i2;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i2, -1, -1, -1);
    for (let k = 0, xp, yp; k < this._ids.length; k++) {
      const i = this._ids[k];
      const x = coords[2 * i];
      const y = coords[2 * i + 1];
      if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;
      xp = x;
      yp = y;
      if (i === i0 || i === i1 || i === i2) continue;
      let start = 0;
      for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
        start = hullHash[(key + j) % this._hashSize];
        if (start !== -1 && start !== hullNext[start]) break;
      }
      start = hullPrev[start];
      let e = start, q;
      while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {
        e = q;
        if (e === start) {
          e = -1;
          break;
        }
      }
      if (e === -1) continue;
      let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
      hullTri[i] = this._legalize(t + 2);
      hullTri[e] = t;
      hullSize++;
      let n2 = hullNext[e];
      while (q = hullNext[n2], orient2d(x, y, coords[2 * n2], coords[2 * n2 + 1], coords[2 * q], coords[2 * q + 1]) < 0) {
        t = this._addTriangle(n2, i, q, hullTri[i], -1, hullTri[n2]);
        hullTri[i] = this._legalize(t + 2);
        hullNext[n2] = n2;
        hullSize--;
        n2 = q;
      }
      if (e === start) {
        while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {
          t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
          this._legalize(t + 2);
          hullTri[q] = t;
          hullNext[e] = e;
          hullSize--;
          e = q;
        }
      }
      this._hullStart = hullPrev[i] = e;
      hullNext[e] = hullPrev[n2] = i;
      hullNext[i] = n2;
      hullHash[this._hashKey(x, y)] = i;
      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i = 0, e = this._hullStart; i < hullSize; i++) {
      this.hull[i] = e;
      e = hullNext[e];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x, y) {
    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i = 0;
    let ar = 0;
    while (true) {
      const b = halfedges[a];
      const a0 = a - a % 3;
      ar = a0 + (a + 2) % 3;
      if (b === -1) {
        if (i === 0) break;
        a = EDGE_STACK[--i];
        continue;
      }
      const b0 = b - b % 3;
      const al = a0 + (a + 1) % 3;
      const bl = b0 + (b + 2) % 3;
      const p02 = triangles[ar];
      const pr = triangles[a];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(
        coords[2 * p02],
        coords[2 * p02 + 1],
        coords[2 * pr],
        coords[2 * pr + 1],
        coords[2 * pl],
        coords[2 * pl + 1],
        coords[2 * p1],
        coords[2 * p1 + 1]
      );
      if (illegal) {
        triangles[a] = p1;
        triangles[b] = p02;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e = this._hullStart;
          do {
            if (this._hullTri[e] === bl) {
              this._hullTri[e] = a;
              break;
            }
            e = this._hullPrev[e];
          } while (e !== this._hullStart);
        }
        this._link(a, hbl);
        this._link(b, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b + 1) % 3;
        if (i < EDGE_STACK.length) {
          EDGE_STACK[i++] = br;
        }
      } else {
        if (i === 0) break;
        a = EDGE_STACK[--i];
      }
    }
    return ar;
  }
  _link(a, b) {
    this._halfedges[a] = b;
    if (b !== -1) this._halfedges[b] = a;
  }
  // add a new triangle given vertex indices and adjacent half-edge ids
  _addTriangle(i0, i1, i2, a, b, c3) {
    const t = this.trianglesLen;
    this._triangles[t] = i0;
    this._triangles[t + 1] = i1;
    this._triangles[t + 2] = i2;
    this._link(t, a);
    this._link(t + 1, b);
    this._link(t + 2, c3);
    this.trianglesLen += 3;
    return t;
  }
};
function pseudoAngle(dx, dy) {
  const p = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p : 1 + p) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = (ey * bl - dy * cl) * d;
  const y = (dx * cl - ex * bl) * d;
  return x * x + y * y;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = ax + (ey * bl - dy * cl) * d;
  const y = ay + (dx * cl - ex * bl) * d;
  return { x, y };
}
function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i = left + 1; i <= right; i++) {
      const temp = ids[i];
      const tempDist = dists[temp];
      let j = i - 1;
      while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];
      ids[j + 1] = temp;
    }
  } else {
    const median2 = left + right >> 1;
    let i = left + 1;
    let j = right;
    swap(ids, median2, i);
    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
    if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);
    if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);
    const temp = ids[i];
    const tempDist = dists[temp];
    while (true) {
      do
        i++;
      while (dists[ids[i]] < tempDist);
      do
        j--;
      while (dists[ids[j]] > tempDist);
      if (j < i) break;
      swap(ids, i, j);
    }
    ids[left + 1] = ids[j];
    ids[j] = temp;
    if (right - i + 1 >= j - left) {
      quicksort(ids, dists, i, right);
      quicksort(ids, dists, left, j - 1);
    } else {
      quicksort(ids, dists, left, j - 1);
      quicksort(ids, dists, i, right);
    }
  }
}
function swap(arr, i, j) {
  const tmp = arr[i];
  arr[i] = arr[j];
  arr[j] = tmp;
}
function defaultGetX(p) {
  return p[0];
}
function defaultGetY(p) {
  return p[1];
}

// node_modules/point-in-polygon-hao/dist/pointInPolygon.mjs
function pointInPolygon(p, polygon) {
  var i = 0;
  var ii = 0;
  var k = 0;
  var f = 0;
  var u1 = 0;
  var v1 = 0;
  var u22 = 0;
  var v2 = 0;
  var currentP = null;
  var nextP = null;
  var x = p[0];
  var y = p[1];
  var numContours = polygon.length;
  for (i; i < numContours; i++) {
    ii = 0;
    var contourLen = polygon[i].length - 1;
    var contour = polygon[i];
    currentP = contour[0];
    if (currentP[0] !== contour[contourLen][0] && currentP[1] !== contour[contourLen][1]) {
      throw new Error("First and last coordinates in a ring must be the same");
    }
    u1 = currentP[0] - x;
    v1 = currentP[1] - y;
    for (ii; ii < contourLen; ii++) {
      nextP = contour[ii + 1];
      v2 = nextP[1] - y;
      if (v1 < 0 && v2 < 0 || v1 > 0 && v2 > 0) {
        currentP = nextP;
        v1 = v2;
        u1 = currentP[0] - x;
        continue;
      }
      u22 = nextP[0] - p[0];
      if (v2 > 0 && v1 <= 0) {
        f = u1 * v2 - u22 * v1;
        if (f > 0) {
          k = k + 1;
        } else if (f === 0) {
          return 0;
        }
      } else if (v1 > 0 && v2 <= 0) {
        f = u1 * v2 - u22 * v1;
        if (f < 0) {
          k = k + 1;
        } else if (f === 0) {
          return 0;
        }
      } else if (v2 === 0 && v1 < 0) {
        f = u1 * v2 - u22 * v1;
        if (f === 0) {
          return 0;
        }
      } else if (v1 === 0 && v2 < 0) {
        f = u1 * v2 - u22 * v1;
        if (f === 0) {
          return 0;
        }
      } else if (v1 === 0 && v2 === 0) {
        if (u22 <= 0 && u1 >= 0) {
          return 0;
        } else if (u1 <= 0 && u22 >= 0) {
          return 0;
        }
      }
      currentP = nextP;
      v1 = v2;
      u1 = u22;
    }
  }
  if (k % 2 === 0) {
    return false;
  }
  return true;
}
var pointInPolygon_default = pointInPolygon;

// node_modules/@turf/helpers/dist/esm/index.js
var earthRadius = 63710088e-1;
var factors = {
  centimeters: earthRadius * 100,
  centimetres: earthRadius * 100,
  degrees: 360 / (2 * Math.PI),
  feet: earthRadius * 3.28084,
  inches: earthRadius * 39.37,
  kilometers: earthRadius / 1e3,
  kilometres: earthRadius / 1e3,
  meters: earthRadius,
  metres: earthRadius,
  miles: earthRadius / 1609.344,
  millimeters: earthRadius * 1e3,
  millimetres: earthRadius * 1e3,
  nauticalmiles: earthRadius / 1852,
  radians: 1,
  yards: earthRadius * 1.0936
};

// node_modules/@turf/invariant/dist/esm/index.js
function getCoord(coord) {
  if (!coord) {
    throw new Error("coord is required");
  }
  if (!Array.isArray(coord)) {
    if (coord.type === "Feature" && coord.geometry !== null && coord.geometry.type === "Point") {
      return [...coord.geometry.coordinates];
    }
    if (coord.type === "Point") {
      return [...coord.coordinates];
    }
  }
  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {
    return [...coord];
  }
  throw new Error("coord must be GeoJSON Point or an Array of numbers");
}
function getGeom(geojson) {
  if (geojson.type === "Feature") {
    return geojson.geometry;
  }
  return geojson;
}

// node_modules/@turf/boolean-point-in-polygon/dist/esm/index.js
function booleanPointInPolygon(point2, polygon, options = {}) {
  if (!point2) {
    throw new Error("point is required");
  }
  if (!polygon) {
    throw new Error("polygon is required");
  }
  const pt = getCoord(point2);
  const geom = getGeom(polygon);
  const type = geom.type;
  const bbox = polygon.bbox;
  let polys = geom.coordinates;
  if (bbox && inBBox(pt, bbox) === false) {
    return false;
  }
  if (type === "Polygon") {
    polys = [polys];
  }
  let result = false;
  for (var i = 0; i < polys.length; ++i) {
    const polyResult = pointInPolygon_default(pt, polys[i]);
    if (polyResult === 0)
      return options.ignoreBoundary ? false : true;
    else if (polyResult)
      result = true;
  }
  return result;
}
function inBBox(pt, bbox) {
  return bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1];
}
var turf_boolean_point_in_polygon_default = booleanPointInPolygon;

// node_modules/d3-delaunay/src/path.js
var epsilon4 = 1e-6;
var Path = class {
  constructor() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x, y) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x, y) {
    this._ += `L${this._x1 = +x},${this._y1 = +y}`;
  }
  arc(x, y, r) {
    x = +x, y = +y, r = +r;
    const x03 = x + r;
    const y03 = y;
    if (r < 0) throw new Error("negative radius");
    if (this._x1 === null) this._ += `M${x03},${y03}`;
    else if (Math.abs(this._x1 - x03) > epsilon4 || Math.abs(this._y1 - y03) > epsilon4) this._ += "L" + x03 + "," + y03;
    if (!r) return;
    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x03},${this._y1 = y03}`;
  }
  rect(x, y, w, h) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
  }
  value() {
    return this._ || null;
  }
};

// node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x, y) {
    this._.push([x, y]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x, y) {
    this._.push([x, y]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points, hull, triangles }, vectors } = this;
    let bx, by;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
      const t13 = triangles[i] * 2;
      const t22 = triangles[i + 1] * 2;
      const t32 = triangles[i + 2] * 2;
      const x13 = points[t13];
      const y13 = points[t13 + 1];
      const x2 = points[t22];
      const y2 = points[t22 + 1];
      const x3 = points[t32];
      const y3 = points[t32 + 1];
      const dx = x2 - x13;
      const dy = y2 - y13;
      const ex = x3 - x13;
      const ey = y3 - y13;
      const ab4 = (dx * ey - dy * ex) * 2;
      if (Math.abs(ab4) < 1e-9) {
        if (bx === void 0) {
          bx = by = 0;
          for (const i2 of hull) bx += points[i2 * 2], by += points[i2 * 2 + 1];
          bx /= hull.length, by /= hull.length;
        }
        const a = 1e9 * Math.sign((bx - x13) * ey - (by - y13) * ex);
        x = (x13 + x3) / 2 - a * ey;
        y = (y13 + y3) / 2 + a * ex;
      } else {
        const d = 1 / ab4;
        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        x = x13 + (ey * bl - dy * cl) * d;
        y = y13 + (dx * cl - ex * bl) * d;
      }
      circumcenters[j] = x;
      circumcenters[j + 1] = y;
    }
    let h = hull[hull.length - 1];
    let p02, p1 = h * 4;
    let x03, x12 = points[2 * h];
    let y03, y12 = points[2 * h + 1];
    vectors.fill(0);
    for (let i = 0; i < hull.length; ++i) {
      h = hull[i];
      p02 = p1, x03 = x12, y03 = y12;
      p1 = h * 4, x12 = points[2 * h], y12 = points[2 * h + 1];
      vectors[p02 + 2] = vectors[p1] = y03 - y12;
      vectors[p02 + 3] = vectors[p1 + 1] = x12 - x03;
    }
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
    if (hull.length <= 1) return null;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i) continue;
      const ti = Math.floor(i / 3) * 2;
      const tj = Math.floor(j / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi, xj, yj, context);
    }
    let h0, h1 = hull[hull.length - 1];
    for (let i = 0; i < hull.length; ++i) {
      h0 = h1, h1 = hull[i];
      const t = Math.floor(inedges[h1] / 3) * 2;
      const x = circumcenters[t];
      const y = circumcenters[t + 1];
      const v2 = h0 * 4;
      const p = this._project(x, y, vectors[v2 + 2], vectors[v2 + 3]);
      if (p) this._renderSegment(x, y, p[0], p[1], context);
    }
    return buffer && buffer.value();
  }
  renderBounds(context) {
    const buffer = context == null ? context = new Path() : void 0;
    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }
  renderCell(i, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const points = this._clip(i);
    if (points === null || !points.length) return;
    context.moveTo(points[0], points[1]);
    let n = points.length;
    while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1) n -= 2;
    for (let i2 = 2; i2 < n; i2 += 2) {
      if (points[i2] !== points[i2 - 2] || points[i2 + 1] !== points[i2 - 1])
        context.lineTo(points[i2], points[i2 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  *cellPolygons() {
    const { delaunay: { points } } = this;
    for (let i = 0, n = points.length / 2; i < n; ++i) {
      const cell = this.cellPolygon(i);
      if (cell) cell.index = i, yield cell;
    }
  }
  cellPolygon(i) {
    const polygon = new Polygon();
    this.renderCell(i, polygon);
    return polygon.value();
  }
  _renderSegment(x03, y03, x12, y12, context) {
    let S;
    const c0 = this._regioncode(x03, y03);
    const c1 = this._regioncode(x12, y12);
    if (c0 === 0 && c1 === 0) {
      context.moveTo(x03, y03);
      context.lineTo(x12, y12);
    } else if (S = this._clipSegment(x03, y03, x12, y12, c0, c1)) {
      context.moveTo(S[0], S[1]);
      context.lineTo(S[2], S[3]);
    }
  }
  contains(i, x, y) {
    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
    return this.delaunay._step(i, x, y) === i;
  }
  *neighbors(i) {
    const ci = this._clip(i);
    if (ci) for (const j of this.delaunay.neighbors(i)) {
      const cj = this._clip(j);
      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
          if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
            yield j;
            break loop;
          }
        }
      }
    }
  }
  _cell(i) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i];
    if (e0 === -1) return null;
    const points = [];
    let e = e0;
    do {
      const t = Math.floor(e / 3);
      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i) break;
      e = halfedges[e];
    } while (e !== e0 && e !== -1);
    return points;
  }
  _clip(i) {
    if (i === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points = this._cell(i);
    if (points === null) return null;
    const { vectors: V } = this;
    const v2 = i * 4;
    return this._simplify(V[v2] || V[v2 + 1] ? this._clipInfinite(i, points, V[v2], V[v2 + 1], V[v2 + 2], V[v2 + 3]) : this._clipFinite(i, points));
  }
  _clipFinite(i, points) {
    const n = points.length;
    let P = null;
    let x03, y03, x12 = points[n - 2], y12 = points[n - 1];
    let c0, c1 = this._regioncode(x12, y12);
    let e0, e1 = 0;
    for (let j = 0; j < n; j += 2) {
      x03 = x12, y03 = y12, x12 = points[j], y12 = points[j + 1];
      c0 = c1, c1 = this._regioncode(x12, y12);
      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P) P.push(x12, y12);
        else P = [x12, y12];
      } else {
        let S, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S = this._clipSegment(x03, y03, x12, y12, c0, c1)) === null) continue;
          [sx0, sy0, sx1, sy1] = S;
        } else {
          if ((S = this._clipSegment(x12, y12, x03, y03, c1, c0)) === null) continue;
          [sx1, sy1, sx0, sy0] = S;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
          if (P) P.push(sx0, sy0);
          else P = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        if (P) P.push(sx1, sy1);
        else P = [sx1, sy1];
      }
    }
    if (P) {
      e0 = e1, e1 = this._edgecode(P[0], P[1]);
      if (e0 && e1) this._edge(i, e0, e1, P, P.length);
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P;
  }
  _clipSegment(x03, y03, x12, y12, c0, c1) {
    const flip2 = c0 < c1;
    if (flip2) [x03, y03, x12, y12, c0, c1] = [x12, y12, x03, y03, c1, c0];
    while (true) {
      if (c0 === 0 && c1 === 0) return flip2 ? [x12, y12, x03, y03] : [x03, y03, x12, y12];
      if (c0 & c1) return null;
      let x, y, c3 = c0 || c1;
      if (c3 & 8) x = x03 + (x12 - x03) * (this.ymax - y03) / (y12 - y03), y = this.ymax;
      else if (c3 & 4) x = x03 + (x12 - x03) * (this.ymin - y03) / (y12 - y03), y = this.ymin;
      else if (c3 & 2) y = y03 + (y12 - y03) * (this.xmax - x03) / (x12 - x03), x = this.xmax;
      else y = y03 + (y12 - y03) * (this.xmin - x03) / (x12 - x03), x = this.xmin;
      if (c0) x03 = x, y03 = y, c0 = this._regioncode(x03, y03);
      else x12 = x, y12 = y, c1 = this._regioncode(x12, y12);
    }
  }
  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
    let P = Array.from(points), p;
    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
    if (P = this._clipFinite(i, P)) {
      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
      }
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P;
  }
  _edge(i, e0, e1, P, j) {
    while (e0 !== e1) {
      let x, y;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        case 4:
          e0 = 6, x = this.xmax, y = this.ymin;
          break;
        case 6:
          e0 = 2;
          continue;
        case 2:
          e0 = 10, x = this.xmax, y = this.ymax;
          break;
        case 10:
          e0 = 8;
          continue;
        case 8:
          e0 = 9, x = this.xmin, y = this.ymax;
          break;
        case 9:
          e0 = 1;
          continue;
        case 1:
          e0 = 5, x = this.xmin, y = this.ymin;
          break;
      }
      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
        P.splice(j, 0, x, y), j += 2;
      }
    }
    return j;
  }
  _project(x03, y03, vx, vy) {
    let t = Infinity, c3, x, y;
    if (vy < 0) {
      if (y03 <= this.ymin) return null;
      if ((c3 = (this.ymin - y03) / vy) < t) y = this.ymin, x = x03 + (t = c3) * vx;
    } else if (vy > 0) {
      if (y03 >= this.ymax) return null;
      if ((c3 = (this.ymax - y03) / vy) < t) y = this.ymax, x = x03 + (t = c3) * vx;
    }
    if (vx > 0) {
      if (x03 >= this.xmax) return null;
      if ((c3 = (this.xmax - x03) / vx) < t) x = this.xmax, y = y03 + (t = c3) * vy;
    } else if (vx < 0) {
      if (x03 <= this.xmin) return null;
      if ((c3 = (this.xmin - x03) / vx) < t) x = this.xmin, y = y03 + (t = c3) * vy;
    }
    return [x, y];
  }
  _edgecode(x, y) {
    return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
  }
  _regioncode(x, y) {
    return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
  }
  _simplify(P) {
    if (P && P.length > 4) {
      for (let i = 0; i < P.length; i += 2) {
        const j = (i + 2) % P.length, k = (i + 4) % P.length;
        if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) {
          P.splice(j, 2), i -= 2;
        }
      }
      if (!P.length) P = null;
    }
    return P;
  }
};

// node_modules/d3-delaunay/src/delaunay.js
var tau2 = 2 * Math.PI;
var pow3 = Math.pow;
function pointX(p) {
  return p[0];
}
function pointY(p) {
  return p[1];
}
function collinear(d) {
  const { triangles, coords } = d;
  for (let i = 0; i < triangles.length; i += 3) {
    const a = 2 * triangles[i], b = 2 * triangles[i + 1], c3 = 2 * triangles[i + 2], cross2 = (coords[c3] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c3 + 1] - coords[a + 1]);
    if (cross2 > 1e-10) return false;
  }
  return true;
}
function jitter(x, y, r) {
  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
}
var Delaunay = class _Delaunay {
  static from(points, fx = pointX, fy = pointY, that) {
    return new _Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
  }
  constructor(points) {
    this._delaunator = new Delaunator(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d = this._delaunator, points = this.points;
    if (d.hull && d.hull.length > 2 && collinear(d)) {
      this.collinear = Int32Array.from({ length: points.length / 2 }, (_, i) => i).sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]);
      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
      for (let i = 0, n = points.length / 2; i < n; ++i) {
        const p = jitter(points[2 * i], points[2 * i + 1], r);
        points[2 * i] = p[0];
        points[2 * i + 1] = p[1];
      }
      this._delaunator = new Delaunator(points);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e = 0, n = halfedges.length; e < n; ++e) {
      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
    }
    for (let i = 0, n = hull.length; i < n; ++i) {
      hullIndex[hull[i]] = i;
    }
    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      inedges[hull[0]] = 1;
      if (hull.length === 2) {
        inedges[hull[1]] = 0;
        this.triangles[1] = hull[1];
        this.triangles[2] = hull[1];
      }
    }
  }
  voronoi(bounds) {
    return new Voronoi(this, bounds);
  }
  *neighbors(i) {
    const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
    if (collinear2) {
      const l = collinear2.indexOf(i);
      if (l > 0) yield collinear2[l - 1];
      if (l < collinear2.length - 1) yield collinear2[l + 1];
      return;
    }
    const e0 = inedges[i];
    if (e0 === -1) return;
    let e = e0, p02 = -1;
    do {
      yield p02 = triangles[e];
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i) return;
      e = halfedges[e];
      if (e === -1) {
        const p = hull[(_hullIndex[i] + 1) % hull.length];
        if (p !== p02) yield p;
        return;
      }
    } while (e !== e0);
  }
  find(x, y, i = 0) {
    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
    const i0 = i;
    let c3;
    while ((c3 = this._step(i, x, y)) >= 0 && c3 !== i && c3 !== i0) i = c3;
    return c3;
  }
  _step(i, x, y) {
    const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
    let c3 = i;
    let dc = pow3(x - points[i * 2], 2) + pow3(y - points[i * 2 + 1], 2);
    const e0 = inedges[i];
    let e = e0;
    do {
      let t = triangles[e];
      const dt = pow3(x - points[t * 2], 2) + pow3(y - points[t * 2 + 1], 2);
      if (dt < dc) dc = dt, c3 = t;
      e = e % 3 === 2 ? e - 2 : e + 1;
      if (triangles[e] !== i) break;
      e = halfedges[e];
      if (e === -1) {
        e = hull[(_hullIndex[i] + 1) % hull.length];
        if (e !== t) {
          if (pow3(x - points[e * 2], 2) + pow3(y - points[e * 2 + 1], 2) < dc) return e;
        }
        break;
      }
    } while (e !== e0);
    return c3;
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, halfedges, triangles } = this;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i) continue;
      const ti = triangles[i] * 2;
      const tj = triangles[j] * 2;
      context.moveTo(points[ti], points[ti + 1]);
      context.lineTo(points[tj], points[tj + 1]);
    }
    this.renderHull(context);
    return buffer && buffer.value();
  }
  renderPoints(context, r) {
    if (r === void 0 && (!context || typeof context.moveTo !== "function")) r = context, context = null;
    r = r == void 0 ? 2 : +r;
    const buffer = context == null ? context = new Path() : void 0;
    const { points } = this;
    for (let i = 0, n = points.length; i < n; i += 2) {
      const x = points[i], y = points[i + 1];
      context.moveTo(x + r, y);
      context.arc(x, y, r, 0, tau2);
    }
    return buffer && buffer.value();
  }
  renderHull(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { hull, points } = this;
    const h = hull[0] * 2, n = hull.length;
    context.moveTo(points[h], points[h + 1]);
    for (let i = 1; i < n; ++i) {
      const h2 = 2 * hull[i];
      context.lineTo(points[h2], points[h2 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, triangles } = this;
    const t03 = triangles[i *= 3] * 2;
    const t13 = triangles[i + 1] * 2;
    const t22 = triangles[i + 2] * 2;
    context.moveTo(points[t03], points[t03 + 1]);
    context.lineTo(points[t13], points[t13 + 1]);
    context.lineTo(points[t22], points[t22 + 1]);
    context.closePath();
    return buffer && buffer.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i = 0, n = triangles.length / 3; i < n; ++i) {
      yield this.trianglePolygon(i);
    }
  }
  trianglePolygon(i) {
    const polygon = new Polygon();
    this.renderTriangle(i, polygon);
    return polygon.value();
  }
};
function flatArray(points, fx, fy, that) {
  const n = points.length;
  const array2 = new Float64Array(n * 2);
  for (let i = 0; i < n; ++i) {
    const p = points[i];
    array2[i * 2] = fx.call(that, p, i, points);
    array2[i * 2 + 1] = fy.call(that, p, i, points);
  }
  return array2;
}
function* flatIterable(points, fx, fy, that) {
  let i = 0;
  for (const p of points) {
    yield fx.call(that, p, i, points);
    yield fy.call(that, p, i, points);
    ++i;
  }
}

// node_modules/d3-geo-voronoi/src/math.js
var pi2 = Math.PI;
var halfPi2 = pi2 / 2;
var quarterPi2 = pi2 / 4;
var tau3 = pi2 * 2;
var degrees4 = 180 / pi2;
var radians3 = pi2 / 180;
var atan22 = Math.atan2;
var cos2 = Math.cos;
var max2 = Math.max;
var min2 = Math.min;
var sin2 = Math.sin;
var sign3 = Math.sign || function(x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt3 = Math.sqrt;
function asin2(x) {
  return x > 1 ? halfPi2 : x < -1 ? -halfPi2 : Math.asin(x);
}

// node_modules/d3-geo-voronoi/src/cartesian.js
function cartesianDot2(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cartesianCross2(a, b) {
  return [
    a[1] * b[2] - a[2] * b[1],
    a[2] * b[0] - a[0] * b[2],
    a[0] * b[1] - a[1] * b[0]
  ];
}
function cartesianAdd(a, b) {
  return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];
}
function cartesianNormalize(d) {
  var l = sqrt3(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  return [d[0] / l, d[1] / l, d[2] / l];
}

// node_modules/d3-geo-voronoi/src/delaunay.js
function spherical2(cartesian3) {
  return [
    atan22(cartesian3[1], cartesian3[0]) * degrees4,
    asin2(max2(-1, min2(1, cartesian3[2]))) * degrees4
  ];
}
function cartesian2(coordinates2) {
  const lambda = coordinates2[0] * radians3, phi = coordinates2[1] * radians3, cosphi = cos2(phi);
  return [cosphi * cos2(lambda), cosphi * sin2(lambda), sin2(phi)];
}
function excess(triangle) {
  triangle = triangle.map((p) => cartesian2(p));
  return cartesianDot2(triangle[0], cartesianCross2(triangle[2], triangle[1]));
}
function geoDelaunay(points) {
  const delaunay = geo_delaunay_from(points), triangles = geo_triangles(delaunay), edges = geo_edges(triangles, points), neighbors = geo_neighbors(triangles, points.length), find = geo_find(neighbors, points), circumcenters = geo_circumcenters(triangles, points), { polygons, centers } = geo_polygons(circumcenters, triangles, points), mesh = geo_mesh(polygons), hull = geo_hull(triangles, points), urquhart = geo_urquhart(edges, triangles);
  return {
    delaunay,
    edges,
    triangles,
    centers,
    neighbors,
    polygons,
    mesh,
    hull,
    urquhart,
    find
  };
}
function geo_find(neighbors, points) {
  function distance2(a, b) {
    let x = a[0] - b[0], y = a[1] - b[1], z = a[2] - b[2];
    return x * x + y * y + z * z;
  }
  return function find(x, y, next) {
    if (next === void 0) next = 0;
    let cell, dist2, found = next;
    const xyz = cartesian2([x, y]);
    do {
      cell = next;
      next = null;
      dist2 = distance2(xyz, cartesian2(points[cell]));
      neighbors[cell].forEach((i) => {
        let ndist = distance2(xyz, cartesian2(points[i]));
        if (ndist < dist2) {
          dist2 = ndist;
          next = i;
          found = i;
          return;
        }
      });
    } while (next !== null);
    return found;
  };
}
function geo_delaunay_from(points) {
  if (points.length < 2) return {};
  let pivot = 0;
  while (isNaN(points[pivot][0] + points[pivot][1]) && pivot++ < points.length) ;
  const r = rotation_default(points[pivot]), projection2 = stereographic_default().translate([0, 0]).scale(1).rotate(r.invert([180, 0]));
  points = points.map(projection2);
  const zeros = [];
  let max22 = 1;
  for (let i = 0, n = points.length; i < n; i++) {
    let m = points[i][0] ** 2 + points[i][1] ** 2;
    if (!isFinite(m) || m > 1e32) zeros.push(i);
    else if (m > max22) max22 = m;
  }
  const FAR = 1e6 * sqrt3(max22);
  zeros.forEach((i) => points[i] = [FAR, 0]);
  points.push([0, FAR]);
  points.push([-FAR, 0]);
  points.push([0, -FAR]);
  const delaunay = Delaunay.from(points);
  delaunay.projection = projection2;
  const { triangles, halfedges, inedges } = delaunay;
  const degenerate = [];
  for (let i = 0, l = halfedges.length; i < l; i++) {
    if (halfedges[i] < 0) {
      const j = i % 3 == 2 ? i - 2 : i + 1;
      const k = i % 3 == 0 ? i + 2 : i - 1;
      const a = halfedges[j];
      const b = halfedges[k];
      halfedges[a] = b;
      halfedges[b] = a;
      halfedges[j] = halfedges[k] = -1;
      triangles[i] = triangles[j] = triangles[k] = pivot;
      inedges[triangles[a]] = a % 3 == 0 ? a + 2 : a - 1;
      inedges[triangles[b]] = b % 3 == 0 ? b + 2 : b - 1;
      degenerate.push(Math.min(i, j, k));
      i += 2 - i % 3;
    } else if (triangles[i] > points.length - 3 - 1) {
      triangles[i] = pivot;
    }
  }
  return delaunay;
}
function geo_edges(triangles, points) {
  const _index = /* @__PURE__ */ new Set();
  if (points.length === 2) return [[0, 1]];
  triangles.forEach((tri) => {
    if (tri[0] === tri[1]) return;
    if (excess(tri.map((i) => points[i])) < 0) return;
    for (let i = 0, j; i < 3; i++) {
      j = (i + 1) % 3;
      _index.add(extent([tri[i], tri[j]]).join("-"));
    }
  });
  return Array.from(_index, (d) => d.split("-").map(Number));
}
function geo_triangles(delaunay) {
  const { triangles } = delaunay;
  if (!triangles) return [];
  const geo_triangles2 = [];
  for (let i = 0, n = triangles.length / 3; i < n; i++) {
    const a = triangles[3 * i], b = triangles[3 * i + 1], c3 = triangles[3 * i + 2];
    if (a !== b && b !== c3) {
      geo_triangles2.push([a, c3, b]);
    }
  }
  return geo_triangles2;
}
function geo_circumcenters(triangles, points) {
  return triangles.map((tri) => {
    const c3 = tri.map((i) => points[i]).map(cartesian2), V = cartesianAdd(
      cartesianAdd(cartesianCross2(c3[1], c3[0]), cartesianCross2(c3[2], c3[1])),
      cartesianCross2(c3[0], c3[2])
    );
    return spherical2(cartesianNormalize(V));
  });
}
function geo_neighbors(triangles, npoints) {
  const neighbors = [];
  triangles.forEach((tri) => {
    for (let j = 0; j < 3; j++) {
      const a = tri[j], b = tri[(j + 1) % 3];
      neighbors[a] = neighbors[a] || [];
      neighbors[a].push(b);
    }
  });
  if (triangles.length === 0) {
    if (npoints === 2) neighbors[0] = [1], neighbors[1] = [0];
    else if (npoints === 1) neighbors[0] = [];
  }
  return neighbors;
}
function geo_polygons(circumcenters, triangles, points) {
  const polygons = [];
  const centers = circumcenters.slice();
  if (triangles.length === 0) {
    if (points.length < 2) return { polygons, centers };
    if (points.length === 2) {
      const a = cartesian2(points[0]), b = cartesian2(points[1]), m = cartesianNormalize(cartesianAdd(a, b)), d = cartesianNormalize(cartesianCross2(a, b)), c3 = cartesianCross2(m, d);
      const poly = [
        m,
        cartesianCross2(m, c3),
        cartesianCross2(cartesianCross2(m, c3), c3),
        cartesianCross2(cartesianCross2(cartesianCross2(m, c3), c3), c3)
      ].map(spherical2).map(supplement);
      return polygons.push(poly), polygons.push(poly.slice().reverse()), { polygons, centers };
    }
  }
  triangles.forEach((tri, t) => {
    for (let j = 0; j < 3; j++) {
      const a = tri[j], b = tri[(j + 1) % 3], c3 = tri[(j + 2) % 3];
      polygons[a] = polygons[a] || [];
      polygons[a].push([b, c3, t, [a, b, c3]]);
    }
  });
  const reordered = polygons.map((poly) => {
    const p = [poly[0][2]];
    let k = poly[0][1];
    for (let i = 1; i < poly.length; i++) {
      for (let j = 0; j < poly.length; j++) {
        if (poly[j][0] == k) {
          k = poly[j][1];
          p.push(poly[j][2]);
          break;
        }
      }
    }
    if (p.length > 2) {
      return p;
    } else if (p.length == 2) {
      const R0 = o_midpoint(
        points[poly[0][3][0]],
        points[poly[0][3][1]],
        centers[p[0]]
      ), R1 = o_midpoint(
        points[poly[0][3][2]],
        points[poly[0][3][0]],
        centers[p[0]]
      );
      const i0 = supplement(R0), i1 = supplement(R1);
      return [p[0], i1, p[1], i0];
    }
  });
  function supplement(point2) {
    let f = -1;
    centers.slice(triangles.length, Infinity).forEach((p, i) => {
      if (p[0] === point2[0] && p[1] === point2[1]) f = i + triangles.length;
    });
    if (f < 0) f = centers.length, centers.push(point2);
    return f;
  }
  return { polygons: reordered, centers };
}
function o_midpoint(a, b, c3) {
  a = cartesian2(a);
  b = cartesian2(b);
  c3 = cartesian2(c3);
  const s = sign3(cartesianDot2(cartesianCross2(b, a), c3));
  return spherical2(cartesianNormalize(cartesianAdd(a, b)).map((d) => s * d));
}
function geo_mesh(polygons) {
  const mesh = [];
  polygons.forEach((poly) => {
    if (!poly) return;
    let p = poly[poly.length - 1];
    for (let q of poly) {
      if (q > p) mesh.push([p, q]);
      p = q;
    }
  });
  return mesh;
}
function geo_urquhart(edges, triangles) {
  return function(distances) {
    const _lengths = /* @__PURE__ */ new Map(), _urquhart = /* @__PURE__ */ new Map();
    edges.forEach((edge, i) => {
      const u4 = edge.join("-");
      _lengths.set(u4, distances[i]);
      _urquhart.set(u4, true);
    });
    triangles.forEach((tri) => {
      let l = 0, remove2 = -1;
      for (let j = 0; j < 3; j++) {
        let u4 = extent([tri[j], tri[(j + 1) % 3]]).join("-");
        if (_lengths.get(u4) > l) {
          l = _lengths.get(u4);
          remove2 = u4;
        }
      }
      _urquhart.set(remove2, false);
    });
    return edges.map((edge) => _urquhart.get(edge.join("-")));
  };
}
function geo_hull(triangles, points) {
  const _hull = /* @__PURE__ */ new Set(), hull = [];
  triangles.map((tri) => {
    if (excess(tri.map((i) => points[i > points.length ? 0 : i])) > 1e-12)
      return;
    for (let i = 0; i < 3; i++) {
      let e = [tri[i], tri[(i + 1) % 3]], code = `${e[0]}-${e[1]}`;
      if (_hull.has(code)) _hull.delete(code);
      else _hull.add(`${e[1]}-${e[0]}`);
    }
  });
  const _index = /* @__PURE__ */ new Map();
  let start;
  _hull.forEach((e) => {
    e = e.split("-").map(Number);
    _index.set(e[0], e[1]);
    start = e[0];
  });
  if (start === void 0) return hull;
  let next = start;
  do {
    hull.push(next);
    let n = _index.get(next);
    _index.set(next, -1);
    next = n;
  } while (next > -1 && next !== start);
  return hull;
}

// node_modules/d3-geo-voronoi/src/voronoi.js
function geoVoronoi(data) {
  const v2 = function(data2) {
    v2.delaunay = null;
    v2._data = data2;
    if (typeof v2._data === "object" && v2._data.type === "FeatureCollection") {
      v2._data = v2._data.features;
    }
    if (typeof v2._data === "object") {
      const temp = v2._data.map((d) => [v2._vx(d), v2._vy(d), d]).filter((d) => isFinite(d[0] + d[1]));
      v2.points = temp.map((d) => [d[0], d[1]]);
      v2.valid = temp.map((d) => d[2]);
      v2.delaunay = geoDelaunay(v2.points);
    }
    return v2;
  };
  v2._vx = function(d) {
    if (typeof d == "object" && "type" in d) {
      return centroid_default(d)[0];
    }
    if (0 in d) return d[0];
  };
  v2._vy = function(d) {
    if (typeof d == "object" && "type" in d) {
      return centroid_default(d)[1];
    }
    if (1 in d) return d[1];
  };
  v2.x = function(f) {
    if (!f) return v2._vx;
    v2._vx = f;
    return v2;
  };
  v2.y = function(f) {
    if (!f) return v2._vy;
    v2._vy = f;
    return v2;
  };
  v2.polygons = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay) return false;
    const coll = {
      type: "FeatureCollection",
      features: []
    };
    if (v2.valid.length === 0) return coll;
    v2.delaunay.polygons.forEach(
      (poly, i) => coll.features.push({
        type: "Feature",
        geometry: !poly ? null : {
          type: "Polygon",
          coordinates: [
            [...poly, poly[0]].map((i2) => v2.delaunay.centers[i2])
          ]
        },
        properties: {
          site: v2.valid[i],
          sitecoordinates: v2.points[i],
          neighbours: v2.delaunay.neighbors[i]
          // not part of the public API
        }
      })
    );
    if (v2.valid.length === 1)
      coll.features.push({
        type: "Feature",
        geometry: { type: "Sphere" },
        properties: {
          site: v2.valid[0],
          sitecoordinates: v2.points[0],
          neighbours: []
        }
      });
    return coll;
  };
  v2.triangles = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay) return false;
    return {
      type: "FeatureCollection",
      features: v2.delaunay.triangles.map((tri, index5) => {
        tri = tri.map((i) => v2.points[i]);
        tri.center = v2.delaunay.centers[index5];
        return tri;
      }).filter((tri) => excess(tri) > 0).map((tri) => ({
        type: "Feature",
        properties: {
          circumcenter: tri.center
        },
        geometry: {
          type: "Polygon",
          coordinates: [[...tri, tri[0]]]
        }
      }))
    };
  };
  v2.links = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay) return false;
    const _distances = v2.delaunay.edges.map(
      (e) => distance_default(v2.points[e[0]], v2.points[e[1]])
    ), _urquart = v2.delaunay.urquhart(_distances);
    return {
      type: "FeatureCollection",
      features: v2.delaunay.edges.map((e, i) => ({
        type: "Feature",
        properties: {
          source: v2.valid[e[0]],
          target: v2.valid[e[1]],
          length: _distances[i],
          urquhart: !!_urquart[i]
        },
        geometry: {
          type: "LineString",
          coordinates: [v2.points[e[0]], v2.points[e[1]]]
        }
      }))
    };
  };
  v2.mesh = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay) return false;
    return {
      type: "MultiLineString",
      coordinates: v2.delaunay.edges.map((e) => [
        v2.points[e[0]],
        v2.points[e[1]]
      ])
    };
  };
  v2.cellMesh = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    if (!v2.delaunay) return false;
    const { centers, polygons } = v2.delaunay;
    const coordinates2 = [];
    for (const p of polygons) {
      if (!p) continue;
      for (let n = p.length, p02 = p[n - 1], p1 = p[0], i = 0; i < n; p02 = p1, p1 = p[++i]) {
        if (p1 > p02) {
          coordinates2.push([centers[p02], centers[p1]]);
        }
      }
    }
    return {
      type: "MultiLineString",
      coordinates: coordinates2
    };
  };
  v2._found = void 0;
  v2.find = function(x, y, radius) {
    v2._found = v2.delaunay.find(x, y, v2._found);
    if (!radius || distance_default([x, y], v2.points[v2._found]) < radius)
      return v2._found;
  };
  v2.hull = function(data2) {
    if (data2 !== void 0) {
      v2(data2);
    }
    const hull = v2.delaunay.hull, points = v2.points;
    return hull.length === 0 ? null : {
      type: "Polygon",
      coordinates: [[...hull.map((i) => points[i]), points[hull[0]]]]
    };
  };
  return data ? v2(data) : v2;
}

// node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.mjs
function _arrayLikeToArray5(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithHoles5(r) {
  if (Array.isArray(r)) return r;
}
function _arrayWithoutHoles3(r) {
  if (Array.isArray(r)) return _arrayLikeToArray5(r);
}
function _assertThisInitialized2(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _callSuper2(t, o, e) {
  return o = _getPrototypeOf2(o), _possibleConstructorReturn2(t, _isNativeReflectConstruct2() ? Reflect.construct(o, [], _getPrototypeOf2(t).constructor) : o.apply(t, e));
}
function _classCallCheck3(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _createClass3(e, r, t) {
  return Object.defineProperty(e, "prototype", {
    writable: false
  }), e;
}
function _getPrototypeOf2(t) {
  return _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
    return t4.__proto__ || Object.getPrototypeOf(t4);
  }, _getPrototypeOf2(t);
}
function _inherits2(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t, "prototype", {
    writable: false
  }), e && _setPrototypeOf2(t, e);
}
function _isNativeReflectConstruct2() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t4) {
  }
  return (_isNativeReflectConstruct2 = function() {
    return !!t;
  })();
}
function _iterableToArray3(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _iterableToArrayLimit5(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u4, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) ;
      else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t.return && (u4 = t.return(), Object(u4) !== u4)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn2(t, e) {
  if (e && ("object" == typeof e || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized2(t);
}
function _setPrototypeOf2(t, e) {
  return _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e3) {
    return t4.__proto__ = e3, t4;
  }, _setPrototypeOf2(t, e);
}
function _slicedToArray5(r, e) {
  return _arrayWithHoles5(r) || _iterableToArrayLimit5(r, e) || _unsupportedIterableToArray5(r, e) || _nonIterableRest5();
}
function _toConsumableArray3(r) {
  return _arrayWithoutHoles3(r) || _iterableToArray3(r) || _unsupportedIterableToArray5(r) || _nonIterableSpread3();
}
function _unsupportedIterableToArray5(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray5(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray5(r, a) : void 0;
  }
}
function geoPolygonTriangulate(polygon) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$resolution = _ref.resolution, resolution2 = _ref$resolution === void 0 ? Infinity : _ref$resolution;
  var contour = interpolateContourPoints(polygon, resolution2);
  var edgePoints = merge(contour);
  var innerPoints = getInnerGeoPoints(polygon, resolution2);
  var points = [].concat(_toConsumableArray3(edgePoints), _toConsumableArray3(innerPoints));
  var boundariesGeojson = {
    type: "Polygon",
    coordinates: polygon
  };
  var _geoBounds = bounds_default(boundariesGeojson), _geoBounds2 = _slicedToArray5(_geoBounds, 2), _geoBounds2$ = _slicedToArray5(_geoBounds2[0], 2), minLng = _geoBounds2$[0], minLat = _geoBounds2$[1], _geoBounds2$2 = _slicedToArray5(_geoBounds2[1], 2), maxLng = _geoBounds2$2[0], maxLat = _geoBounds2$2[1];
  var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;
  var indices = [];
  if (crossesPoleOrAntimeridian) {
    var vt = geoVoronoi(points).triangles();
    var pntMap = new Map(points.map(function(_ref2, idx) {
      var _ref3 = _slicedToArray5(_ref2, 2), lng = _ref3[0], lat = _ref3[1];
      return ["".concat(lng, "-").concat(lat), idx];
    }));
    vt.features.forEach(function(f) {
      var _indices;
      var triangle = f.geometry.coordinates[0].slice(0, 3).reverse();
      var inds = [];
      triangle.forEach(function(_ref4) {
        var _ref5 = _slicedToArray5(_ref4, 2), lng = _ref5[0], lat = _ref5[1];
        var k = "".concat(lng, "-").concat(lat);
        pntMap.has(k) && inds.push(pntMap.get(k));
      });
      if (inds.length !== 3) return;
      if (inds.some(function(ind) {
        return ind < edgePoints.length;
      })) {
        var triangleCentroid = f.properties.circumcenter;
        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian)) return;
      }
      (_indices = indices).push.apply(_indices, inds);
    });
  } else if (!innerPoints.length) {
    var _earcutFlatten = flatten(contour), vertices = _earcutFlatten.vertices, _earcutFlatten$holes = _earcutFlatten.holes, holes = _earcutFlatten$holes === void 0 ? [] : _earcutFlatten$holes;
    indices = earcut(vertices, holes, 2);
  } else {
    var delaunay = Delaunator.from(points);
    var _loop = function _loop2(i2) {
      var _indices2;
      var inds = [2, 1, 0].map(function(idx) {
        return delaunay.triangles[i2 + idx];
      });
      var triangle = inds.map(function(indice) {
        return points[indice];
      });
      if (inds.some(function(ind) {
        return ind < edgePoints.length;
      })) {
        var triangleCentroid = [0, 1].map(function(coordIdx) {
          return mean(triangle, function(p) {
            return p[coordIdx];
          });
        });
        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian)) return 1;
      }
      (_indices2 = indices).push.apply(_indices2, _toConsumableArray3(inds));
    };
    for (var i = 0, len = delaunay.triangles.length; i < len; i += 3) {
      if (_loop(i)) continue;
    }
  }
  var lngUvScale = linear2(extent(points, function(d) {
    return d[0];
  }), [0, 1]);
  var latUvScale = linear2(extent(points, function(d) {
    return d[1];
  }), [0, 1]);
  var uvs = points.map(function(_ref6) {
    var _ref7 = _slicedToArray5(_ref6, 2), lng = _ref7[0], lat = _ref7[1];
    return [lngUvScale(lng), latUvScale(lat)];
  });
  var triangles = {
    points,
    indices,
    uvs
  };
  return {
    contour,
    triangles
  };
}
function interpolateContourPoints(polygon, maxDistance) {
  return polygon.map(function(coords) {
    var pnts = [];
    var prevPnt;
    coords.forEach(function(pnt) {
      if (prevPnt) {
        var dist2 = distance_default(pnt, prevPnt) * 180 / Math.PI;
        if (dist2 > maxDistance) {
          var interpol = interpolate_default(prevPnt, pnt);
          var tStep = 1 / Math.ceil(dist2 / maxDistance);
          var t = tStep;
          while (t < 1) {
            pnts.push(interpol(t));
            t += tStep;
          }
        }
      }
      pnts.push(prevPnt = pnt);
    });
    return pnts;
  });
}
function getInnerGeoPoints(polygon, maxDistance) {
  var boundariesGeojson = {
    type: "Polygon",
    coordinates: polygon
  };
  var _geoBounds3 = bounds_default(boundariesGeojson), _geoBounds4 = _slicedToArray5(_geoBounds3, 2), _geoBounds4$ = _slicedToArray5(_geoBounds4[0], 2), minLng = _geoBounds4$[0], minLat = _geoBounds4$[1], _geoBounds4$2 = _slicedToArray5(_geoBounds4[1], 2), maxLng = _geoBounds4$2[0], maxLat = _geoBounds4$2[1];
  if (Math.min(Math.abs(maxLng - minLng), Math.abs(maxLat - minLat)) < maxDistance) return [];
  var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;
  return getGeoSpiralGrid(maxDistance, {
    minLng,
    maxLng,
    minLat,
    maxLat
  }).filter(function(pnt) {
    return pointInside(pnt, boundariesGeojson, crossesPoleOrAntimeridian);
  });
}
function getGeoSpiralGrid(distanceBetweenPoints) {
  var _ref8 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, minLng = _ref8.minLng, maxLng = _ref8.maxLng, minLat = _ref8.minLat, maxLat = _ref8.maxLat;
  var numPoints = Math.round(Math.pow(360 / distanceBetweenPoints, 2) / Math.PI);
  var phi = (1 + Math.sqrt(5)) / 2;
  var getPntLng = function getPntLng2(idx) {
    return idx / phi * 360 % 360 - 180;
  };
  var getPntLat = function getPntLat2(idx) {
    return Math.acos(2 * idx / numPoints - 1) / Math.PI * 180 - 90;
  };
  var getPntIdx = function getPntIdx2(lat) {
    return numPoints * (Math.cos((lat + 90) * Math.PI / 180) + 1) / 2;
  };
  var pntIdxRange = [maxLat !== void 0 ? Math.ceil(getPntIdx(maxLat)) : 0, minLat !== void 0 ? Math.floor(getPntIdx(minLat)) : numPoints - 1];
  var isLngInRange = minLng === void 0 && maxLng === void 0 ? function() {
    return true;
  } : minLng === void 0 ? function(lng2) {
    return lng2 <= maxLng;
  } : maxLng === void 0 ? function(lng2) {
    return lng2 >= minLng;
  } : maxLng >= minLng ? function(lng2) {
    return lng2 >= minLng && lng2 <= maxLng;
  } : function(lng2) {
    return lng2 >= minLng || lng2 <= maxLng;
  };
  var pnts = [];
  for (var i = pntIdxRange[0]; i <= pntIdxRange[1]; i++) {
    var lng = getPntLng(i);
    isLngInRange(lng) && pnts.push([lng, getPntLat(i)]);
  }
  return pnts;
}
function pointInside(pnt, polygon) {
  var crossesPoleOrAntimeridian = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  return crossesPoleOrAntimeridian ? contains_default(polygon, pnt) : turf_boolean_point_in_polygon_default(pnt, polygon);
}
var THREE2 = window.THREE ? window.THREE : {
  BufferGeometry,
  Float32BufferAttribute
};
var setAttributeFn2 = new THREE2.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var ConicPolygonBufferGeometry = function(_THREE$BufferGeometry) {
  function ConicPolygonBufferGeometry2(polygonGeoJson, startHeight, endHeight, closedBottom, closedTop, includeSides, curvatureResolution) {
    var _this;
    _classCallCheck3(this, ConicPolygonBufferGeometry2);
    _this = _callSuper2(this, ConicPolygonBufferGeometry2);
    _this.type = "ConicPolygonBufferGeometry";
    _this.parameters = {
      polygonGeoJson,
      startHeight,
      endHeight,
      closedBottom,
      closedTop,
      includeSides,
      curvatureResolution
    };
    startHeight = startHeight || 0;
    endHeight = endHeight || 1;
    closedBottom = closedBottom !== void 0 ? closedBottom : true;
    closedTop = closedTop !== void 0 ? closedTop : true;
    includeSides = includeSides !== void 0 ? includeSides : true;
    curvatureResolution = curvatureResolution || 5;
    var _geoPolygonTriangulat = geoPolygonTriangulate(polygonGeoJson, {
      resolution: curvatureResolution
    }), contour = _geoPolygonTriangulat.contour, triangles = _geoPolygonTriangulat.triangles;
    var flatUvs = merge(triangles.uvs);
    var vertices = [];
    var uvs = [];
    var indices = [];
    var groupCnt = 0;
    var addGroup = function addGroup2(groupData) {
      var prevVertCnt = Math.round(vertices.length / 3);
      var prevIndCnt = indices.length;
      vertices = vertices.concat(groupData.vertices);
      uvs = uvs.concat(groupData.uvs);
      indices = indices.concat(!prevVertCnt ? groupData.indices : groupData.indices.map(function(ind) {
        return ind + prevVertCnt;
      }));
      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);
    };
    includeSides && addGroup(generateTorso());
    closedBottom && addGroup(generateCap(startHeight, false));
    closedTop && addGroup(generateCap(endHeight, true));
    _this.setIndex(indices);
    _this[setAttributeFn2]("position", new THREE2.Float32BufferAttribute(vertices, 3));
    _this[setAttributeFn2]("uv", new THREE2.Float32BufferAttribute(uvs, 2));
    _this.computeVertexNormals();
    function generateVertices(polygon, altitude) {
      var coords3d = polygon.map(function(coords) {
        return coords.map(function(_ref) {
          var _ref2 = _slicedToArray5(_ref, 2), lng = _ref2[0], lat = _ref2[1];
          return polar2Cartesian2(lat, lng, altitude);
        });
      });
      return flatten(coords3d);
    }
    function generateTorso() {
      var _generateVertices = generateVertices(contour, startHeight), bottomVerts = _generateVertices.vertices, holes = _generateVertices.holes;
      var _generateVertices2 = generateVertices(contour, endHeight), topVerts = _generateVertices2.vertices;
      var vertices2 = merge([topVerts, bottomVerts]);
      var numPoints = Math.round(topVerts.length / 3);
      var holesIdx = new Set(holes);
      var lastHoleIdx = 0;
      var indices2 = [];
      for (var v0Idx = 0; v0Idx < numPoints; v0Idx++) {
        var v1Idx = v0Idx + 1;
        if (v1Idx === numPoints) {
          v1Idx = lastHoleIdx;
        } else if (holesIdx.has(v1Idx)) {
          var holeIdx = v1Idx;
          v1Idx = lastHoleIdx;
          lastHoleIdx = holeIdx;
        }
        indices2.push(v0Idx, v0Idx + numPoints, v1Idx + numPoints);
        indices2.push(v1Idx + numPoints, v1Idx, v0Idx);
      }
      var uvs2 = [];
      for (var v2 = 1; v2 >= 0; v2--) for (var i = 0; i < numPoints; i += 1) uvs2.push(i / (numPoints - 1), v2);
      return {
        indices: indices2,
        vertices: vertices2,
        uvs: uvs2
      };
    }
    function generateCap(radius) {
      var isTop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return {
        // need to reverse-wind the bottom triangles to make them face outwards
        indices: isTop ? triangles.indices : triangles.indices.slice().reverse(),
        vertices: generateVertices([triangles.points], radius).vertices,
        uvs: flatUvs
      };
    }
    return _this;
  }
  _inherits2(ConicPolygonBufferGeometry2, _THREE$BufferGeometry);
  return _createClass3(ConicPolygonBufferGeometry2);
}(THREE2.BufferGeometry);
function polar2Cartesian2(lat, lng) {
  var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  return [
    r * Math.sin(phi) * Math.cos(theta),
    // x
    r * Math.cos(phi),
    // y
    r * Math.sin(phi) * Math.sin(theta)
    // z
  ];
}

// node_modules/h3-js/dist/browser/h3-js.es.js
var libh3 = function(libh32) {
  libh32 = libh32 || {};
  var Module = typeof libh32 !== "undefined" ? libh32 : {};
  var moduleOverrides = {};
  var key;
  for (key in Module) {
    if (Module.hasOwnProperty(key)) {
      moduleOverrides[key] = Module[key];
    }
  }
  var arguments_ = [];
  var scriptDirectory = "";
  function locateFile(path) {
    if (Module["locateFile"]) {
      return Module["locateFile"](path, scriptDirectory);
    }
    return scriptDirectory + path;
  }
  var readAsync;
  {
    if (typeof document !== "undefined" && document.currentScript) {
      scriptDirectory = document.currentScript.src;
    }
    if (scriptDirectory.indexOf("blob:") !== 0) {
      scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
    } else {
      scriptDirectory = "";
    }
    readAsync = function readAsync2(url, onload, onerror) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", url, true);
      xhr.responseType = "arraybuffer";
      xhr.onload = function xhr_onload() {
        if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
          onload(xhr.response);
          return;
        }
        var data = tryParseAsDataURI(url);
        if (data) {
          onload(data.buffer);
          return;
        }
        onerror();
      };
      xhr.onerror = onerror;
      xhr.send(null);
    };
  }
  var out = Module["print"] || console.log.bind(console);
  var err = Module["printErr"] || console.warn.bind(console);
  for (key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
      Module[key] = moduleOverrides[key];
    }
  }
  moduleOverrides = null;
  if (Module["arguments"]) {
    arguments_ = Module["arguments"];
  }
  var tempRet0 = 0;
  var setTempRet0 = function(value) {
    tempRet0 = value;
  };
  var getTempRet0 = function() {
    return tempRet0;
  };
  var GLOBAL_BASE = 8;
  function setValue(ptr, value, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") {
      type = "i32";
    }
    switch (type) {
      case "i1":
        HEAP8[ptr >> 0] = value;
        break;
      case "i8":
        HEAP8[ptr >> 0] = value;
        break;
      case "i16":
        HEAP16[ptr >> 1] = value;
        break;
      case "i32":
        HEAP32[ptr >> 2] = value;
        break;
      case "i64":
        tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
        break;
      case "float":
        HEAPF32[ptr >> 2] = value;
        break;
      case "double":
        HEAPF64[ptr >> 3] = value;
        break;
      default:
        abort("invalid type for setValue: " + type);
    }
  }
  function getValue(ptr, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") {
      type = "i32";
    }
    switch (type) {
      case "i1":
        return HEAP8[ptr >> 0];
      case "i8":
        return HEAP8[ptr >> 0];
      case "i16":
        return HEAP16[ptr >> 1];
      case "i32":
        return HEAP32[ptr >> 2];
      case "i64":
        return HEAP32[ptr >> 2];
      case "float":
        return HEAPF32[ptr >> 2];
      case "double":
        return HEAPF64[ptr >> 3];
      default:
        abort("invalid type for getValue: " + type);
    }
    return null;
  }
  var ABORT = false;
  function assert(condition, text) {
    if (!condition) {
      abort("Assertion failed: " + text);
    }
  }
  function getCFunc(ident) {
    var func = Module["_" + ident];
    assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
    return func;
  }
  function ccall(ident, returnType, argTypes, args, opts) {
    var toC = {
      "string": function(str) {
        var ret2 = 0;
        if (str !== null && str !== void 0 && str !== 0) {
          var len = (str.length << 2) + 1;
          ret2 = stackAlloc(len);
          stringToUTF8(str, ret2, len);
        }
        return ret2;
      },
      "array": function(arr) {
        var ret2 = stackAlloc(arr.length);
        writeArrayToMemory(arr, ret2);
        return ret2;
      }
    };
    function convertReturnValue(ret2) {
      if (returnType === "string") {
        return UTF8ToString(ret2);
      }
      if (returnType === "boolean") {
        return Boolean(ret2);
      }
      return ret2;
    }
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) {
            stack = stackSave();
          }
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    ret = convertReturnValue(ret);
    if (stack !== 0) {
      stackRestore(stack);
    }
    return ret;
  }
  function cwrap(ident, returnType, argTypes, opts) {
    argTypes = argTypes || [];
    var numericArgs = argTypes.every(function(type) {
      return type === "number";
    });
    var numericRet = returnType !== "string";
    if (numericRet && numericArgs && !opts) {
      return getCFunc(ident);
    }
    return function() {
      return ccall(ident, returnType, argTypes, arguments, opts);
    };
  }
  var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
  function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
    var endIdx = idx + maxBytesToRead;
    var endPtr = idx;
    while (u8Array[endPtr] && !(endPtr >= endIdx)) {
      ++endPtr;
    }
    if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
      return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
    } else {
      var str = "";
      while (idx < endPtr) {
        var u0 = u8Array[idx++];
        if (!(u0 & 128)) {
          str += String.fromCharCode(u0);
          continue;
        }
        var u1 = u8Array[idx++] & 63;
        if ((u0 & 224) == 192) {
          str += String.fromCharCode((u0 & 31) << 6 | u1);
          continue;
        }
        var u22 = u8Array[idx++] & 63;
        if ((u0 & 240) == 224) {
          u0 = (u0 & 15) << 12 | u1 << 6 | u22;
        } else {
          u0 = (u0 & 7) << 18 | u1 << 12 | u22 << 6 | u8Array[idx++] & 63;
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
      }
    }
    return str;
  }
  function UTF8ToString(ptr, maxBytesToRead) {
    return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
  }
  function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0)) {
      return 0;
    }
    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1;
    for (var i = 0; i < str.length; ++i) {
      var u4 = str.charCodeAt(i);
      if (u4 >= 55296 && u4 <= 57343) {
        var u1 = str.charCodeAt(++i);
        u4 = 65536 + ((u4 & 1023) << 10) | u1 & 1023;
      }
      if (u4 <= 127) {
        if (outIdx >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = u4;
      } else if (u4 <= 2047) {
        if (outIdx + 1 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 192 | u4 >> 6;
        outU8Array[outIdx++] = 128 | u4 & 63;
      } else if (u4 <= 65535) {
        if (outIdx + 2 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 224 | u4 >> 12;
        outU8Array[outIdx++] = 128 | u4 >> 6 & 63;
        outU8Array[outIdx++] = 128 | u4 & 63;
      } else {
        if (outIdx + 3 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 240 | u4 >> 18;
        outU8Array[outIdx++] = 128 | u4 >> 12 & 63;
        outU8Array[outIdx++] = 128 | u4 >> 6 & 63;
        outU8Array[outIdx++] = 128 | u4 & 63;
      }
    }
    outU8Array[outIdx] = 0;
    return outIdx - startIdx;
  }
  function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
  }
  var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
  function writeArrayToMemory(array2, buffer2) {
    HEAP8.set(array2, buffer2);
  }
  function alignUp(x, multiple) {
    if (x % multiple > 0) {
      x += multiple - x % multiple;
    }
    return x;
  }
  var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
  function updateGlobalBufferAndViews(buf) {
    buffer = buf;
    Module["HEAP8"] = HEAP8 = new Int8Array(buf);
    Module["HEAP16"] = HEAP16 = new Int16Array(buf);
    Module["HEAP32"] = HEAP32 = new Int32Array(buf);
    Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
    Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
    Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
    Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
    Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
  }
  var DYNAMIC_BASE = 5267040, DYNAMICTOP_PTR = 24128;
  var INITIAL_TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 33554432;
  if (Module["buffer"]) {
    buffer = Module["buffer"];
  } else {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  INITIAL_TOTAL_MEMORY = buffer.byteLength;
  updateGlobalBufferAndViews(buffer);
  HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
  function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
      var callback = callbacks.shift();
      if (typeof callback == "function") {
        callback();
        continue;
      }
      var func = callback.func;
      if (typeof func === "number") {
        if (callback.arg === void 0) {
          Module["dynCall_v"](func);
        } else {
          Module["dynCall_vi"](func, callback.arg);
        }
      } else {
        func(callback.arg === void 0 ? null : callback.arg);
      }
    }
  }
  var __ATPRERUN__ = [];
  var __ATINIT__ = [];
  var __ATMAIN__ = [];
  var __ATPOSTRUN__ = [];
  function preRun() {
    if (Module["preRun"]) {
      if (typeof Module["preRun"] == "function") {
        Module["preRun"] = [Module["preRun"]];
      }
      while (Module["preRun"].length) {
        addOnPreRun(Module["preRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPRERUN__);
  }
  function initRuntime() {
    callRuntimeCallbacks(__ATINIT__);
  }
  function preMain() {
    callRuntimeCallbacks(__ATMAIN__);
  }
  function postRun() {
    if (Module["postRun"]) {
      if (typeof Module["postRun"] == "function") {
        Module["postRun"] = [Module["postRun"]];
      }
      while (Module["postRun"].length) {
        addOnPostRun(Module["postRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
  }
  function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
  }
  function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
  }
  var Math_abs = Math.abs;
  var Math_ceil = Math.ceil;
  var Math_floor = Math.floor;
  var Math_min = Math.min;
  var runDependencies = 0;
  var runDependencyWatcher = null;
  var dependenciesFulfilled = null;
  function addRunDependency(id) {
    runDependencies++;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
  }
  function removeRunDependency(id) {
    runDependencies--;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
    if (runDependencies == 0) {
      if (runDependencyWatcher !== null) {
        clearInterval(runDependencyWatcher);
        runDependencyWatcher = null;
      }
      if (dependenciesFulfilled) {
        var callback = dependenciesFulfilled;
        dependenciesFulfilled = null;
        callback();
      }
    }
  }
  Module["preloadedImages"] = {};
  Module["preloadedAudios"] = {};
  var memoryInitializer = null;
  var dataURIPrefix = "data:application/octet-stream;base64,";
  function isDataURI(filename) {
    return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
  }
  var tempDouble;
  var tempI64;
  memoryInitializer = "data:application/octet-stream;base64,";
  var tempDoublePtr = 24144;
  function demangle(func) {
    return func;
  }
  function demangleAll(text) {
    var regex = /\b__Z[\w\d_]+/g;
    return text.replace(regex, function(x) {
      var y = demangle(x);
      return x === y ? x : y + " [" + x + "]";
    });
  }
  function jsStackTrace() {
    var err2 = new Error();
    if (!err2.stack) {
      try {
        throw new Error(0);
      } catch (e) {
        err2 = e;
      }
      if (!err2.stack) {
        return "(no stack trace available)";
      }
    }
    return err2.stack.toString();
  }
  function stackTrace() {
    var js = jsStackTrace();
    if (Module["extraStackTrace"]) {
      js += "\n" + Module["extraStackTrace"]();
    }
    return demangleAll(js);
  }
  function ___assert_fail(condition, filename, line, func) {
    abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
  }
  function _emscripten_get_heap_size() {
    return HEAP8.length;
  }
  function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
  }
  function ___setErrNo(value) {
    if (Module["___errno_location"]) {
      HEAP32[Module["___errno_location"]() >> 2] = value;
    }
    return value;
  }
  function abortOnCannotGrowMemory(requestedSize) {
    abort("OOM");
  }
  function emscripten_realloc_buffer(size) {
    try {
      var newBuffer = new ArrayBuffer(size);
      if (newBuffer.byteLength != size) {
        return;
      }
      new Int8Array(newBuffer).set(HEAP8);
      _emscripten_replace_memory(newBuffer);
      updateGlobalBufferAndViews(newBuffer);
      return 1;
    } catch (e) {
    }
  }
  function _emscripten_resize_heap(requestedSize) {
    var oldSize = _emscripten_get_heap_size();
    var PAGE_MULTIPLE = 16777216;
    var LIMIT = 2147483648 - PAGE_MULTIPLE;
    if (requestedSize > LIMIT) {
      return false;
    }
    var MIN_TOTAL_MEMORY = 16777216;
    var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);
    while (newSize < requestedSize) {
      if (newSize <= 536870912) {
        newSize = alignUp(2 * newSize, PAGE_MULTIPLE);
      } else {
        newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
      }
    }
    var replacement = emscripten_realloc_buffer(newSize);
    if (!replacement) {
      return false;
    }
    return true;
  }
  var decodeBase64 = typeof atob === "function" ? atob : function(input) {
    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    do {
      enc1 = keyStr.indexOf(input.charAt(i++));
      enc2 = keyStr.indexOf(input.charAt(i++));
      enc3 = keyStr.indexOf(input.charAt(i++));
      enc4 = keyStr.indexOf(input.charAt(i++));
      chr1 = enc1 << 2 | enc2 >> 4;
      chr2 = (enc2 & 15) << 4 | enc3 >> 2;
      chr3 = (enc3 & 3) << 6 | enc4;
      output = output + String.fromCharCode(chr1);
      if (enc3 !== 64) {
        output = output + String.fromCharCode(chr2);
      }
      if (enc4 !== 64) {
        output = output + String.fromCharCode(chr3);
      }
    } while (i < input.length);
    return output;
  };
  function intArrayFromBase64(s) {
    try {
      var decoded = decodeBase64(s);
      var bytes = new Uint8Array(decoded.length);
      for (var i = 0; i < decoded.length; ++i) {
        bytes[i] = decoded.charCodeAt(i);
      }
      return bytes;
    } catch (_) {
      throw new Error("Converting base64 string to bytes failed.");
    }
  }
  function tryParseAsDataURI(filename) {
    if (!isDataURI(filename)) {
      return;
    }
    return intArrayFromBase64(filename.slice(dataURIPrefix.length));
  }
  var asmGlobalArg = {
    "Math": Math,
    "Int8Array": Int8Array,
    "Int32Array": Int32Array,
    "Uint8Array": Uint8Array,
    "Float32Array": Float32Array,
    "Float64Array": Float64Array
  };
  var asmLibraryArg = {
    "a": abort,
    "b": setTempRet0,
    "c": getTempRet0,
    "d": ___assert_fail,
    "e": ___setErrNo,
    "f": _emscripten_get_heap_size,
    "g": _emscripten_memcpy_big,
    "h": _emscripten_resize_heap,
    "i": abortOnCannotGrowMemory,
    "j": demangle,
    "k": demangleAll,
    "l": emscripten_realloc_buffer,
    "m": jsStackTrace,
    "n": stackTrace,
    "o": tempDoublePtr,
    "p": DYNAMICTOP_PTR
  };
  var asm = (
    /** @suppress {uselessCode} */
    function(global2, env, buffer2) {
      "almost asm";
      var a = new global2.Int8Array(buffer2), b = new global2.Int32Array(buffer2), c3 = new global2.Uint8Array(buffer2), d = new global2.Float32Array(buffer2), e = new global2.Float64Array(buffer2), f = env.o | 0, g = env.p | 0, p = global2.Math.floor, q = global2.Math.abs, r = global2.Math.sqrt, s = global2.Math.pow, t = global2.Math.cos, u4 = global2.Math.sin, v2 = global2.Math.tan, w = global2.Math.acos, x = global2.Math.asin, y = global2.Math.atan, z = global2.Math.atan2, A5 = global2.Math.ceil, B3 = global2.Math.imul, C3 = global2.Math.min, D3 = global2.Math.max, E2 = global2.Math.clz32, G = env.b, H = env.c, I = env.d, J = env.e, K2 = env.f, L = env.g, M2 = env.h, N = env.i, T = 24160;
      function W(newBuffer) {
        a = new Int8Array(newBuffer);
        c3 = new Uint8Array(newBuffer);
        b = new Int32Array(newBuffer);
        d = new Float32Array(newBuffer);
        e = new Float64Array(newBuffer);
        buffer2 = newBuffer;
        return true;
      }
      function X(a2) {
        a2 = a2 | 0;
        var b2 = 0;
        b2 = T;
        T = T + a2 | 0;
        T = T + 15 & -16;
        return b2 | 0;
      }
      function Y() {
        return T | 0;
      }
      function Z(a2) {
        a2 = a2 | 0;
        T = a2;
      }
      function _(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        T = a2;
      }
      function $(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0, f2 = 0;
        if ((a2 | 0) < 0) {
          c4 = 2;
          return c4 | 0;
        }
        if ((a2 | 0) > 13780509) {
          c4 = ic(15, c4) | 0;
          return c4 | 0;
        } else {
          d2 = ((a2 | 0) < 0) << 31 >> 31;
          f2 = rd(a2 | 0, d2 | 0, 3, 0) | 0;
          e3 = H() | 0;
          d2 = ld(a2 | 0, d2 | 0, 1, 0) | 0;
          d2 = rd(f2 | 0, e3 | 0, d2 | 0, H() | 0) | 0;
          d2 = ld(d2 | 0, H() | 0, 1, 0) | 0;
          a2 = H() | 0;
          b[c4 >> 2] = d2;
          b[c4 + 4 >> 2] = a2;
          c4 = 0;
          return c4 | 0;
        }
        return 0;
      }
      function aa2(a2, b2, c4, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        return ba(a2, b2, c4, d2, 0) | 0;
      }
      function ba(a2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0, k = 0;
        j = T;
        T = T + 16 | 0;
        h = j;
        if (!(ca3(a2, c4, d2, e3, f2) | 0)) {
          e3 = 0;
          T = j;
          return e3 | 0;
        }
        do {
          if ((d2 | 0) >= 0) {
            if ((d2 | 0) > 13780509) {
              g2 = ic(15, h) | 0;
              if (g2 | 0) {
                break;
              }
              i = h;
              h = b[i >> 2] | 0;
              i = b[i + 4 >> 2] | 0;
            } else {
              g2 = ((d2 | 0) < 0) << 31 >> 31;
              k = rd(d2 | 0, g2 | 0, 3, 0) | 0;
              i = H() | 0;
              g2 = ld(d2 | 0, g2 | 0, 1, 0) | 0;
              g2 = rd(k | 0, i | 0, g2 | 0, H() | 0) | 0;
              g2 = ld(g2 | 0, H() | 0, 1, 0) | 0;
              i = H() | 0;
              b[h >> 2] = g2;
              b[h + 4 >> 2] = i;
              h = g2;
            }
            Bd(e3 | 0, 0, h << 3 | 0) | 0;
            if (f2 | 0) {
              Bd(f2 | 0, 0, h << 2 | 0) | 0;
              g2 = da2(a2, c4, d2, e3, f2, h, i, 0) | 0;
              break;
            }
            g2 = kd(h, 4) | 0;
            if (!g2) {
              g2 = 13;
            } else {
              k = da2(a2, c4, d2, e3, g2, h, i, 0) | 0;
              jd(g2);
              g2 = k;
            }
          } else {
            g2 = 2;
          }
        } while (0);
        k = g2;
        T = j;
        return k | 0;
      }
      function ca3(a2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0;
        q2 = T;
        T = T + 16 | 0;
        o = q2;
        p2 = q2 + 8 | 0;
        n = o;
        b[n >> 2] = a2;
        b[n + 4 >> 2] = c4;
        if ((d2 | 0) < 0) {
          p2 = 2;
          T = q2;
          return p2 | 0;
        }
        g2 = e3;
        b[g2 >> 2] = a2;
        b[g2 + 4 >> 2] = c4;
        g2 = (f2 | 0) != 0;
        if (g2) {
          b[f2 >> 2] = 0;
        }
        if (xb(a2, c4) | 0) {
          p2 = 9;
          T = q2;
          return p2 | 0;
        }
        b[p2 >> 2] = 0;
        a: do {
          if ((d2 | 0) >= 1) {
            if (g2) {
              l = 1;
              k = 0;
              m = 0;
              n = 1;
              g2 = a2;
              while (1) {
                if (!(k | m)) {
                  g2 = ea2(g2, c4, 4, p2, o) | 0;
                  if (g2 | 0) {
                    break a;
                  }
                  c4 = o;
                  g2 = b[c4 >> 2] | 0;
                  c4 = b[c4 + 4 >> 2] | 0;
                  if (xb(g2, c4) | 0) {
                    g2 = 9;
                    break a;
                  }
                }
                g2 = ea2(g2, c4, b[22384 + (m << 2) >> 2] | 0, p2, o) | 0;
                if (g2 | 0) {
                  break a;
                }
                c4 = o;
                g2 = b[c4 >> 2] | 0;
                c4 = b[c4 + 4 >> 2] | 0;
                a2 = e3 + (l << 3) | 0;
                b[a2 >> 2] = g2;
                b[a2 + 4 >> 2] = c4;
                b[f2 + (l << 2) >> 2] = n;
                a2 = k + 1 | 0;
                h = (a2 | 0) == (n | 0);
                i = m + 1 | 0;
                j = (i | 0) == 6;
                if (xb(g2, c4) | 0) {
                  g2 = 9;
                  break a;
                }
                n = n + (j & h & 1) | 0;
                if ((n | 0) > (d2 | 0)) {
                  g2 = 0;
                  break;
                } else {
                  l = l + 1 | 0;
                  k = h ? 0 : a2;
                  m = h ? j ? 0 : i : m;
                }
              }
            } else {
              l = 1;
              k = 0;
              m = 0;
              n = 1;
              g2 = a2;
              while (1) {
                if (!(k | m)) {
                  g2 = ea2(g2, c4, 4, p2, o) | 0;
                  if (g2 | 0) {
                    break a;
                  }
                  c4 = o;
                  g2 = b[c4 >> 2] | 0;
                  c4 = b[c4 + 4 >> 2] | 0;
                  if (xb(g2, c4) | 0) {
                    g2 = 9;
                    break a;
                  }
                }
                g2 = ea2(g2, c4, b[22384 + (m << 2) >> 2] | 0, p2, o) | 0;
                if (g2 | 0) {
                  break a;
                }
                c4 = o;
                g2 = b[c4 >> 2] | 0;
                c4 = b[c4 + 4 >> 2] | 0;
                a2 = e3 + (l << 3) | 0;
                b[a2 >> 2] = g2;
                b[a2 + 4 >> 2] = c4;
                a2 = k + 1 | 0;
                h = (a2 | 0) == (n | 0);
                i = m + 1 | 0;
                j = (i | 0) == 6;
                if (xb(g2, c4) | 0) {
                  g2 = 9;
                  break a;
                }
                n = n + (j & h & 1) | 0;
                if ((n | 0) > (d2 | 0)) {
                  g2 = 0;
                  break;
                } else {
                  l = l + 1 | 0;
                  k = h ? 0 : a2;
                  m = h ? j ? 0 : i : m;
                }
              }
            }
          } else {
            g2 = 0;
          }
        } while (0);
        p2 = g2;
        T = q2;
        return p2 | 0;
      }
      function da2(a2, c4, d2, e3, f2, g2, h, i) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        h = h | 0;
        i = i | 0;
        var j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0;
        q2 = T;
        T = T + 16 | 0;
        o = q2 + 8 | 0;
        p2 = q2;
        j = td(a2 | 0, c4 | 0, g2 | 0, h | 0) | 0;
        l = H() | 0;
        m = e3 + (j << 3) | 0;
        r2 = m;
        s2 = b[r2 >> 2] | 0;
        r2 = b[r2 + 4 >> 2] | 0;
        k = (s2 | 0) == (a2 | 0) & (r2 | 0) == (c4 | 0);
        if (!((s2 | 0) == 0 & (r2 | 0) == 0 | k)) {
          do {
            j = ld(j | 0, l | 0, 1, 0) | 0;
            j = sd(j | 0, H() | 0, g2 | 0, h | 0) | 0;
            l = H() | 0;
            m = e3 + (j << 3) | 0;
            s2 = m;
            r2 = b[s2 >> 2] | 0;
            s2 = b[s2 + 4 >> 2] | 0;
            k = (r2 | 0) == (a2 | 0) & (s2 | 0) == (c4 | 0);
          } while (!((r2 | 0) == 0 & (s2 | 0) == 0 | k));
        }
        j = f2 + (j << 2) | 0;
        if (k ? (b[j >> 2] | 0) <= (i | 0) : 0) {
          s2 = 0;
          T = q2;
          return s2 | 0;
        }
        s2 = m;
        b[s2 >> 2] = a2;
        b[s2 + 4 >> 2] = c4;
        b[j >> 2] = i;
        if ((i | 0) >= (d2 | 0)) {
          s2 = 0;
          T = q2;
          return s2 | 0;
        }
        k = i + 1 | 0;
        b[o >> 2] = 0;
        j = ea2(a2, c4, 2, o, p2) | 0;
        switch (j | 0) {
          case 9: {
            n = 9;
            break;
          }
          case 0: {
            j = p2;
            j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e3, f2, g2, h, k) | 0;
            if (!j) {
              n = 9;
            }
            break;
          }
          default:
        }
        a: do {
          if ((n | 0) == 9) {
            b[o >> 2] = 0;
            j = ea2(a2, c4, 3, o, p2) | 0;
            switch (j | 0) {
              case 9:
                break;
              case 0: {
                j = p2;
                j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e3, f2, g2, h, k) | 0;
                if (j | 0) {
                  break a;
                }
                break;
              }
              default:
                break a;
            }
            b[o >> 2] = 0;
            j = ea2(a2, c4, 1, o, p2) | 0;
            switch (j | 0) {
              case 9:
                break;
              case 0: {
                j = p2;
                j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e3, f2, g2, h, k) | 0;
                if (j | 0) {
                  break a;
                }
                break;
              }
              default:
                break a;
            }
            b[o >> 2] = 0;
            j = ea2(a2, c4, 5, o, p2) | 0;
            switch (j | 0) {
              case 9:
                break;
              case 0: {
                j = p2;
                j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e3, f2, g2, h, k) | 0;
                if (j | 0) {
                  break a;
                }
                break;
              }
              default:
                break a;
            }
            b[o >> 2] = 0;
            j = ea2(a2, c4, 4, o, p2) | 0;
            switch (j | 0) {
              case 9:
                break;
              case 0: {
                j = p2;
                j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e3, f2, g2, h, k) | 0;
                if (j | 0) {
                  break a;
                }
                break;
              }
              default:
                break a;
            }
            b[o >> 2] = 0;
            j = ea2(a2, c4, 6, o, p2) | 0;
            switch (j | 0) {
              case 9:
                break;
              case 0: {
                j = p2;
                j = da2(b[j >> 2] | 0, b[j + 4 >> 2] | 0, d2, e3, f2, g2, h, k) | 0;
                if (j | 0) {
                  break a;
                }
                break;
              }
              default:
                break a;
            }
            s2 = 0;
            T = q2;
            return s2 | 0;
          }
        } while (0);
        s2 = j;
        T = q2;
        return s2 | 0;
      }
      function ea2(a2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0;
        if (d2 >>> 0 > 6) {
          f2 = 1;
          return f2 | 0;
        }
        m = (b[e3 >> 2] | 0) % 6 | 0;
        b[e3 >> 2] = m;
        if ((m | 0) > 0) {
          g2 = 0;
          do {
            d2 = Sa(d2) | 0;
            g2 = g2 + 1 | 0;
          } while ((g2 | 0) < (b[e3 >> 2] | 0));
        }
        m = vd(a2 | 0, c4 | 0, 45) | 0;
        H() | 0;
        l = m & 127;
        if (l >>> 0 > 121) {
          f2 = 5;
          return f2 | 0;
        }
        j = Fb(a2, c4) | 0;
        g2 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        g2 = g2 & 15;
        a: do {
          if (!g2) {
            k = 8;
          } else {
            while (1) {
              h = (15 - g2 | 0) * 3 | 0;
              i = vd(a2 | 0, c4 | 0, h | 0) | 0;
              H() | 0;
              i = i & 7;
              if ((i | 0) == 7) {
                c4 = 5;
                break;
              }
              p2 = (Lb(g2) | 0) == 0;
              g2 = g2 + -1 | 0;
              n = wd(7, 0, h | 0) | 0;
              c4 = c4 & ~(H() | 0);
              o = wd(b[(p2 ? 432 : 16) + (i * 28 | 0) + (d2 << 2) >> 2] | 0, 0, h | 0) | 0;
              h = H() | 0;
              d2 = b[(p2 ? 640 : 224) + (i * 28 | 0) + (d2 << 2) >> 2] | 0;
              a2 = o | a2 & ~n;
              c4 = h | c4;
              if (!d2) {
                d2 = 0;
                break a;
              }
              if (!g2) {
                k = 8;
                break a;
              }
            }
            return c4 | 0;
          }
        } while (0);
        if ((k | 0) == 8) {
          p2 = b[848 + (l * 28 | 0) + (d2 << 2) >> 2] | 0;
          o = wd(p2 | 0, 0, 45) | 0;
          a2 = o | a2;
          c4 = H() | 0 | c4 & -1040385;
          d2 = b[4272 + (l * 28 | 0) + (d2 << 2) >> 2] | 0;
          if ((p2 & 127 | 0) == 127) {
            p2 = wd(b[848 + (l * 28 | 0) + 20 >> 2] | 0, 0, 45) | 0;
            c4 = H() | 0 | c4 & -1040385;
            d2 = b[4272 + (l * 28 | 0) + 20 >> 2] | 0;
            a2 = Hb(p2 | a2, c4) | 0;
            c4 = H() | 0;
            b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
          }
        }
        i = vd(a2 | 0, c4 | 0, 45) | 0;
        H() | 0;
        i = i & 127;
        b: do {
          if (!(ma(i) | 0)) {
            if ((d2 | 0) > 0) {
              g2 = 0;
              do {
                a2 = Hb(a2, c4) | 0;
                c4 = H() | 0;
                g2 = g2 + 1 | 0;
              } while ((g2 | 0) != (d2 | 0));
            }
          } else {
            c: do {
              if ((Fb(a2, c4) | 0) == 1) {
                if ((l | 0) != (i | 0)) {
                  if (sa(i, b[7696 + (l * 28 | 0) >> 2] | 0) | 0) {
                    a2 = Jb(a2, c4) | 0;
                    h = 1;
                    c4 = H() | 0;
                    break;
                  } else {
                    I(23313, 22416, 436, 22424);
                  }
                }
                switch (j | 0) {
                  case 3: {
                    a2 = Hb(a2, c4) | 0;
                    c4 = H() | 0;
                    b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
                    h = 0;
                    break c;
                  }
                  case 5: {
                    a2 = Jb(a2, c4) | 0;
                    c4 = H() | 0;
                    b[e3 >> 2] = (b[e3 >> 2] | 0) + 5;
                    h = 0;
                    break c;
                  }
                  case 0: {
                    p2 = 9;
                    return p2 | 0;
                  }
                  default: {
                    p2 = 1;
                    return p2 | 0;
                  }
                }
              } else {
                h = 0;
              }
            } while (0);
            if ((d2 | 0) > 0) {
              g2 = 0;
              do {
                a2 = Gb(a2, c4) | 0;
                c4 = H() | 0;
                g2 = g2 + 1 | 0;
              } while ((g2 | 0) != (d2 | 0));
            }
            if ((l | 0) != (i | 0)) {
              if (!(na(i) | 0)) {
                if ((h | 0) != 0 | (Fb(a2, c4) | 0) != 5) {
                  break;
                }
                b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
                break;
              }
              switch (m & 127) {
                case 8:
                case 118:
                  break b;
                default:
              }
              if ((Fb(a2, c4) | 0) != 3) {
                b[e3 >> 2] = (b[e3 >> 2] | 0) + 1;
              }
            }
          }
        } while (0);
        b[e3 >> 2] = ((b[e3 >> 2] | 0) + d2 | 0) % 6 | 0;
        p2 = f2;
        b[p2 >> 2] = a2;
        b[p2 + 4 >> 2] = c4;
        p2 = 0;
        return p2 | 0;
      }
      function fa(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
        i = T;
        T = T + 16 | 0;
        g2 = i;
        h = i + 8 | 0;
        f2 = (xb(a2, c4) | 0) == 0;
        f2 = f2 ? 1 : 2;
        while (1) {
          b[h >> 2] = 0;
          k = (ea2(a2, c4, f2, h, g2) | 0) == 0;
          j = g2;
          if (k & ((b[j >> 2] | 0) == (d2 | 0) ? (b[j + 4 >> 2] | 0) == (e3 | 0) : 0)) {
            a2 = 4;
            break;
          }
          f2 = f2 + 1 | 0;
          if (f2 >>> 0 >= 7) {
            f2 = 7;
            a2 = 4;
            break;
          }
        }
        if ((a2 | 0) == 4) {
          T = i;
          return f2 | 0;
        }
        return 0;
      }
      function ga(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0;
        p2 = T;
        T = T + 16 | 0;
        n = p2;
        o = p2 + 8 | 0;
        m = n;
        b[m >> 2] = a2;
        b[m + 4 >> 2] = c4;
        if (!d2) {
          o = e3;
          b[o >> 2] = a2;
          b[o + 4 >> 2] = c4;
          o = 0;
          T = p2;
          return o | 0;
        }
        b[o >> 2] = 0;
        a: do {
          if (!(xb(a2, c4) | 0)) {
            g2 = (d2 | 0) > 0;
            if (g2) {
              f2 = 0;
              m = a2;
              do {
                a2 = ea2(m, c4, 4, o, n) | 0;
                if (a2 | 0) {
                  break a;
                }
                c4 = n;
                m = b[c4 >> 2] | 0;
                c4 = b[c4 + 4 >> 2] | 0;
                f2 = f2 + 1 | 0;
                if (xb(m, c4) | 0) {
                  a2 = 9;
                  break a;
                }
              } while ((f2 | 0) < (d2 | 0));
              l = e3;
              b[l >> 2] = m;
              b[l + 4 >> 2] = c4;
              l = d2 + -1 | 0;
              if (g2) {
                k = 0;
                a2 = 1;
                do {
                  f2 = 22384 + (k << 2) | 0;
                  if ((k | 0) == 5) {
                    h = b[f2 >> 2] | 0;
                    g2 = 0;
                    f2 = a2;
                    while (1) {
                      a2 = n;
                      a2 = ea2(b[a2 >> 2] | 0, b[a2 + 4 >> 2] | 0, h, o, n) | 0;
                      if (a2 | 0) {
                        break a;
                      }
                      if ((g2 | 0) != (l | 0)) {
                        j = n;
                        i = b[j >> 2] | 0;
                        j = b[j + 4 >> 2] | 0;
                        a2 = e3 + (f2 << 3) | 0;
                        b[a2 >> 2] = i;
                        b[a2 + 4 >> 2] = j;
                        if (!(xb(i, j) | 0)) {
                          a2 = f2 + 1 | 0;
                        } else {
                          a2 = 9;
                          break a;
                        }
                      } else {
                        a2 = f2;
                      }
                      g2 = g2 + 1 | 0;
                      if ((g2 | 0) >= (d2 | 0)) {
                        break;
                      } else {
                        f2 = a2;
                      }
                    }
                  } else {
                    h = n;
                    j = b[f2 >> 2] | 0;
                    i = 0;
                    f2 = a2;
                    g2 = b[h >> 2] | 0;
                    h = b[h + 4 >> 2] | 0;
                    while (1) {
                      a2 = ea2(g2, h, j, o, n) | 0;
                      if (a2 | 0) {
                        break a;
                      }
                      h = n;
                      g2 = b[h >> 2] | 0;
                      h = b[h + 4 >> 2] | 0;
                      a2 = e3 + (f2 << 3) | 0;
                      b[a2 >> 2] = g2;
                      b[a2 + 4 >> 2] = h;
                      a2 = f2 + 1 | 0;
                      if (xb(g2, h) | 0) {
                        a2 = 9;
                        break a;
                      }
                      i = i + 1 | 0;
                      if ((i | 0) >= (d2 | 0)) {
                        break;
                      } else {
                        f2 = a2;
                      }
                    }
                  }
                  k = k + 1 | 0;
                } while (k >>> 0 < 6);
                a2 = n;
                h = m;
                f2 = b[a2 >> 2] | 0;
                g2 = c4;
                a2 = b[a2 + 4 >> 2] | 0;
              } else {
                h = m;
                f2 = m;
                g2 = c4;
                a2 = c4;
              }
            } else {
              h = e3;
              b[h >> 2] = a2;
              b[h + 4 >> 2] = c4;
              h = a2;
              f2 = a2;
              g2 = c4;
              a2 = c4;
            }
            a2 = (h | 0) == (f2 | 0) & (g2 | 0) == (a2 | 0) ? 0 : 9;
          } else {
            a2 = 9;
          }
        } while (0);
        o = a2;
        T = p2;
        return o | 0;
      }
      function ha(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
        i = T;
        T = T + 48 | 0;
        f2 = i + 16 | 0;
        g2 = i + 8 | 0;
        h = i;
        if (d2 | 0) {
          h = 15;
          T = i;
          return h | 0;
        }
        k = a2;
        j = b[k + 4 >> 2] | 0;
        d2 = g2;
        b[d2 >> 2] = b[k >> 2];
        b[d2 + 4 >> 2] = j;
        Ec(g2, f2);
        c4 = za(f2, c4, h) | 0;
        if (!c4) {
          d2 = b[g2 >> 2] | 0;
          g2 = b[a2 + 8 >> 2] | 0;
          if ((g2 | 0) > 0) {
            f2 = b[a2 + 12 >> 2] | 0;
            c4 = 0;
            do {
              d2 = (b[f2 + (c4 << 3) >> 2] | 0) + d2 | 0;
              c4 = c4 + 1 | 0;
            } while ((c4 | 0) < (g2 | 0));
          }
          c4 = h;
          f2 = b[c4 >> 2] | 0;
          c4 = b[c4 + 4 >> 2] | 0;
          g2 = ((d2 | 0) < 0) << 31 >> 31;
          if ((c4 | 0) < (g2 | 0) | (c4 | 0) == (g2 | 0) & f2 >>> 0 < d2 >>> 0) {
            c4 = h;
            b[c4 >> 2] = d2;
            b[c4 + 4 >> 2] = g2;
            c4 = g2;
          } else {
            d2 = f2;
          }
          j = ld(d2 | 0, c4 | 0, 12, 0) | 0;
          k = H() | 0;
          c4 = h;
          b[c4 >> 2] = j;
          b[c4 + 4 >> 2] = k;
          c4 = e3;
          b[c4 >> 2] = j;
          b[c4 + 4 >> 2] = k;
          c4 = 0;
        }
        k = c4;
        T = i;
        return k | 0;
      }
      function ia(a2, c4, d2, f2, g2, h, i) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        h = h | 0;
        i = i | 0;
        var j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A6 = 0, B4 = 0, C4 = 0, D4 = 0, E3 = 0, F = 0, G2 = 0, I2 = 0, J2 = 0, K3 = 0, L2 = 0, M3 = 0;
        I2 = T;
        T = T + 64 | 0;
        D4 = I2 + 48 | 0;
        E3 = I2 + 32 | 0;
        F = I2 + 24 | 0;
        x2 = I2 + 8 | 0;
        y2 = I2;
        k = b[a2 >> 2] | 0;
        if ((k | 0) <= 0) {
          G2 = 0;
          T = I2;
          return G2 | 0;
        }
        z2 = a2 + 4 | 0;
        A6 = D4 + 8 | 0;
        B4 = E3 + 8 | 0;
        C4 = x2 + 8 | 0;
        j = 0;
        v3 = 0;
        while (1) {
          l = b[z2 >> 2] | 0;
          u5 = l + (v3 << 4) | 0;
          b[D4 >> 2] = b[u5 >> 2];
          b[D4 + 4 >> 2] = b[u5 + 4 >> 2];
          b[D4 + 8 >> 2] = b[u5 + 8 >> 2];
          b[D4 + 12 >> 2] = b[u5 + 12 >> 2];
          if ((v3 | 0) == (k + -1 | 0)) {
            b[E3 >> 2] = b[l >> 2];
            b[E3 + 4 >> 2] = b[l + 4 >> 2];
            b[E3 + 8 >> 2] = b[l + 8 >> 2];
            b[E3 + 12 >> 2] = b[l + 12 >> 2];
          } else {
            u5 = l + (v3 + 1 << 4) | 0;
            b[E3 >> 2] = b[u5 >> 2];
            b[E3 + 4 >> 2] = b[u5 + 4 >> 2];
            b[E3 + 8 >> 2] = b[u5 + 8 >> 2];
            b[E3 + 12 >> 2] = b[u5 + 12 >> 2];
          }
          k = Aa(D4, E3, f2, F) | 0;
          a: do {
            if (!k) {
              l = F;
              k = b[l >> 2] | 0;
              l = b[l + 4 >> 2] | 0;
              if ((l | 0) > 0 | (l | 0) == 0 & k >>> 0 > 0) {
                t4 = 0;
                u5 = 0;
                b: while (1) {
                  M3 = +e[D4 >> 3];
                  s2 = md(k | 0, l | 0, t4 | 0, u5 | 0) | 0;
                  L2 = +(s2 >>> 0) + 4294967296 * +(H() | 0);
                  J2 = +(k >>> 0) + 4294967296 * +(l | 0);
                  K3 = +(t4 >>> 0) + 4294967296 * +(u5 | 0);
                  e[x2 >> 3] = M3 * L2 / J2 + +e[E3 >> 3] * K3 / J2;
                  e[C4 >> 3] = +e[A6 >> 3] * L2 / J2 + +e[B4 >> 3] * K3 / J2;
                  k = Mb(x2, f2, y2) | 0;
                  if (k | 0) {
                    j = k;
                    break;
                  }
                  s2 = y2;
                  r2 = b[s2 >> 2] | 0;
                  s2 = b[s2 + 4 >> 2] | 0;
                  o = td(r2 | 0, s2 | 0, c4 | 0, d2 | 0) | 0;
                  m = H() | 0;
                  k = i + (o << 3) | 0;
                  n = k;
                  l = b[n >> 2] | 0;
                  n = b[n + 4 >> 2] | 0;
                  c: do {
                    if ((l | 0) == 0 & (n | 0) == 0) {
                      w2 = k;
                      G2 = 16;
                    } else {
                      p2 = 0;
                      q2 = 0;
                      while (1) {
                        if ((p2 | 0) > (d2 | 0) | (p2 | 0) == (d2 | 0) & q2 >>> 0 > c4 >>> 0) {
                          j = 1;
                          break b;
                        }
                        if ((l | 0) == (r2 | 0) & (n | 0) == (s2 | 0)) {
                          break c;
                        }
                        k = ld(o | 0, m | 0, 1, 0) | 0;
                        o = sd(k | 0, H() | 0, c4 | 0, d2 | 0) | 0;
                        m = H() | 0;
                        q2 = ld(q2 | 0, p2 | 0, 1, 0) | 0;
                        p2 = H() | 0;
                        k = i + (o << 3) | 0;
                        n = k;
                        l = b[n >> 2] | 0;
                        n = b[n + 4 >> 2] | 0;
                        if ((l | 0) == 0 & (n | 0) == 0) {
                          w2 = k;
                          G2 = 16;
                          break;
                        }
                      }
                    }
                  } while (0);
                  if ((G2 | 0) == 16 ? (G2 = 0, !((r2 | 0) == 0 & (s2 | 0) == 0)) : 0) {
                    q2 = w2;
                    b[q2 >> 2] = r2;
                    b[q2 + 4 >> 2] = s2;
                    q2 = h + (b[g2 >> 2] << 3) | 0;
                    b[q2 >> 2] = r2;
                    b[q2 + 4 >> 2] = s2;
                    q2 = g2;
                    q2 = ld(b[q2 >> 2] | 0, b[q2 + 4 >> 2] | 0, 1, 0) | 0;
                    r2 = H() | 0;
                    s2 = g2;
                    b[s2 >> 2] = q2;
                    b[s2 + 4 >> 2] = r2;
                  }
                  t4 = ld(t4 | 0, u5 | 0, 1, 0) | 0;
                  u5 = H() | 0;
                  l = F;
                  k = b[l >> 2] | 0;
                  l = b[l + 4 >> 2] | 0;
                  if (!((l | 0) > (u5 | 0) | (l | 0) == (u5 | 0) & k >>> 0 > t4 >>> 0)) {
                    l = 1;
                    break a;
                  }
                }
                l = 0;
              } else {
                l = 1;
              }
            } else {
              l = 0;
              j = k;
            }
          } while (0);
          v3 = v3 + 1 | 0;
          if (!l) {
            G2 = 21;
            break;
          }
          k = b[a2 >> 2] | 0;
          if ((v3 | 0) >= (k | 0)) {
            j = 0;
            G2 = 21;
            break;
          }
        }
        if ((G2 | 0) == 21) {
          T = I2;
          return j | 0;
        }
        return 0;
      }
      function ja(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A6 = 0, B4 = 0, C4 = 0, D4 = 0, E3 = 0, F = 0, G2 = 0, I2 = 0, J2 = 0, K3 = 0;
        K3 = T;
        T = T + 112 | 0;
        F = K3 + 80 | 0;
        j = K3 + 72 | 0;
        G2 = K3;
        I2 = K3 + 56 | 0;
        if (d2 | 0) {
          J2 = 15;
          T = K3;
          return J2 | 0;
        }
        k = a2 + 8 | 0;
        J2 = id((b[k >> 2] << 5) + 32 | 0) | 0;
        if (!J2) {
          J2 = 13;
          T = K3;
          return J2 | 0;
        }
        Fc(a2, J2);
        D4 = a2;
        E3 = b[D4 + 4 >> 2] | 0;
        d2 = j;
        b[d2 >> 2] = b[D4 >> 2];
        b[d2 + 4 >> 2] = E3;
        Ec(j, F);
        d2 = za(F, c4, G2) | 0;
        if (!d2) {
          d2 = b[j >> 2] | 0;
          g2 = b[k >> 2] | 0;
          if ((g2 | 0) > 0) {
            h = b[a2 + 12 >> 2] | 0;
            f2 = 0;
            do {
              d2 = (b[h + (f2 << 3) >> 2] | 0) + d2 | 0;
              f2 = f2 + 1 | 0;
            } while ((f2 | 0) != (g2 | 0));
            f2 = d2;
          } else {
            f2 = d2;
          }
          d2 = G2;
          g2 = b[d2 >> 2] | 0;
          d2 = b[d2 + 4 >> 2] | 0;
          h = ((f2 | 0) < 0) << 31 >> 31;
          if ((d2 | 0) < (h | 0) | (d2 | 0) == (h | 0) & g2 >>> 0 < f2 >>> 0) {
            d2 = G2;
            b[d2 >> 2] = f2;
            b[d2 + 4 >> 2] = h;
            d2 = h;
          } else {
            f2 = g2;
          }
          D4 = ld(f2 | 0, d2 | 0, 12, 0) | 0;
          E3 = H() | 0;
          d2 = G2;
          b[d2 >> 2] = D4;
          b[d2 + 4 >> 2] = E3;
          d2 = 0;
        } else {
          D4 = 0;
          E3 = 0;
        }
        if (d2 | 0) {
          jd(J2);
          J2 = d2;
          T = K3;
          return J2 | 0;
        }
        f2 = kd(D4, 8) | 0;
        if (!f2) {
          jd(J2);
          J2 = 13;
          T = K3;
          return J2 | 0;
        }
        i = kd(D4, 8) | 0;
        if (!i) {
          jd(J2);
          jd(f2);
          J2 = 13;
          T = K3;
          return J2 | 0;
        }
        B4 = F;
        b[B4 >> 2] = 0;
        b[B4 + 4 >> 2] = 0;
        B4 = a2;
        C4 = b[B4 + 4 >> 2] | 0;
        d2 = j;
        b[d2 >> 2] = b[B4 >> 2];
        b[d2 + 4 >> 2] = C4;
        d2 = ia(j, D4, E3, c4, F, f2, i) | 0;
        a: do {
          if (!d2) {
            b: do {
              if ((b[k >> 2] | 0) > 0) {
                h = a2 + 12 | 0;
                g2 = 0;
                while (1) {
                  d2 = ia((b[h >> 2] | 0) + (g2 << 3) | 0, D4, E3, c4, F, f2, i) | 0;
                  g2 = g2 + 1 | 0;
                  if (d2 | 0) {
                    break;
                  }
                  if ((g2 | 0) >= (b[k >> 2] | 0)) {
                    break b;
                  }
                }
                jd(f2);
                jd(i);
                jd(J2);
                break a;
              }
            } while (0);
            if ((E3 | 0) > 0 | (E3 | 0) == 0 & D4 >>> 0 > 0) {
              Bd(i | 0, 0, D4 << 3 | 0) | 0;
            }
            C4 = F;
            B4 = b[C4 + 4 >> 2] | 0;
            c: do {
              if ((B4 | 0) > 0 | (B4 | 0) == 0 & (b[C4 >> 2] | 0) >>> 0 > 0) {
                y2 = f2;
                z2 = i;
                A6 = f2;
                B4 = i;
                C4 = f2;
                d2 = f2;
                v3 = f2;
                w2 = i;
                x2 = i;
                f2 = i;
                d: while (1) {
                  r2 = 0;
                  s2 = 0;
                  t4 = 0;
                  u5 = 0;
                  g2 = 0;
                  h = 0;
                  while (1) {
                    i = G2;
                    j = i + 56 | 0;
                    do {
                      b[i >> 2] = 0;
                      i = i + 4 | 0;
                    } while ((i | 0) < (j | 0));
                    c4 = y2 + (r2 << 3) | 0;
                    k = b[c4 >> 2] | 0;
                    c4 = b[c4 + 4 >> 2] | 0;
                    if (ca3(k, c4, 1, G2, 0) | 0) {
                      i = G2;
                      j = i + 56 | 0;
                      do {
                        b[i >> 2] = 0;
                        i = i + 4 | 0;
                      } while ((i | 0) < (j | 0));
                      i = kd(7, 4) | 0;
                      if (i | 0) {
                        da2(k, c4, 1, G2, i, 7, 0, 0) | 0;
                        jd(i);
                      }
                    }
                    q2 = 0;
                    while (1) {
                      p2 = G2 + (q2 << 3) | 0;
                      o = b[p2 >> 2] | 0;
                      p2 = b[p2 + 4 >> 2] | 0;
                      e: do {
                        if (!((o | 0) == 0 & (p2 | 0) == 0)) {
                          l = td(o | 0, p2 | 0, D4 | 0, E3 | 0) | 0;
                          k = H() | 0;
                          i = e3 + (l << 3) | 0;
                          c4 = i;
                          j = b[c4 >> 2] | 0;
                          c4 = b[c4 + 4 >> 2] | 0;
                          if (!((j | 0) == 0 & (c4 | 0) == 0)) {
                            m = 0;
                            n = 0;
                            do {
                              if ((m | 0) > (E3 | 0) | (m | 0) == (E3 | 0) & n >>> 0 > D4 >>> 0) {
                                break d;
                              }
                              if ((j | 0) == (o | 0) & (c4 | 0) == (p2 | 0)) {
                                i = g2;
                                j = h;
                                break e;
                              }
                              i = ld(l | 0, k | 0, 1, 0) | 0;
                              l = sd(i | 0, H() | 0, D4 | 0, E3 | 0) | 0;
                              k = H() | 0;
                              n = ld(n | 0, m | 0, 1, 0) | 0;
                              m = H() | 0;
                              i = e3 + (l << 3) | 0;
                              c4 = i;
                              j = b[c4 >> 2] | 0;
                              c4 = b[c4 + 4 >> 2] | 0;
                            } while (!((j | 0) == 0 & (c4 | 0) == 0));
                          }
                          if (!((o | 0) == 0 & (p2 | 0) == 0)) {
                            Pb(o, p2, I2) | 0;
                            if (Gc(a2, J2, I2) | 0) {
                              n = ld(g2 | 0, h | 0, 1, 0) | 0;
                              h = H() | 0;
                              m = i;
                              b[m >> 2] = o;
                              b[m + 4 >> 2] = p2;
                              g2 = z2 + (g2 << 3) | 0;
                              b[g2 >> 2] = o;
                              b[g2 + 4 >> 2] = p2;
                              g2 = n;
                            }
                            i = g2;
                            j = h;
                          } else {
                            i = g2;
                            j = h;
                          }
                        } else {
                          i = g2;
                          j = h;
                        }
                      } while (0);
                      q2 = q2 + 1 | 0;
                      if (q2 >>> 0 >= 7) {
                        break;
                      } else {
                        g2 = i;
                        h = j;
                      }
                    }
                    r2 = ld(r2 | 0, s2 | 0, 1, 0) | 0;
                    s2 = H() | 0;
                    t4 = ld(t4 | 0, u5 | 0, 1, 0) | 0;
                    u5 = H() | 0;
                    h = F;
                    g2 = b[h >> 2] | 0;
                    h = b[h + 4 >> 2] | 0;
                    if (!((u5 | 0) < (h | 0) | (u5 | 0) == (h | 0) & t4 >>> 0 < g2 >>> 0)) {
                      break;
                    } else {
                      g2 = i;
                      h = j;
                    }
                  }
                  if ((h | 0) > 0 | (h | 0) == 0 & g2 >>> 0 > 0) {
                    g2 = 0;
                    h = 0;
                    do {
                      u5 = y2 + (g2 << 3) | 0;
                      b[u5 >> 2] = 0;
                      b[u5 + 4 >> 2] = 0;
                      g2 = ld(g2 | 0, h | 0, 1, 0) | 0;
                      h = H() | 0;
                      u5 = F;
                      t4 = b[u5 + 4 >> 2] | 0;
                    } while ((h | 0) < (t4 | 0) | ((h | 0) == (t4 | 0) ? g2 >>> 0 < (b[u5 >> 2] | 0) >>> 0 : 0));
                  }
                  u5 = F;
                  b[u5 >> 2] = i;
                  b[u5 + 4 >> 2] = j;
                  if ((j | 0) > 0 | (j | 0) == 0 & i >>> 0 > 0) {
                    q2 = f2;
                    r2 = x2;
                    s2 = C4;
                    t4 = w2;
                    u5 = z2;
                    f2 = v3;
                    x2 = d2;
                    w2 = A6;
                    v3 = q2;
                    d2 = r2;
                    C4 = B4;
                    B4 = s2;
                    A6 = t4;
                    z2 = y2;
                    y2 = u5;
                  } else {
                    break c;
                  }
                }
                jd(A6);
                jd(B4);
                jd(J2);
                d2 = 1;
                break a;
              } else {
                d2 = i;
              }
            } while (0);
            jd(J2);
            jd(f2);
            jd(d2);
            d2 = 0;
          } else {
            jd(f2);
            jd(i);
            jd(J2);
          }
        } while (0);
        J2 = d2;
        T = K3;
        return J2 | 0;
      }
      function ka(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
        l = T;
        T = T + 176 | 0;
        j = l;
        if ((c4 | 0) < 1) {
          _c(d2, 0, 0);
          k = 0;
          T = l;
          return k | 0;
        }
        i = a2;
        i = vd(b[i >> 2] | 0, b[i + 4 >> 2] | 0, 52) | 0;
        H() | 0;
        _c(d2, (c4 | 0) > 6 ? c4 : 6, i & 15);
        i = 0;
        while (1) {
          e3 = a2 + (i << 3) | 0;
          e3 = Qb(b[e3 >> 2] | 0, b[e3 + 4 >> 2] | 0, j) | 0;
          if (e3 | 0) {
            break;
          }
          e3 = b[j >> 2] | 0;
          if ((e3 | 0) > 0) {
            h = 0;
            do {
              g2 = j + 8 + (h << 4) | 0;
              h = h + 1 | 0;
              e3 = j + 8 + (((h | 0) % (e3 | 0) | 0) << 4) | 0;
              f2 = dd(d2, e3, g2) | 0;
              if (!f2) {
                cd2(d2, g2, e3) | 0;
              } else {
                bd2(d2, f2) | 0;
              }
              e3 = b[j >> 2] | 0;
            } while ((h | 0) < (e3 | 0));
          }
          i = i + 1 | 0;
          if ((i | 0) >= (c4 | 0)) {
            e3 = 0;
            k = 13;
            break;
          }
        }
        if ((k | 0) == 13) {
          T = l;
          return e3 | 0;
        }
        $c(d2);
        k = e3;
        T = l;
        return k | 0;
      }
      function la(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0;
        g2 = T;
        T = T + 32 | 0;
        e3 = g2;
        f2 = g2 + 16 | 0;
        a2 = ka(a2, c4, f2) | 0;
        if (a2 | 0) {
          d2 = a2;
          T = g2;
          return d2 | 0;
        }
        b[d2 >> 2] = 0;
        b[d2 + 4 >> 2] = 0;
        b[d2 + 8 >> 2] = 0;
        a2 = ad(f2) | 0;
        if (a2 | 0) {
          do {
            c4 = qc(d2) | 0;
            do {
              rc(c4, a2) | 0;
              h = a2 + 16 | 0;
              b[e3 >> 2] = b[h >> 2];
              b[e3 + 4 >> 2] = b[h + 4 >> 2];
              b[e3 + 8 >> 2] = b[h + 8 >> 2];
              b[e3 + 12 >> 2] = b[h + 12 >> 2];
              bd2(f2, a2) | 0;
              a2 = ed(f2, e3) | 0;
            } while ((a2 | 0) != 0);
            a2 = ad(f2) | 0;
          } while ((a2 | 0) != 0);
        }
        $c(f2);
        a2 = tc(d2) | 0;
        if (!a2) {
          h = 0;
          T = g2;
          return h | 0;
        }
        sc(d2);
        h = a2;
        T = g2;
        return h | 0;
      }
      function ma(a2) {
        a2 = a2 | 0;
        if (a2 >>> 0 > 121) {
          a2 = 0;
          return a2 | 0;
        }
        a2 = b[7696 + (a2 * 28 | 0) + 16 >> 2] | 0;
        return a2 | 0;
      }
      function na(a2) {
        a2 = a2 | 0;
        return (a2 | 0) == 4 | (a2 | 0) == 117 | 0;
      }
      function oa(a2) {
        a2 = a2 | 0;
        return b[11120 + ((b[a2 >> 2] | 0) * 216 | 0) + ((b[a2 + 4 >> 2] | 0) * 72 | 0) + ((b[a2 + 8 >> 2] | 0) * 24 | 0) + (b[a2 + 12 >> 2] << 3) >> 2] | 0;
      }
      function pa(a2) {
        a2 = a2 | 0;
        return b[11120 + ((b[a2 >> 2] | 0) * 216 | 0) + ((b[a2 + 4 >> 2] | 0) * 72 | 0) + ((b[a2 + 8 >> 2] | 0) * 24 | 0) + (b[a2 + 12 >> 2] << 3) + 4 >> 2] | 0;
      }
      function qa(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        a2 = 7696 + (a2 * 28 | 0) | 0;
        b[c4 >> 2] = b[a2 >> 2];
        b[c4 + 4 >> 2] = b[a2 + 4 >> 2];
        b[c4 + 8 >> 2] = b[a2 + 8 >> 2];
        b[c4 + 12 >> 2] = b[a2 + 12 >> 2];
        return;
      }
      function ra(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0;
        if (c4 >>> 0 > 20) {
          c4 = -1;
          return c4 | 0;
        }
        do {
          if ((b[11120 + (c4 * 216 | 0) >> 2] | 0) != (a2 | 0)) {
            if ((b[11120 + (c4 * 216 | 0) + 8 >> 2] | 0) != (a2 | 0)) {
              if ((b[11120 + (c4 * 216 | 0) + 16 >> 2] | 0) != (a2 | 0)) {
                if ((b[11120 + (c4 * 216 | 0) + 24 >> 2] | 0) != (a2 | 0)) {
                  if ((b[11120 + (c4 * 216 | 0) + 32 >> 2] | 0) != (a2 | 0)) {
                    if ((b[11120 + (c4 * 216 | 0) + 40 >> 2] | 0) != (a2 | 0)) {
                      if ((b[11120 + (c4 * 216 | 0) + 48 >> 2] | 0) != (a2 | 0)) {
                        if ((b[11120 + (c4 * 216 | 0) + 56 >> 2] | 0) != (a2 | 0)) {
                          if ((b[11120 + (c4 * 216 | 0) + 64 >> 2] | 0) != (a2 | 0)) {
                            if ((b[11120 + (c4 * 216 | 0) + 72 >> 2] | 0) != (a2 | 0)) {
                              if ((b[11120 + (c4 * 216 | 0) + 80 >> 2] | 0) != (a2 | 0)) {
                                if ((b[11120 + (c4 * 216 | 0) + 88 >> 2] | 0) != (a2 | 0)) {
                                  if ((b[11120 + (c4 * 216 | 0) + 96 >> 2] | 0) != (a2 | 0)) {
                                    if ((b[11120 + (c4 * 216 | 0) + 104 >> 2] | 0) != (a2 | 0)) {
                                      if ((b[11120 + (c4 * 216 | 0) + 112 >> 2] | 0) != (a2 | 0)) {
                                        if ((b[11120 + (c4 * 216 | 0) + 120 >> 2] | 0) != (a2 | 0)) {
                                          if ((b[11120 + (c4 * 216 | 0) + 128 >> 2] | 0) != (a2 | 0)) {
                                            if ((b[11120 + (c4 * 216 | 0) + 136 >> 2] | 0) == (a2 | 0)) {
                                              a2 = 2;
                                              d2 = 1;
                                              e3 = 2;
                                            } else {
                                              if ((b[11120 + (c4 * 216 | 0) + 144 >> 2] | 0) == (a2 | 0)) {
                                                a2 = 0;
                                                d2 = 2;
                                                e3 = 0;
                                                break;
                                              }
                                              if ((b[11120 + (c4 * 216 | 0) + 152 >> 2] | 0) == (a2 | 0)) {
                                                a2 = 0;
                                                d2 = 2;
                                                e3 = 1;
                                                break;
                                              }
                                              if ((b[11120 + (c4 * 216 | 0) + 160 >> 2] | 0) == (a2 | 0)) {
                                                a2 = 0;
                                                d2 = 2;
                                                e3 = 2;
                                                break;
                                              }
                                              if ((b[11120 + (c4 * 216 | 0) + 168 >> 2] | 0) == (a2 | 0)) {
                                                a2 = 1;
                                                d2 = 2;
                                                e3 = 0;
                                                break;
                                              }
                                              if ((b[11120 + (c4 * 216 | 0) + 176 >> 2] | 0) == (a2 | 0)) {
                                                a2 = 1;
                                                d2 = 2;
                                                e3 = 1;
                                                break;
                                              }
                                              if ((b[11120 + (c4 * 216 | 0) + 184 >> 2] | 0) == (a2 | 0)) {
                                                a2 = 1;
                                                d2 = 2;
                                                e3 = 2;
                                                break;
                                              }
                                              if ((b[11120 + (c4 * 216 | 0) + 192 >> 2] | 0) == (a2 | 0)) {
                                                a2 = 2;
                                                d2 = 2;
                                                e3 = 0;
                                                break;
                                              }
                                              if ((b[11120 + (c4 * 216 | 0) + 200 >> 2] | 0) == (a2 | 0)) {
                                                a2 = 2;
                                                d2 = 2;
                                                e3 = 1;
                                                break;
                                              }
                                              if ((b[11120 + (c4 * 216 | 0) + 208 >> 2] | 0) == (a2 | 0)) {
                                                a2 = 2;
                                                d2 = 2;
                                                e3 = 2;
                                                break;
                                              } else {
                                                a2 = -1;
                                              }
                                              return a2 | 0;
                                            }
                                          } else {
                                            a2 = 2;
                                            d2 = 1;
                                            e3 = 1;
                                          }
                                        } else {
                                          a2 = 2;
                                          d2 = 1;
                                          e3 = 0;
                                        }
                                      } else {
                                        a2 = 1;
                                        d2 = 1;
                                        e3 = 2;
                                      }
                                    } else {
                                      a2 = 1;
                                      d2 = 1;
                                      e3 = 1;
                                    }
                                  } else {
                                    a2 = 1;
                                    d2 = 1;
                                    e3 = 0;
                                  }
                                } else {
                                  a2 = 0;
                                  d2 = 1;
                                  e3 = 2;
                                }
                              } else {
                                a2 = 0;
                                d2 = 1;
                                e3 = 1;
                              }
                            } else {
                              a2 = 0;
                              d2 = 1;
                              e3 = 0;
                            }
                          } else {
                            a2 = 2;
                            d2 = 0;
                            e3 = 2;
                          }
                        } else {
                          a2 = 2;
                          d2 = 0;
                          e3 = 1;
                        }
                      } else {
                        a2 = 2;
                        d2 = 0;
                        e3 = 0;
                      }
                    } else {
                      a2 = 1;
                      d2 = 0;
                      e3 = 2;
                    }
                  } else {
                    a2 = 1;
                    d2 = 0;
                    e3 = 1;
                  }
                } else {
                  a2 = 1;
                  d2 = 0;
                  e3 = 0;
                }
              } else {
                a2 = 0;
                d2 = 0;
                e3 = 2;
              }
            } else {
              a2 = 0;
              d2 = 0;
              e3 = 1;
            }
          } else {
            a2 = 0;
            d2 = 0;
            e3 = 0;
          }
        } while (0);
        c4 = b[11120 + (c4 * 216 | 0) + (d2 * 72 | 0) + (a2 * 24 | 0) + (e3 << 3) + 4 >> 2] | 0;
        return c4 | 0;
      }
      function sa(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        if ((b[7696 + (a2 * 28 | 0) + 20 >> 2] | 0) == (c4 | 0)) {
          c4 = 1;
          return c4 | 0;
        }
        c4 = (b[7696 + (a2 * 28 | 0) + 24 >> 2] | 0) == (c4 | 0);
        return c4 | 0;
      }
      function ta(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        return b[848 + (a2 * 28 | 0) + (c4 << 2) >> 2] | 0;
      }
      function ua(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        if ((b[848 + (a2 * 28 | 0) >> 2] | 0) == (c4 | 0)) {
          c4 = 0;
          return c4 | 0;
        }
        if ((b[848 + (a2 * 28 | 0) + 4 >> 2] | 0) == (c4 | 0)) {
          c4 = 1;
          return c4 | 0;
        }
        if ((b[848 + (a2 * 28 | 0) + 8 >> 2] | 0) == (c4 | 0)) {
          c4 = 2;
          return c4 | 0;
        }
        if ((b[848 + (a2 * 28 | 0) + 12 >> 2] | 0) == (c4 | 0)) {
          c4 = 3;
          return c4 | 0;
        }
        if ((b[848 + (a2 * 28 | 0) + 16 >> 2] | 0) == (c4 | 0)) {
          c4 = 4;
          return c4 | 0;
        }
        if ((b[848 + (a2 * 28 | 0) + 20 >> 2] | 0) == (c4 | 0)) {
          c4 = 5;
          return c4 | 0;
        } else {
          return ((b[848 + (a2 * 28 | 0) + 24 >> 2] | 0) == (c4 | 0) ? 6 : 7) | 0;
        }
        return 0;
      }
      function va() {
        return 122;
      }
      function wa(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0;
        c4 = 0;
        do {
          wd(c4 | 0, 0, 45) | 0;
          e3 = H() | 0 | 134225919;
          d2 = a2 + (c4 << 3) | 0;
          b[d2 >> 2] = -1;
          b[d2 + 4 >> 2] = e3;
          c4 = c4 + 1 | 0;
        } while ((c4 | 0) != 122);
        return 0;
      }
      function xa(a2) {
        a2 = a2 | 0;
        return +e[a2 + 16 >> 3] < +e[a2 + 24 >> 3] | 0;
      }
      function ya(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, f2 = 0;
        c4 = +e[b2 >> 3];
        if (!(c4 >= +e[a2 + 8 >> 3])) {
          b2 = 0;
          return b2 | 0;
        }
        if (!(c4 <= +e[a2 >> 3])) {
          b2 = 0;
          return b2 | 0;
        }
        d2 = +e[a2 + 16 >> 3];
        c4 = +e[a2 + 24 >> 3];
        f2 = +e[b2 + 8 >> 3];
        b2 = f2 >= c4;
        a2 = f2 <= d2 & 1;
        if (d2 < c4) {
          if (b2) {
            a2 = 1;
          }
        } else if (!b2) {
          a2 = 0;
        }
        b2 = (a2 | 0) != 0;
        return b2 | 0;
      }
      function za(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0;
        t4 = T;
        T = T + 288 | 0;
        n = t4 + 264 | 0;
        o = t4 + 96 | 0;
        m = t4;
        k = m;
        l = k + 96 | 0;
        do {
          b[k >> 2] = 0;
          k = k + 4 | 0;
        } while ((k | 0) < (l | 0));
        c4 = Ub(c4, m) | 0;
        if (c4 | 0) {
          s2 = c4;
          T = t4;
          return s2 | 0;
        }
        l = m;
        m = b[l >> 2] | 0;
        l = b[l + 4 >> 2] | 0;
        Pb(m, l, n) | 0;
        Qb(m, l, o) | 0;
        j = +ac2(n, o + 8 | 0);
        e[n >> 3] = +e[a2 >> 3];
        l = n + 8 | 0;
        e[l >> 3] = +e[a2 + 16 >> 3];
        e[o >> 3] = +e[a2 + 8 >> 3];
        m = o + 8 | 0;
        e[m >> 3] = +e[a2 + 24 >> 3];
        h = +ac2(n, o);
        v3 = +e[l >> 3] - +e[m >> 3];
        i = +q(+v3);
        u5 = +e[n >> 3] - +e[o >> 3];
        g2 = +q(+u5);
        if (!(v3 == 0 | u5 == 0) ? (v3 = +xd(+i, +g2), v3 = +A5(+(h * h / +yd(+(v3 / +yd(+i, +g2)), 3) / (j * (j * 2.59807621135) * 0.8))), e[f >> 3] = v3, r2 = ~~v3 >>> 0, s2 = +q(v3) >= 1 ? v3 > 0 ? ~~+C3(+p(v3 / 4294967296), 4294967295) >>> 0 : ~~+A5((v3 - +(~~v3 >>> 0)) / 4294967296) >>> 0 : 0, !((b[f + 4 >> 2] & 2146435072 | 0) == 2146435072)) : 0) {
          o = (r2 | 0) == 0 & (s2 | 0) == 0;
          c4 = d2;
          b[c4 >> 2] = o ? 1 : r2;
          b[c4 + 4 >> 2] = o ? 0 : s2;
          c4 = 0;
        } else {
          c4 = 1;
        }
        s2 = c4;
        T = t4;
        return s2 | 0;
      }
      function Aa(a2, c4, d2, g2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        g2 = g2 | 0;
        var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
        m = T;
        T = T + 288 | 0;
        j = m + 264 | 0;
        k = m + 96 | 0;
        l = m;
        h = l;
        i = h + 96 | 0;
        do {
          b[h >> 2] = 0;
          h = h + 4 | 0;
        } while ((h | 0) < (i | 0));
        d2 = Ub(d2, l) | 0;
        if (d2 | 0) {
          g2 = d2;
          T = m;
          return g2 | 0;
        }
        d2 = l;
        h = b[d2 >> 2] | 0;
        d2 = b[d2 + 4 >> 2] | 0;
        Pb(h, d2, j) | 0;
        Qb(h, d2, k) | 0;
        n = +ac2(j, k + 8 | 0);
        n = +A5(+(+ac2(a2, c4) / (n * 2)));
        e[f >> 3] = n;
        d2 = ~~n >>> 0;
        h = +q(n) >= 1 ? n > 0 ? ~~+C3(+p(n / 4294967296), 4294967295) >>> 0 : ~~+A5((n - +(~~n >>> 0)) / 4294967296) >>> 0 : 0;
        if ((b[f + 4 >> 2] & 2146435072 | 0) == 2146435072) {
          g2 = 1;
          T = m;
          return g2 | 0;
        }
        l = (d2 | 0) == 0 & (h | 0) == 0;
        b[g2 >> 2] = l ? 1 : d2;
        b[g2 + 4 >> 2] = l ? 0 : h;
        g2 = 0;
        T = m;
        return g2 | 0;
      }
      function Ba(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        b[a2 >> 2] = c4;
        b[a2 + 4 >> 2] = d2;
        b[a2 + 8 >> 2] = e3;
        return;
      }
      function Ca(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
        n = c4 + 8 | 0;
        b[n >> 2] = 0;
        k = +e[a2 >> 3];
        i = +q(+k);
        l = +e[a2 + 8 >> 3];
        j = +q(+l) / 0.8660254037844386;
        i = i + j * 0.5;
        d2 = ~~i;
        a2 = ~~j;
        i = i - +(d2 | 0);
        j = j - +(a2 | 0);
        do {
          if (i < 0.5) {
            if (i < 0.3333333333333333) {
              b[c4 >> 2] = d2;
              if (j < (i + 1) * 0.5) {
                b[c4 + 4 >> 2] = a2;
                break;
              } else {
                a2 = a2 + 1 | 0;
                b[c4 + 4 >> 2] = a2;
                break;
              }
            } else {
              o = 1 - i;
              a2 = (!(j < o) & 1) + a2 | 0;
              b[c4 + 4 >> 2] = a2;
              if (o <= j & j < i * 2) {
                d2 = d2 + 1 | 0;
                b[c4 >> 2] = d2;
                break;
              } else {
                b[c4 >> 2] = d2;
                break;
              }
            }
          } else {
            if (!(i < 0.6666666666666666)) {
              d2 = d2 + 1 | 0;
              b[c4 >> 2] = d2;
              if (j < i * 0.5) {
                b[c4 + 4 >> 2] = a2;
                break;
              } else {
                a2 = a2 + 1 | 0;
                b[c4 + 4 >> 2] = a2;
                break;
              }
            }
            if (j < 1 - i) {
              b[c4 + 4 >> 2] = a2;
              if (i * 2 + -1 < j) {
                b[c4 >> 2] = d2;
                break;
              }
            } else {
              a2 = a2 + 1 | 0;
              b[c4 + 4 >> 2] = a2;
            }
            d2 = d2 + 1 | 0;
            b[c4 >> 2] = d2;
          }
        } while (0);
        do {
          if (k < 0) {
            if (!(a2 & 1)) {
              m = (a2 | 0) / 2 | 0;
              m = md(d2 | 0, ((d2 | 0) < 0) << 31 >> 31 | 0, m | 0, ((m | 0) < 0) << 31 >> 31 | 0) | 0;
              d2 = ~~(+(d2 | 0) - (+(m >>> 0) + 4294967296 * +(H() | 0)) * 2);
              b[c4 >> 2] = d2;
              break;
            } else {
              m = (a2 + 1 | 0) / 2 | 0;
              m = md(d2 | 0, ((d2 | 0) < 0) << 31 >> 31 | 0, m | 0, ((m | 0) < 0) << 31 >> 31 | 0) | 0;
              d2 = ~~(+(d2 | 0) - ((+(m >>> 0) + 4294967296 * +(H() | 0)) * 2 + 1));
              b[c4 >> 2] = d2;
              break;
            }
          }
        } while (0);
        m = c4 + 4 | 0;
        if (l < 0) {
          d2 = d2 - ((a2 << 1 | 1 | 0) / 2 | 0) | 0;
          b[c4 >> 2] = d2;
          a2 = 0 - a2 | 0;
          b[m >> 2] = a2;
        }
        f2 = a2 - d2 | 0;
        if ((d2 | 0) < 0) {
          g2 = 0 - d2 | 0;
          b[m >> 2] = f2;
          b[n >> 2] = g2;
          b[c4 >> 2] = 0;
          a2 = f2;
          d2 = 0;
        } else {
          g2 = 0;
        }
        if ((a2 | 0) < 0) {
          d2 = d2 - a2 | 0;
          b[c4 >> 2] = d2;
          g2 = g2 - a2 | 0;
          b[n >> 2] = g2;
          b[m >> 2] = 0;
          a2 = 0;
        }
        h = d2 - g2 | 0;
        f2 = a2 - g2 | 0;
        if ((g2 | 0) < 0) {
          b[c4 >> 2] = h;
          b[m >> 2] = f2;
          b[n >> 2] = 0;
          a2 = f2;
          d2 = h;
          g2 = 0;
        }
        f2 = (a2 | 0) < (d2 | 0) ? a2 : d2;
        f2 = (g2 | 0) < (f2 | 0) ? g2 : f2;
        if ((f2 | 0) <= 0) {
          return;
        }
        b[c4 >> 2] = d2 - f2;
        b[m >> 2] = a2 - f2;
        b[n >> 2] = g2 - f2;
        return;
      }
      function Da(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0;
        c4 = b[a2 >> 2] | 0;
        h = a2 + 4 | 0;
        d2 = b[h >> 2] | 0;
        if ((c4 | 0) < 0) {
          d2 = d2 - c4 | 0;
          b[h >> 2] = d2;
          g2 = a2 + 8 | 0;
          b[g2 >> 2] = (b[g2 >> 2] | 0) - c4;
          b[a2 >> 2] = 0;
          c4 = 0;
        }
        if ((d2 | 0) < 0) {
          c4 = c4 - d2 | 0;
          b[a2 >> 2] = c4;
          g2 = a2 + 8 | 0;
          f2 = (b[g2 >> 2] | 0) - d2 | 0;
          b[g2 >> 2] = f2;
          b[h >> 2] = 0;
          d2 = 0;
        } else {
          f2 = a2 + 8 | 0;
          g2 = f2;
          f2 = b[f2 >> 2] | 0;
        }
        if ((f2 | 0) < 0) {
          c4 = c4 - f2 | 0;
          b[a2 >> 2] = c4;
          d2 = d2 - f2 | 0;
          b[h >> 2] = d2;
          b[g2 >> 2] = 0;
          f2 = 0;
        }
        e3 = (d2 | 0) < (c4 | 0) ? d2 : c4;
        e3 = (f2 | 0) < (e3 | 0) ? f2 : e3;
        if ((e3 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = c4 - e3;
        b[h >> 2] = d2 - e3;
        b[g2 >> 2] = f2 - e3;
        return;
      }
      function Ea(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, f2 = 0;
        f2 = b[a2 + 8 >> 2] | 0;
        d2 = +((b[a2 + 4 >> 2] | 0) - f2 | 0);
        e[c4 >> 3] = +((b[a2 >> 2] | 0) - f2 | 0) - d2 * 0.5;
        e[c4 + 8 >> 3] = d2 * 0.8660254037844386;
        return;
      }
      function Fa(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        b[d2 >> 2] = (b[c4 >> 2] | 0) + (b[a2 >> 2] | 0);
        b[d2 + 4 >> 2] = (b[c4 + 4 >> 2] | 0) + (b[a2 + 4 >> 2] | 0);
        b[d2 + 8 >> 2] = (b[c4 + 8 >> 2] | 0) + (b[a2 + 8 >> 2] | 0);
        return;
      }
      function Ga(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        b[d2 >> 2] = (b[a2 >> 2] | 0) - (b[c4 >> 2] | 0);
        b[d2 + 4 >> 2] = (b[a2 + 4 >> 2] | 0) - (b[c4 + 4 >> 2] | 0);
        b[d2 + 8 >> 2] = (b[a2 + 8 >> 2] | 0) - (b[c4 + 8 >> 2] | 0);
        return;
      }
      function Ha(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0;
        d2 = B3(b[a2 >> 2] | 0, c4) | 0;
        b[a2 >> 2] = d2;
        d2 = a2 + 4 | 0;
        e3 = B3(b[d2 >> 2] | 0, c4) | 0;
        b[d2 >> 2] = e3;
        a2 = a2 + 8 | 0;
        c4 = B3(b[a2 >> 2] | 0, c4) | 0;
        b[a2 >> 2] = c4;
        return;
      }
      function Ia(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        h = b[a2 >> 2] | 0;
        i = (h | 0) < 0;
        e3 = (b[a2 + 4 >> 2] | 0) - (i ? h : 0) | 0;
        g2 = (e3 | 0) < 0;
        f2 = (g2 ? 0 - e3 | 0 : 0) + ((b[a2 + 8 >> 2] | 0) - (i ? h : 0)) | 0;
        d2 = (f2 | 0) < 0;
        a2 = d2 ? 0 : f2;
        c4 = (g2 ? 0 : e3) - (d2 ? f2 : 0) | 0;
        f2 = (i ? 0 : h) - (g2 ? e3 : 0) - (d2 ? f2 : 0) | 0;
        d2 = (c4 | 0) < (f2 | 0) ? c4 : f2;
        d2 = (a2 | 0) < (d2 | 0) ? a2 : d2;
        e3 = (d2 | 0) > 0;
        a2 = a2 - (e3 ? d2 : 0) | 0;
        c4 = c4 - (e3 ? d2 : 0) | 0;
        a: do {
          switch (f2 - (e3 ? d2 : 0) | 0) {
            case 0:
              switch (c4 | 0) {
                case 0: {
                  i = (a2 | 0) == 0 ? 0 : (a2 | 0) == 1 ? 1 : 7;
                  return i | 0;
                }
                case 1: {
                  i = (a2 | 0) == 0 ? 2 : (a2 | 0) == 1 ? 3 : 7;
                  return i | 0;
                }
                default:
                  break a;
              }
            case 1:
              switch (c4 | 0) {
                case 0: {
                  i = (a2 | 0) == 0 ? 4 : (a2 | 0) == 1 ? 5 : 7;
                  return i | 0;
                }
                case 1: {
                  if (!a2) {
                    a2 = 6;
                  } else {
                    break a;
                  }
                  return a2 | 0;
                }
                default:
                  break a;
              }
            default:
          }
        } while (0);
        i = 7;
        return i | 0;
      }
      function Ja(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        h = a2 + 8 | 0;
        f2 = b[h >> 2] | 0;
        g2 = (b[a2 >> 2] | 0) - f2 | 0;
        i = a2 + 4 | 0;
        f2 = (b[i >> 2] | 0) - f2 | 0;
        do {
          if (g2 >>> 0 > 715827881 | f2 >>> 0 > 715827881) {
            d2 = (g2 | 0) > 0;
            if (d2) {
              if ((2147483647 - g2 | 0) < (g2 | 0)) {
                i = 1;
                return i | 0;
              }
              if ((2147483647 - (g2 << 1) | 0) < (g2 | 0)) {
                i = 1;
                return i | 0;
              }
            } else {
              if ((-2147483648 - g2 | 0) > (g2 | 0)) {
                i = 1;
                return i | 0;
              }
              if ((-2147483648 - (g2 << 1) | 0) > (g2 | 0)) {
                i = 1;
                return i | 0;
              }
            }
            c4 = g2 * 3 | 0;
            if ((f2 | 0) > 0) {
              if ((2147483647 - f2 | 0) < (f2 | 0)) {
                i = 1;
                return i | 0;
              }
            } else if ((-2147483648 - f2 | 0) > (f2 | 0)) {
              i = 1;
              return i | 0;
            }
            e3 = f2 << 1;
            if ((g2 | 0) > -1) {
              if ((c4 | -2147483648 | 0) >= (f2 | 0)) {
                i = 1;
                return i | 0;
              }
            } else if ((c4 ^ -2147483648 | 0) < (f2 | 0)) {
              i = 1;
              return i | 0;
            }
            if (d2) {
              if ((2147483647 - g2 | 0) < (e3 | 0)) {
                c4 = 1;
              } else {
                d2 = e3;
                break;
              }
              return c4 | 0;
            } else {
              if ((-2147483648 - g2 | 0) > (e3 | 0)) {
                c4 = 1;
              } else {
                d2 = e3;
                break;
              }
              return c4 | 0;
            }
          } else {
            d2 = f2 << 1;
            c4 = g2 * 3 | 0;
          }
        } while (0);
        e3 = hd(+(c4 - f2 | 0) / 7) | 0;
        b[a2 >> 2] = e3;
        f2 = hd(+(d2 + g2 | 0) / 7) | 0;
        b[i >> 2] = f2;
        b[h >> 2] = 0;
        d2 = (f2 | 0) < (e3 | 0);
        c4 = d2 ? e3 : f2;
        d2 = d2 ? f2 : e3;
        do {
          if ((d2 | 0) < 0) {
            if ((c4 | 0) > 0) {
              if ((c4 | -2147483648 | 0) < (d2 | 0) & ((d2 | 0) != -2147483648 & (2147483647 - c4 | 0) >= (d2 | 0))) {
                break;
              }
              I(23313, 22444, 355, 22455);
            }
            if ((d2 | 0) == -2147483648 | (-2147483648 - c4 | 0) > (d2 | 0)) {
              I(23313, 22444, 355, 22455);
            }
            if ((c4 | 0) > -1) {
              if ((c4 | -2147483648 | 0) < (d2 | 0)) {
                break;
              }
              I(23313, 22444, 355, 22455);
            } else {
              if ((c4 ^ -2147483648 | 0) >= (d2 | 0)) {
                break;
              }
              I(23313, 22444, 355, 22455);
            }
          }
        } while (0);
        c4 = f2 - e3 | 0;
        if ((e3 | 0) < 0) {
          d2 = 0 - e3 | 0;
          b[i >> 2] = c4;
          b[h >> 2] = d2;
          b[a2 >> 2] = 0;
          e3 = 0;
        } else {
          c4 = f2;
          d2 = 0;
        }
        if ((c4 | 0) < 0) {
          e3 = e3 - c4 | 0;
          b[a2 >> 2] = e3;
          d2 = d2 - c4 | 0;
          b[h >> 2] = d2;
          b[i >> 2] = 0;
          c4 = 0;
        }
        g2 = e3 - d2 | 0;
        f2 = c4 - d2 | 0;
        if ((d2 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[i >> 2] = f2;
          b[h >> 2] = 0;
          c4 = f2;
          f2 = g2;
          d2 = 0;
        } else {
          f2 = e3;
        }
        e3 = (c4 | 0) < (f2 | 0) ? c4 : f2;
        e3 = (d2 | 0) < (e3 | 0) ? d2 : e3;
        if ((e3 | 0) <= 0) {
          i = 0;
          return i | 0;
        }
        b[a2 >> 2] = f2 - e3;
        b[i >> 2] = c4 - e3;
        b[h >> 2] = d2 - e3;
        i = 0;
        return i | 0;
      }
      function Ka(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        h = a2 + 8 | 0;
        f2 = b[h >> 2] | 0;
        g2 = (b[a2 >> 2] | 0) - f2 | 0;
        i = a2 + 4 | 0;
        f2 = (b[i >> 2] | 0) - f2 | 0;
        do {
          if (g2 >>> 0 > 715827881 | f2 >>> 0 > 715827881) {
            d2 = (g2 | 0) > 0;
            if (d2) {
              if ((2147483647 - g2 | 0) < (g2 | 0)) {
                i = 1;
                return i | 0;
              }
            } else if ((-2147483648 - g2 | 0) > (g2 | 0)) {
              i = 1;
              return i | 0;
            }
            c4 = g2 << 1;
            if ((f2 | 0) > 0) {
              if ((2147483647 - f2 | 0) < (f2 | 0)) {
                i = 1;
                return i | 0;
              }
              if ((2147483647 - (f2 << 1) | 0) < (f2 | 0)) {
                i = 1;
                return i | 0;
              }
            } else {
              if ((-2147483648 - f2 | 0) > (f2 | 0)) {
                i = 1;
                return i | 0;
              }
              if ((-2147483648 - (f2 << 1) | 0) > (f2 | 0)) {
                i = 1;
                return i | 0;
              }
            }
            e3 = f2 * 3 | 0;
            if (d2) {
              if ((2147483647 - c4 | 0) < (f2 | 0)) {
                i = 1;
                return i | 0;
              }
            } else if ((-2147483648 - c4 | 0) > (f2 | 0)) {
              i = 1;
              return i | 0;
            }
            if ((f2 | 0) > -1) {
              if ((e3 | -2147483648 | 0) < (g2 | 0)) {
                d2 = e3;
                break;
              } else {
                c4 = 1;
              }
              return c4 | 0;
            } else {
              if ((e3 ^ -2147483648 | 0) < (g2 | 0)) {
                c4 = 1;
              } else {
                d2 = e3;
                break;
              }
              return c4 | 0;
            }
          } else {
            d2 = f2 * 3 | 0;
            c4 = g2 << 1;
          }
        } while (0);
        e3 = hd(+(c4 + f2 | 0) / 7) | 0;
        b[a2 >> 2] = e3;
        f2 = hd(+(d2 - g2 | 0) / 7) | 0;
        b[i >> 2] = f2;
        b[h >> 2] = 0;
        d2 = (f2 | 0) < (e3 | 0);
        c4 = d2 ? e3 : f2;
        d2 = d2 ? f2 : e3;
        do {
          if ((d2 | 0) < 0) {
            if ((c4 | 0) > 0) {
              if ((c4 | -2147483648 | 0) < (d2 | 0) & ((d2 | 0) != -2147483648 & (2147483647 - c4 | 0) >= (d2 | 0))) {
                break;
              }
              I(23313, 22444, 404, 22469);
            }
            if ((d2 | 0) == -2147483648 | (-2147483648 - c4 | 0) > (d2 | 0)) {
              I(23313, 22444, 404, 22469);
            }
            if ((c4 | 0) > -1) {
              if ((c4 | -2147483648 | 0) < (d2 | 0)) {
                break;
              }
              I(23313, 22444, 404, 22469);
            } else {
              if ((c4 ^ -2147483648 | 0) >= (d2 | 0)) {
                break;
              }
              I(23313, 22444, 404, 22469);
            }
          }
        } while (0);
        c4 = f2 - e3 | 0;
        if ((e3 | 0) < 0) {
          d2 = 0 - e3 | 0;
          b[i >> 2] = c4;
          b[h >> 2] = d2;
          b[a2 >> 2] = 0;
          e3 = 0;
        } else {
          c4 = f2;
          d2 = 0;
        }
        if ((c4 | 0) < 0) {
          e3 = e3 - c4 | 0;
          b[a2 >> 2] = e3;
          d2 = d2 - c4 | 0;
          b[h >> 2] = d2;
          b[i >> 2] = 0;
          c4 = 0;
        }
        g2 = e3 - d2 | 0;
        f2 = c4 - d2 | 0;
        if ((d2 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[i >> 2] = f2;
          b[h >> 2] = 0;
          c4 = f2;
          f2 = g2;
          d2 = 0;
        } else {
          f2 = e3;
        }
        e3 = (c4 | 0) < (f2 | 0) ? c4 : f2;
        e3 = (d2 | 0) < (e3 | 0) ? d2 : e3;
        if ((e3 | 0) <= 0) {
          i = 0;
          return i | 0;
        }
        b[a2 >> 2] = f2 - e3;
        b[i >> 2] = c4 - e3;
        b[h >> 2] = d2 - e3;
        i = 0;
        return i | 0;
      }
      function La(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        h = a2 + 8 | 0;
        d2 = b[h >> 2] | 0;
        c4 = (b[a2 >> 2] | 0) - d2 | 0;
        i = a2 + 4 | 0;
        d2 = (b[i >> 2] | 0) - d2 | 0;
        e3 = hd(+((c4 * 3 | 0) - d2 | 0) / 7) | 0;
        b[a2 >> 2] = e3;
        c4 = hd(+((d2 << 1) + c4 | 0) / 7) | 0;
        b[i >> 2] = c4;
        b[h >> 2] = 0;
        d2 = c4 - e3 | 0;
        if ((e3 | 0) < 0) {
          g2 = 0 - e3 | 0;
          b[i >> 2] = d2;
          b[h >> 2] = g2;
          b[a2 >> 2] = 0;
          c4 = d2;
          e3 = 0;
          d2 = g2;
        } else {
          d2 = 0;
        }
        if ((c4 | 0) < 0) {
          e3 = e3 - c4 | 0;
          b[a2 >> 2] = e3;
          d2 = d2 - c4 | 0;
          b[h >> 2] = d2;
          b[i >> 2] = 0;
          c4 = 0;
        }
        g2 = e3 - d2 | 0;
        f2 = c4 - d2 | 0;
        if ((d2 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[i >> 2] = f2;
          b[h >> 2] = 0;
          c4 = f2;
          f2 = g2;
          d2 = 0;
        } else {
          f2 = e3;
        }
        e3 = (c4 | 0) < (f2 | 0) ? c4 : f2;
        e3 = (d2 | 0) < (e3 | 0) ? d2 : e3;
        if ((e3 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = f2 - e3;
        b[i >> 2] = c4 - e3;
        b[h >> 2] = d2 - e3;
        return;
      }
      function Ma(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        h = a2 + 8 | 0;
        d2 = b[h >> 2] | 0;
        c4 = (b[a2 >> 2] | 0) - d2 | 0;
        i = a2 + 4 | 0;
        d2 = (b[i >> 2] | 0) - d2 | 0;
        e3 = hd(+((c4 << 1) + d2 | 0) / 7) | 0;
        b[a2 >> 2] = e3;
        c4 = hd(+((d2 * 3 | 0) - c4 | 0) / 7) | 0;
        b[i >> 2] = c4;
        b[h >> 2] = 0;
        d2 = c4 - e3 | 0;
        if ((e3 | 0) < 0) {
          g2 = 0 - e3 | 0;
          b[i >> 2] = d2;
          b[h >> 2] = g2;
          b[a2 >> 2] = 0;
          c4 = d2;
          e3 = 0;
          d2 = g2;
        } else {
          d2 = 0;
        }
        if ((c4 | 0) < 0) {
          e3 = e3 - c4 | 0;
          b[a2 >> 2] = e3;
          d2 = d2 - c4 | 0;
          b[h >> 2] = d2;
          b[i >> 2] = 0;
          c4 = 0;
        }
        g2 = e3 - d2 | 0;
        f2 = c4 - d2 | 0;
        if ((d2 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[i >> 2] = f2;
          b[h >> 2] = 0;
          c4 = f2;
          f2 = g2;
          d2 = 0;
        } else {
          f2 = e3;
        }
        e3 = (c4 | 0) < (f2 | 0) ? c4 : f2;
        e3 = (d2 | 0) < (e3 | 0) ? d2 : e3;
        if ((e3 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = f2 - e3;
        b[i >> 2] = c4 - e3;
        b[h >> 2] = d2 - e3;
        return;
      }
      function Na(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        c4 = b[a2 >> 2] | 0;
        h = a2 + 4 | 0;
        d2 = b[h >> 2] | 0;
        i = a2 + 8 | 0;
        e3 = b[i >> 2] | 0;
        f2 = d2 + (c4 * 3 | 0) | 0;
        b[a2 >> 2] = f2;
        d2 = e3 + (d2 * 3 | 0) | 0;
        b[h >> 2] = d2;
        c4 = (e3 * 3 | 0) + c4 | 0;
        b[i >> 2] = c4;
        e3 = d2 - f2 | 0;
        if ((f2 | 0) < 0) {
          c4 = c4 - f2 | 0;
          b[h >> 2] = e3;
          b[i >> 2] = c4;
          b[a2 >> 2] = 0;
          d2 = e3;
          e3 = 0;
        } else {
          e3 = f2;
        }
        if ((d2 | 0) < 0) {
          e3 = e3 - d2 | 0;
          b[a2 >> 2] = e3;
          c4 = c4 - d2 | 0;
          b[i >> 2] = c4;
          b[h >> 2] = 0;
          d2 = 0;
        }
        g2 = e3 - c4 | 0;
        f2 = d2 - c4 | 0;
        if ((c4 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[h >> 2] = f2;
          b[i >> 2] = 0;
          e3 = g2;
          c4 = 0;
        } else {
          f2 = d2;
        }
        d2 = (f2 | 0) < (e3 | 0) ? f2 : e3;
        d2 = (c4 | 0) < (d2 | 0) ? c4 : d2;
        if ((d2 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = e3 - d2;
        b[h >> 2] = f2 - d2;
        b[i >> 2] = c4 - d2;
        return;
      }
      function Oa(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        f2 = b[a2 >> 2] | 0;
        h = a2 + 4 | 0;
        c4 = b[h >> 2] | 0;
        i = a2 + 8 | 0;
        d2 = b[i >> 2] | 0;
        e3 = (c4 * 3 | 0) + f2 | 0;
        f2 = d2 + (f2 * 3 | 0) | 0;
        b[a2 >> 2] = f2;
        b[h >> 2] = e3;
        c4 = (d2 * 3 | 0) + c4 | 0;
        b[i >> 2] = c4;
        d2 = e3 - f2 | 0;
        if ((f2 | 0) < 0) {
          c4 = c4 - f2 | 0;
          b[h >> 2] = d2;
          b[i >> 2] = c4;
          b[a2 >> 2] = 0;
          f2 = 0;
        } else {
          d2 = e3;
        }
        if ((d2 | 0) < 0) {
          f2 = f2 - d2 | 0;
          b[a2 >> 2] = f2;
          c4 = c4 - d2 | 0;
          b[i >> 2] = c4;
          b[h >> 2] = 0;
          d2 = 0;
        }
        g2 = f2 - c4 | 0;
        e3 = d2 - c4 | 0;
        if ((c4 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[h >> 2] = e3;
          b[i >> 2] = 0;
          f2 = g2;
          c4 = 0;
        } else {
          e3 = d2;
        }
        d2 = (e3 | 0) < (f2 | 0) ? e3 : f2;
        d2 = (c4 | 0) < (d2 | 0) ? c4 : d2;
        if ((d2 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = f2 - d2;
        b[h >> 2] = e3 - d2;
        b[i >> 2] = c4 - d2;
        return;
      }
      function Pa(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        if ((c4 + -1 | 0) >>> 0 >= 6) {
          return;
        }
        f2 = (b[15440 + (c4 * 12 | 0) >> 2] | 0) + (b[a2 >> 2] | 0) | 0;
        b[a2 >> 2] = f2;
        i = a2 + 4 | 0;
        e3 = (b[15440 + (c4 * 12 | 0) + 4 >> 2] | 0) + (b[i >> 2] | 0) | 0;
        b[i >> 2] = e3;
        h = a2 + 8 | 0;
        c4 = (b[15440 + (c4 * 12 | 0) + 8 >> 2] | 0) + (b[h >> 2] | 0) | 0;
        b[h >> 2] = c4;
        d2 = e3 - f2 | 0;
        if ((f2 | 0) < 0) {
          c4 = c4 - f2 | 0;
          b[i >> 2] = d2;
          b[h >> 2] = c4;
          b[a2 >> 2] = 0;
          e3 = 0;
        } else {
          d2 = e3;
          e3 = f2;
        }
        if ((d2 | 0) < 0) {
          e3 = e3 - d2 | 0;
          b[a2 >> 2] = e3;
          c4 = c4 - d2 | 0;
          b[h >> 2] = c4;
          b[i >> 2] = 0;
          d2 = 0;
        }
        g2 = e3 - c4 | 0;
        f2 = d2 - c4 | 0;
        if ((c4 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[i >> 2] = f2;
          b[h >> 2] = 0;
          e3 = g2;
          c4 = 0;
        } else {
          f2 = d2;
        }
        d2 = (f2 | 0) < (e3 | 0) ? f2 : e3;
        d2 = (c4 | 0) < (d2 | 0) ? c4 : d2;
        if ((d2 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = e3 - d2;
        b[i >> 2] = f2 - d2;
        b[h >> 2] = c4 - d2;
        return;
      }
      function Qa(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        f2 = b[a2 >> 2] | 0;
        h = a2 + 4 | 0;
        c4 = b[h >> 2] | 0;
        i = a2 + 8 | 0;
        d2 = b[i >> 2] | 0;
        e3 = c4 + f2 | 0;
        f2 = d2 + f2 | 0;
        b[a2 >> 2] = f2;
        b[h >> 2] = e3;
        c4 = d2 + c4 | 0;
        b[i >> 2] = c4;
        d2 = e3 - f2 | 0;
        if ((f2 | 0) < 0) {
          c4 = c4 - f2 | 0;
          b[h >> 2] = d2;
          b[i >> 2] = c4;
          b[a2 >> 2] = 0;
          e3 = 0;
        } else {
          d2 = e3;
          e3 = f2;
        }
        if ((d2 | 0) < 0) {
          e3 = e3 - d2 | 0;
          b[a2 >> 2] = e3;
          c4 = c4 - d2 | 0;
          b[i >> 2] = c4;
          b[h >> 2] = 0;
          d2 = 0;
        }
        g2 = e3 - c4 | 0;
        f2 = d2 - c4 | 0;
        if ((c4 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[h >> 2] = f2;
          b[i >> 2] = 0;
          e3 = g2;
          c4 = 0;
        } else {
          f2 = d2;
        }
        d2 = (f2 | 0) < (e3 | 0) ? f2 : e3;
        d2 = (c4 | 0) < (d2 | 0) ? c4 : d2;
        if ((d2 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = e3 - d2;
        b[h >> 2] = f2 - d2;
        b[i >> 2] = c4 - d2;
        return;
      }
      function Ra(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        c4 = b[a2 >> 2] | 0;
        h = a2 + 4 | 0;
        e3 = b[h >> 2] | 0;
        i = a2 + 8 | 0;
        d2 = b[i >> 2] | 0;
        f2 = e3 + c4 | 0;
        b[a2 >> 2] = f2;
        e3 = d2 + e3 | 0;
        b[h >> 2] = e3;
        c4 = d2 + c4 | 0;
        b[i >> 2] = c4;
        d2 = e3 - f2 | 0;
        if ((f2 | 0) < 0) {
          c4 = c4 - f2 | 0;
          b[h >> 2] = d2;
          b[i >> 2] = c4;
          b[a2 >> 2] = 0;
          e3 = 0;
        } else {
          d2 = e3;
          e3 = f2;
        }
        if ((d2 | 0) < 0) {
          e3 = e3 - d2 | 0;
          b[a2 >> 2] = e3;
          c4 = c4 - d2 | 0;
          b[i >> 2] = c4;
          b[h >> 2] = 0;
          d2 = 0;
        }
        g2 = e3 - c4 | 0;
        f2 = d2 - c4 | 0;
        if ((c4 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[h >> 2] = f2;
          b[i >> 2] = 0;
          e3 = g2;
          c4 = 0;
        } else {
          f2 = d2;
        }
        d2 = (f2 | 0) < (e3 | 0) ? f2 : e3;
        d2 = (c4 | 0) < (d2 | 0) ? c4 : d2;
        if ((d2 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = e3 - d2;
        b[h >> 2] = f2 - d2;
        b[i >> 2] = c4 - d2;
        return;
      }
      function Sa(a2) {
        a2 = a2 | 0;
        switch (a2 | 0) {
          case 1: {
            a2 = 5;
            break;
          }
          case 5: {
            a2 = 4;
            break;
          }
          case 4: {
            a2 = 6;
            break;
          }
          case 6: {
            a2 = 2;
            break;
          }
          case 2: {
            a2 = 3;
            break;
          }
          case 3: {
            a2 = 1;
            break;
          }
          default:
        }
        return a2 | 0;
      }
      function Ta(a2) {
        a2 = a2 | 0;
        switch (a2 | 0) {
          case 1: {
            a2 = 3;
            break;
          }
          case 3: {
            a2 = 2;
            break;
          }
          case 2: {
            a2 = 6;
            break;
          }
          case 6: {
            a2 = 4;
            break;
          }
          case 4: {
            a2 = 5;
            break;
          }
          case 5: {
            a2 = 1;
            break;
          }
          default:
        }
        return a2 | 0;
      }
      function Ua(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        c4 = b[a2 >> 2] | 0;
        h = a2 + 4 | 0;
        d2 = b[h >> 2] | 0;
        i = a2 + 8 | 0;
        e3 = b[i >> 2] | 0;
        f2 = d2 + (c4 << 1) | 0;
        b[a2 >> 2] = f2;
        d2 = e3 + (d2 << 1) | 0;
        b[h >> 2] = d2;
        c4 = (e3 << 1) + c4 | 0;
        b[i >> 2] = c4;
        e3 = d2 - f2 | 0;
        if ((f2 | 0) < 0) {
          c4 = c4 - f2 | 0;
          b[h >> 2] = e3;
          b[i >> 2] = c4;
          b[a2 >> 2] = 0;
          d2 = e3;
          e3 = 0;
        } else {
          e3 = f2;
        }
        if ((d2 | 0) < 0) {
          e3 = e3 - d2 | 0;
          b[a2 >> 2] = e3;
          c4 = c4 - d2 | 0;
          b[i >> 2] = c4;
          b[h >> 2] = 0;
          d2 = 0;
        }
        g2 = e3 - c4 | 0;
        f2 = d2 - c4 | 0;
        if ((c4 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[h >> 2] = f2;
          b[i >> 2] = 0;
          e3 = g2;
          c4 = 0;
        } else {
          f2 = d2;
        }
        d2 = (f2 | 0) < (e3 | 0) ? f2 : e3;
        d2 = (c4 | 0) < (d2 | 0) ? c4 : d2;
        if ((d2 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = e3 - d2;
        b[h >> 2] = f2 - d2;
        b[i >> 2] = c4 - d2;
        return;
      }
      function Va(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        f2 = b[a2 >> 2] | 0;
        h = a2 + 4 | 0;
        c4 = b[h >> 2] | 0;
        i = a2 + 8 | 0;
        d2 = b[i >> 2] | 0;
        e3 = (c4 << 1) + f2 | 0;
        f2 = d2 + (f2 << 1) | 0;
        b[a2 >> 2] = f2;
        b[h >> 2] = e3;
        c4 = (d2 << 1) + c4 | 0;
        b[i >> 2] = c4;
        d2 = e3 - f2 | 0;
        if ((f2 | 0) < 0) {
          c4 = c4 - f2 | 0;
          b[h >> 2] = d2;
          b[i >> 2] = c4;
          b[a2 >> 2] = 0;
          f2 = 0;
        } else {
          d2 = e3;
        }
        if ((d2 | 0) < 0) {
          f2 = f2 - d2 | 0;
          b[a2 >> 2] = f2;
          c4 = c4 - d2 | 0;
          b[i >> 2] = c4;
          b[h >> 2] = 0;
          d2 = 0;
        }
        g2 = f2 - c4 | 0;
        e3 = d2 - c4 | 0;
        if ((c4 | 0) < 0) {
          b[a2 >> 2] = g2;
          b[h >> 2] = e3;
          b[i >> 2] = 0;
          f2 = g2;
          c4 = 0;
        } else {
          e3 = d2;
        }
        d2 = (e3 | 0) < (f2 | 0) ? e3 : f2;
        d2 = (c4 | 0) < (d2 | 0) ? c4 : d2;
        if ((d2 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = f2 - d2;
        b[h >> 2] = e3 - d2;
        b[i >> 2] = c4 - d2;
        return;
      }
      function Wa(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        h = (b[a2 >> 2] | 0) - (b[c4 >> 2] | 0) | 0;
        i = (h | 0) < 0;
        e3 = (b[a2 + 4 >> 2] | 0) - (b[c4 + 4 >> 2] | 0) - (i ? h : 0) | 0;
        g2 = (e3 | 0) < 0;
        f2 = (i ? 0 - h | 0 : 0) + (b[a2 + 8 >> 2] | 0) - (b[c4 + 8 >> 2] | 0) + (g2 ? 0 - e3 | 0 : 0) | 0;
        a2 = (f2 | 0) < 0;
        c4 = a2 ? 0 : f2;
        d2 = (g2 ? 0 : e3) - (a2 ? f2 : 0) | 0;
        f2 = (i ? 0 : h) - (g2 ? e3 : 0) - (a2 ? f2 : 0) | 0;
        a2 = (d2 | 0) < (f2 | 0) ? d2 : f2;
        a2 = (c4 | 0) < (a2 | 0) ? c4 : a2;
        e3 = (a2 | 0) > 0;
        c4 = c4 - (e3 ? a2 : 0) | 0;
        d2 = d2 - (e3 ? a2 : 0) | 0;
        a2 = f2 - (e3 ? a2 : 0) | 0;
        a2 = (a2 | 0) > -1 ? a2 : 0 - a2 | 0;
        d2 = (d2 | 0) > -1 ? d2 : 0 - d2 | 0;
        c4 = (c4 | 0) > -1 ? c4 : 0 - c4 | 0;
        c4 = (d2 | 0) > (c4 | 0) ? d2 : c4;
        return ((a2 | 0) > (c4 | 0) ? a2 : c4) | 0;
      }
      function Xa(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0;
        d2 = b[a2 + 8 >> 2] | 0;
        b[c4 >> 2] = (b[a2 >> 2] | 0) - d2;
        b[c4 + 4 >> 2] = (b[a2 + 4 >> 2] | 0) - d2;
        return;
      }
      function Ya(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        e3 = b[a2 >> 2] | 0;
        b[c4 >> 2] = e3;
        f2 = b[a2 + 4 >> 2] | 0;
        h = c4 + 4 | 0;
        b[h >> 2] = f2;
        i = c4 + 8 | 0;
        b[i >> 2] = 0;
        d2 = (f2 | 0) < (e3 | 0);
        a2 = d2 ? e3 : f2;
        d2 = d2 ? f2 : e3;
        do {
          if ((d2 | 0) < 0) {
            if ((a2 | 0) > 0) {
              if ((a2 | -2147483648 | 0) < (d2 | 0) & ((d2 | 0) != -2147483648 & (2147483647 - a2 | 0) >= (d2 | 0))) {
                break;
              } else {
                a2 = 1;
              }
              return a2 | 0;
            }
            if ((d2 | 0) == -2147483648 | (-2147483648 - a2 | 0) > (d2 | 0)) {
              c4 = 1;
              return c4 | 0;
            }
            if ((a2 | 0) > -1) {
              if ((a2 | -2147483648 | 0) < (d2 | 0)) {
                break;
              } else {
                a2 = 1;
              }
              return a2 | 0;
            } else {
              if ((a2 ^ -2147483648 | 0) < (d2 | 0)) {
                a2 = 1;
              } else {
                break;
              }
              return a2 | 0;
            }
          }
        } while (0);
        a2 = f2 - e3 | 0;
        if ((e3 | 0) < 0) {
          d2 = 0 - e3 | 0;
          b[h >> 2] = a2;
          b[i >> 2] = d2;
          b[c4 >> 2] = 0;
          e3 = 0;
        } else {
          a2 = f2;
          d2 = 0;
        }
        if ((a2 | 0) < 0) {
          e3 = e3 - a2 | 0;
          b[c4 >> 2] = e3;
          d2 = d2 - a2 | 0;
          b[i >> 2] = d2;
          b[h >> 2] = 0;
          a2 = 0;
        }
        g2 = e3 - d2 | 0;
        f2 = a2 - d2 | 0;
        if ((d2 | 0) < 0) {
          b[c4 >> 2] = g2;
          b[h >> 2] = f2;
          b[i >> 2] = 0;
          a2 = f2;
          f2 = g2;
          d2 = 0;
        } else {
          f2 = e3;
        }
        e3 = (a2 | 0) < (f2 | 0) ? a2 : f2;
        e3 = (d2 | 0) < (e3 | 0) ? d2 : e3;
        if ((e3 | 0) <= 0) {
          c4 = 0;
          return c4 | 0;
        }
        b[c4 >> 2] = f2 - e3;
        b[h >> 2] = a2 - e3;
        b[i >> 2] = d2 - e3;
        c4 = 0;
        return c4 | 0;
      }
      function Za(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0;
        c4 = a2 + 8 | 0;
        f2 = b[c4 >> 2] | 0;
        d2 = f2 - (b[a2 >> 2] | 0) | 0;
        b[a2 >> 2] = d2;
        e3 = a2 + 4 | 0;
        a2 = (b[e3 >> 2] | 0) - f2 | 0;
        b[e3 >> 2] = a2;
        b[c4 >> 2] = 0 - (a2 + d2);
        return;
      }
      function _a2(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        d2 = b[a2 >> 2] | 0;
        c4 = 0 - d2 | 0;
        b[a2 >> 2] = c4;
        h = a2 + 8 | 0;
        b[h >> 2] = 0;
        i = a2 + 4 | 0;
        e3 = b[i >> 2] | 0;
        f2 = e3 + d2 | 0;
        if ((d2 | 0) > 0) {
          b[i >> 2] = f2;
          b[h >> 2] = d2;
          b[a2 >> 2] = 0;
          c4 = 0;
          e3 = f2;
        } else {
          d2 = 0;
        }
        if ((e3 | 0) < 0) {
          g2 = c4 - e3 | 0;
          b[a2 >> 2] = g2;
          d2 = d2 - e3 | 0;
          b[h >> 2] = d2;
          b[i >> 2] = 0;
          f2 = g2 - d2 | 0;
          c4 = 0 - d2 | 0;
          if ((d2 | 0) < 0) {
            b[a2 >> 2] = f2;
            b[i >> 2] = c4;
            b[h >> 2] = 0;
            e3 = c4;
            d2 = 0;
          } else {
            e3 = 0;
            f2 = g2;
          }
        } else {
          f2 = c4;
        }
        c4 = (e3 | 0) < (f2 | 0) ? e3 : f2;
        c4 = (d2 | 0) < (c4 | 0) ? d2 : c4;
        if ((c4 | 0) <= 0) {
          return;
        }
        b[a2 >> 2] = f2 - c4;
        b[i >> 2] = e3 - c4;
        b[h >> 2] = d2 - c4;
        return;
      }
      function $a(a2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
        m = T;
        T = T + 64 | 0;
        l = m;
        i = m + 56 | 0;
        if (!(true & (c4 & 2013265920 | 0) == 134217728 & (true & (e3 & 2013265920 | 0) == 134217728))) {
          f2 = 5;
          T = m;
          return f2 | 0;
        }
        if ((a2 | 0) == (d2 | 0) & (c4 | 0) == (e3 | 0)) {
          b[f2 >> 2] = 0;
          f2 = 0;
          T = m;
          return f2 | 0;
        }
        h = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        h = h & 15;
        k = vd(d2 | 0, e3 | 0, 52) | 0;
        H() | 0;
        if ((h | 0) != (k & 15 | 0)) {
          f2 = 12;
          T = m;
          return f2 | 0;
        }
        g2 = h + -1 | 0;
        if (h >>> 0 > 1) {
          vb(a2, c4, g2, l) | 0;
          vb(d2, e3, g2, i) | 0;
          k = l;
          j = b[k >> 2] | 0;
          k = b[k + 4 >> 2] | 0;
          a: do {
            if ((j | 0) == (b[i >> 2] | 0) ? (k | 0) == (b[i + 4 >> 2] | 0) : 0) {
              h = (h ^ 15) * 3 | 0;
              g2 = vd(a2 | 0, c4 | 0, h | 0) | 0;
              H() | 0;
              g2 = g2 & 7;
              h = vd(d2 | 0, e3 | 0, h | 0) | 0;
              H() | 0;
              h = h & 7;
              do {
                if (!((g2 | 0) == 0 | (h | 0) == 0)) {
                  if ((g2 | 0) == 7) {
                    g2 = 5;
                  } else {
                    if ((g2 | 0) == 1 | (h | 0) == 1 ? xb(j, k) | 0 : 0) {
                      g2 = 5;
                      break;
                    }
                    if ((b[15536 + (g2 << 2) >> 2] | 0) != (h | 0) ? (b[15568 + (g2 << 2) >> 2] | 0) != (h | 0) : 0) {
                      break a;
                    }
                    b[f2 >> 2] = 1;
                    g2 = 0;
                  }
                } else {
                  b[f2 >> 2] = 1;
                  g2 = 0;
                }
              } while (0);
              f2 = g2;
              T = m;
              return f2 | 0;
            }
          } while (0);
        }
        g2 = l;
        h = g2 + 56 | 0;
        do {
          b[g2 >> 2] = 0;
          g2 = g2 + 4 | 0;
        } while ((g2 | 0) < (h | 0));
        aa2(a2, c4, 1, l) | 0;
        c4 = l;
        if (((((!((b[c4 >> 2] | 0) == (d2 | 0) ? (b[c4 + 4 >> 2] | 0) == (e3 | 0) : 0) ? (c4 = l + 8 | 0, !((b[c4 >> 2] | 0) == (d2 | 0) ? (b[c4 + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (c4 = l + 16 | 0, !((b[c4 >> 2] | 0) == (d2 | 0) ? (b[c4 + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (c4 = l + 24 | 0, !((b[c4 >> 2] | 0) == (d2 | 0) ? (b[c4 + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (c4 = l + 32 | 0, !((b[c4 >> 2] | 0) == (d2 | 0) ? (b[c4 + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) ? (c4 = l + 40 | 0, !((b[c4 >> 2] | 0) == (d2 | 0) ? (b[c4 + 4 >> 2] | 0) == (e3 | 0) : 0)) : 0) {
          g2 = l + 48 | 0;
          g2 = ((b[g2 >> 2] | 0) == (d2 | 0) ? (b[g2 + 4 >> 2] | 0) == (e3 | 0) : 0) & 1;
        } else {
          g2 = 1;
        }
        b[f2 >> 2] = g2;
        f2 = 0;
        T = m;
        return f2 | 0;
      }
      function ab4(a2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        d2 = fa(a2, c4, d2, e3) | 0;
        if ((d2 | 0) == 7) {
          f2 = 11;
          return f2 | 0;
        }
        e3 = wd(d2 | 0, 0, 56) | 0;
        c4 = c4 & -2130706433 | (H() | 0) | 268435456;
        b[f2 >> 2] = a2 | e3;
        b[f2 + 4 >> 2] = c4;
        f2 = 0;
        return f2 | 0;
      }
      function bb2(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        if (!(true & (c4 & 2013265920 | 0) == 268435456)) {
          d2 = 6;
          return d2 | 0;
        }
        b[d2 >> 2] = a2;
        b[d2 + 4 >> 2] = c4 & -2130706433 | 134217728;
        d2 = 0;
        return d2 | 0;
      }
      function cb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0;
        f2 = T;
        T = T + 16 | 0;
        e3 = f2;
        b[e3 >> 2] = 0;
        if (!(true & (c4 & 2013265920 | 0) == 268435456)) {
          e3 = 6;
          T = f2;
          return e3 | 0;
        }
        g2 = vd(a2 | 0, c4 | 0, 56) | 0;
        H() | 0;
        e3 = ea2(a2, c4 & -2130706433 | 134217728, g2 & 7, e3, d2) | 0;
        T = f2;
        return e3 | 0;
      }
      function db(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0;
        c4 = vd(a2 | 0, b2 | 0, 56) | 0;
        H() | 0;
        switch (c4 & 7) {
          case 0:
          case 7: {
            c4 = 0;
            return c4 | 0;
          }
          default:
        }
        c4 = b2 & -2130706433 | 134217728;
        if (!(true & (b2 & 2013265920 | 0) == 268435456)) {
          c4 = 0;
          return c4 | 0;
        }
        if (true & (b2 & 117440512 | 0) == 16777216 & (xb(a2, c4) | 0) != 0) {
          c4 = 0;
          return c4 | 0;
        }
        c4 = ub(a2, c4) | 0;
        return c4 | 0;
      }
      function eb2(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0;
        f2 = T;
        T = T + 16 | 0;
        e3 = f2;
        if (!(true & (c4 & 2013265920 | 0) == 268435456)) {
          e3 = 6;
          T = f2;
          return e3 | 0;
        }
        g2 = c4 & -2130706433 | 134217728;
        h = d2;
        b[h >> 2] = a2;
        b[h + 4 >> 2] = g2;
        b[e3 >> 2] = 0;
        c4 = vd(a2 | 0, c4 | 0, 56) | 0;
        H() | 0;
        e3 = ea2(a2, g2, c4 & 7, e3, d2 + 8 | 0) | 0;
        T = f2;
        return e3 | 0;
      }
      function fb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0;
        f2 = (xb(a2, c4) | 0) == 0;
        c4 = c4 & -2130706433;
        e3 = d2;
        b[e3 >> 2] = f2 ? a2 : 0;
        b[e3 + 4 >> 2] = f2 ? c4 | 285212672 : 0;
        e3 = d2 + 8 | 0;
        b[e3 >> 2] = a2;
        b[e3 + 4 >> 2] = c4 | 301989888;
        e3 = d2 + 16 | 0;
        b[e3 >> 2] = a2;
        b[e3 + 4 >> 2] = c4 | 318767104;
        e3 = d2 + 24 | 0;
        b[e3 >> 2] = a2;
        b[e3 + 4 >> 2] = c4 | 335544320;
        e3 = d2 + 32 | 0;
        b[e3 >> 2] = a2;
        b[e3 + 4 >> 2] = c4 | 352321536;
        d2 = d2 + 40 | 0;
        b[d2 >> 2] = a2;
        b[d2 + 4 >> 2] = c4 | 369098752;
        return 0;
      }
      function gb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0;
        h = T;
        T = T + 16 | 0;
        f2 = h;
        g2 = c4 & -2130706433 | 134217728;
        if (!(true & (c4 & 2013265920 | 0) == 268435456)) {
          g2 = 6;
          T = h;
          return g2 | 0;
        }
        e3 = vd(a2 | 0, c4 | 0, 56) | 0;
        H() | 0;
        e3 = Uc(a2, g2, e3 & 7) | 0;
        if ((e3 | 0) == -1) {
          b[d2 >> 2] = 0;
          g2 = 6;
          T = h;
          return g2 | 0;
        }
        if (Ob(a2, g2, f2) | 0) {
          I(23313, 22484, 282, 22499);
        }
        c4 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        c4 = c4 & 15;
        if (!(xb(a2, g2) | 0)) {
          qb(f2, c4, e3, 2, d2);
        } else {
          mb(f2, c4, e3, 2, d2);
        }
        g2 = 0;
        T = h;
        return g2 | 0;
      }
      function hb(a2, b2, c4) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0;
        d2 = T;
        T = T + 16 | 0;
        e3 = d2;
        ib(a2, b2, c4, e3);
        Ca(e3, c4 + 4 | 0);
        T = d2;
        return;
      }
      function ib(a2, c4, d2, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0, k = 0;
        j = T;
        T = T + 16 | 0;
        k = j;
        jb(a2, d2, k);
        h = +w(+(1 - +e[k >> 3] * 0.5));
        if (h < 1e-16) {
          b[f2 >> 2] = 0;
          b[f2 + 4 >> 2] = 0;
          b[f2 + 8 >> 2] = 0;
          b[f2 + 12 >> 2] = 0;
          T = j;
          return;
        }
        k = b[d2 >> 2] | 0;
        g2 = +e[15920 + (k * 24 | 0) >> 3];
        g2 = +Zb(g2 - +Zb(+cc2(15600 + (k << 4) | 0, a2)));
        if (!(Lb(c4) | 0)) {
          i = g2;
        } else {
          i = +Zb(g2 + -0.3334731722518321);
        }
        g2 = +v2(+h) / 0.381966011250105;
        if ((c4 | 0) > 0) {
          a2 = 0;
          do {
            g2 = g2 * 2.6457513110645907;
            a2 = a2 + 1 | 0;
          } while ((a2 | 0) != (c4 | 0));
        }
        h = +t(+i) * g2;
        e[f2 >> 3] = h;
        i = +u4(+i) * g2;
        e[f2 + 8 >> 3] = i;
        T = j;
        return;
      }
      function jb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var f2 = 0, g2 = 0, h = 0;
        h = T;
        T = T + 32 | 0;
        g2 = h;
        Tc(a2, g2);
        b[c4 >> 2] = 0;
        e[d2 >> 3] = 5;
        f2 = +Sc(16400, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 0;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16424, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 1;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16448, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 2;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16472, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 3;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16496, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 4;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16520, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 5;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16544, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 6;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16568, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 7;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16592, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 8;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16616, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 9;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16640, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 10;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16664, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 11;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16688, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 12;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16712, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 13;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16736, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 14;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16760, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 15;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16784, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 16;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16808, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 17;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16832, g2);
        if (f2 < +e[d2 >> 3]) {
          b[c4 >> 2] = 18;
          e[d2 >> 3] = f2;
        }
        f2 = +Sc(16856, g2);
        if (!(f2 < +e[d2 >> 3])) {
          T = h;
          return;
        }
        b[c4 >> 2] = 19;
        e[d2 >> 3] = f2;
        T = h;
        return;
      }
      function kb(a2, c4, d2, f2, g2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h = 0, i = 0;
        h = +Pc(a2);
        if (h < 1e-16) {
          c4 = 15600 + (c4 << 4) | 0;
          b[g2 >> 2] = b[c4 >> 2];
          b[g2 + 4 >> 2] = b[c4 + 4 >> 2];
          b[g2 + 8 >> 2] = b[c4 + 8 >> 2];
          b[g2 + 12 >> 2] = b[c4 + 12 >> 2];
          return;
        }
        i = +z(+ +e[a2 + 8 >> 3], + +e[a2 >> 3]);
        if ((d2 | 0) > 0) {
          a2 = 0;
          do {
            h = h / 2.6457513110645907;
            a2 = a2 + 1 | 0;
          } while ((a2 | 0) != (d2 | 0));
        }
        if (!f2) {
          h = +y(+(h * 0.381966011250105));
          if (Lb(d2) | 0) {
            i = +Zb(i + 0.3334731722518321);
          }
        } else {
          h = h / 3;
          d2 = (Lb(d2) | 0) == 0;
          h = +y(+((d2 ? h : h / 2.6457513110645907) * 0.381966011250105));
        }
        dc(15600 + (c4 << 4) | 0, +Zb(+e[15920 + (c4 * 24 | 0) >> 3] - i), h, g2);
        return;
      }
      function lb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0;
        e3 = T;
        T = T + 16 | 0;
        f2 = e3;
        Ea(a2 + 4 | 0, f2);
        kb(f2, b[a2 >> 2] | 0, c4, 0, d2);
        T = e3;
        return;
      }
      function mb(a2, c4, d2, f2, g2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A6 = 0, B4 = 0, C4 = 0, D4 = 0, E3 = 0, F = 0, G2 = 0, H2 = 0, J2 = 0;
        G2 = T;
        T = T + 272 | 0;
        h = G2 + 256 | 0;
        u5 = G2 + 240 | 0;
        D4 = G2;
        E3 = G2 + 224 | 0;
        F = G2 + 208 | 0;
        v3 = G2 + 176 | 0;
        w2 = G2 + 160 | 0;
        x2 = G2 + 192 | 0;
        y2 = G2 + 144 | 0;
        z2 = G2 + 128 | 0;
        A6 = G2 + 112 | 0;
        B4 = G2 + 96 | 0;
        C4 = G2 + 80 | 0;
        b[h >> 2] = c4;
        b[u5 >> 2] = b[a2 >> 2];
        b[u5 + 4 >> 2] = b[a2 + 4 >> 2];
        b[u5 + 8 >> 2] = b[a2 + 8 >> 2];
        b[u5 + 12 >> 2] = b[a2 + 12 >> 2];
        nb(u5, h, D4);
        b[g2 >> 2] = 0;
        u5 = f2 + d2 + ((f2 | 0) == 5 & 1) | 0;
        if ((u5 | 0) <= (d2 | 0)) {
          T = G2;
          return;
        }
        k = b[h >> 2] | 0;
        l = E3 + 4 | 0;
        m = v3 + 4 | 0;
        n = d2 + 5 | 0;
        o = 16880 + (k << 2) | 0;
        p2 = 16960 + (k << 2) | 0;
        q2 = z2 + 8 | 0;
        r2 = A6 + 8 | 0;
        s2 = B4 + 8 | 0;
        t4 = F + 4 | 0;
        j = d2;
        a: while (1) {
          i = D4 + (((j | 0) % 5 | 0) << 4) | 0;
          b[F >> 2] = b[i >> 2];
          b[F + 4 >> 2] = b[i + 4 >> 2];
          b[F + 8 >> 2] = b[i + 8 >> 2];
          b[F + 12 >> 2] = b[i + 12 >> 2];
          do {
          } while ((ob(F, k, 0, 1) | 0) == 2);
          if ((j | 0) > (d2 | 0) & (Lb(c4) | 0) != 0) {
            b[v3 >> 2] = b[F >> 2];
            b[v3 + 4 >> 2] = b[F + 4 >> 2];
            b[v3 + 8 >> 2] = b[F + 8 >> 2];
            b[v3 + 12 >> 2] = b[F + 12 >> 2];
            Ea(l, w2);
            f2 = b[v3 >> 2] | 0;
            h = b[17040 + (f2 * 80 | 0) + (b[E3 >> 2] << 2) >> 2] | 0;
            b[v3 >> 2] = b[18640 + (f2 * 80 | 0) + (h * 20 | 0) >> 2];
            i = b[18640 + (f2 * 80 | 0) + (h * 20 | 0) + 16 >> 2] | 0;
            if ((i | 0) > 0) {
              a2 = 0;
              do {
                Qa(m);
                a2 = a2 + 1 | 0;
              } while ((a2 | 0) < (i | 0));
            }
            i = 18640 + (f2 * 80 | 0) + (h * 20 | 0) + 4 | 0;
            b[x2 >> 2] = b[i >> 2];
            b[x2 + 4 >> 2] = b[i + 4 >> 2];
            b[x2 + 8 >> 2] = b[i + 8 >> 2];
            Ha(x2, (b[o >> 2] | 0) * 3 | 0);
            Fa(m, x2, m);
            Da(m);
            Ea(m, y2);
            H2 = +(b[p2 >> 2] | 0);
            e[z2 >> 3] = H2 * 3;
            e[q2 >> 3] = 0;
            J2 = H2 * -1.5;
            e[A6 >> 3] = J2;
            e[r2 >> 3] = H2 * 2.598076211353316;
            e[B4 >> 3] = J2;
            e[s2 >> 3] = H2 * -2.598076211353316;
            switch (b[17040 + ((b[v3 >> 2] | 0) * 80 | 0) + (b[F >> 2] << 2) >> 2] | 0) {
              case 1: {
                a2 = A6;
                f2 = z2;
                break;
              }
              case 3: {
                a2 = B4;
                f2 = A6;
                break;
              }
              case 2: {
                a2 = z2;
                f2 = B4;
                break;
              }
              default: {
                a2 = 12;
                break a;
              }
            }
            Qc(w2, y2, f2, a2, C4);
            kb(C4, b[v3 >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
            b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
          }
          if ((j | 0) < (n | 0)) {
            Ea(t4, v3);
            kb(v3, b[F >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
            b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
          }
          b[E3 >> 2] = b[F >> 2];
          b[E3 + 4 >> 2] = b[F + 4 >> 2];
          b[E3 + 8 >> 2] = b[F + 8 >> 2];
          b[E3 + 12 >> 2] = b[F + 12 >> 2];
          j = j + 1 | 0;
          if ((j | 0) >= (u5 | 0)) {
            a2 = 3;
            break;
          }
        }
        if ((a2 | 0) == 3) {
          T = G2;
          return;
        } else if ((a2 | 0) == 12) {
          I(22522, 22569, 571, 22579);
        }
      }
      function nb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
        j = T;
        T = T + 128 | 0;
        e3 = j + 64 | 0;
        f2 = j;
        g2 = e3;
        h = 20240;
        i = g2 + 60 | 0;
        do {
          b[g2 >> 2] = b[h >> 2];
          g2 = g2 + 4 | 0;
          h = h + 4 | 0;
        } while ((g2 | 0) < (i | 0));
        g2 = f2;
        h = 20304;
        i = g2 + 60 | 0;
        do {
          b[g2 >> 2] = b[h >> 2];
          g2 = g2 + 4 | 0;
          h = h + 4 | 0;
        } while ((g2 | 0) < (i | 0));
        i = (Lb(b[c4 >> 2] | 0) | 0) == 0;
        e3 = i ? e3 : f2;
        f2 = a2 + 4 | 0;
        Ua(f2);
        Va(f2);
        if (Lb(b[c4 >> 2] | 0) | 0) {
          Oa(f2);
          b[c4 >> 2] = (b[c4 >> 2] | 0) + 1;
        }
        b[d2 >> 2] = b[a2 >> 2];
        c4 = d2 + 4 | 0;
        Fa(f2, e3, c4);
        Da(c4);
        b[d2 + 16 >> 2] = b[a2 >> 2];
        c4 = d2 + 20 | 0;
        Fa(f2, e3 + 12 | 0, c4);
        Da(c4);
        b[d2 + 32 >> 2] = b[a2 >> 2];
        c4 = d2 + 36 | 0;
        Fa(f2, e3 + 24 | 0, c4);
        Da(c4);
        b[d2 + 48 >> 2] = b[a2 >> 2];
        c4 = d2 + 52 | 0;
        Fa(f2, e3 + 36 | 0, c4);
        Da(c4);
        b[d2 + 64 >> 2] = b[a2 >> 2];
        d2 = d2 + 68 | 0;
        Fa(f2, e3 + 48 | 0, d2);
        Da(d2);
        T = j;
        return;
      }
      function ob(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0;
        p2 = T;
        T = T + 32 | 0;
        n = p2 + 12 | 0;
        i = p2;
        o = a2 + 4 | 0;
        m = b[16960 + (c4 << 2) >> 2] | 0;
        l = (e3 | 0) != 0;
        m = l ? m * 3 | 0 : m;
        f2 = b[o >> 2] | 0;
        k = a2 + 8 | 0;
        h = b[k >> 2] | 0;
        if (l) {
          g2 = a2 + 12 | 0;
          e3 = b[g2 >> 2] | 0;
          f2 = h + f2 + e3 | 0;
          if ((f2 | 0) == (m | 0)) {
            o = 1;
            T = p2;
            return o | 0;
          } else {
            j = g2;
          }
        } else {
          j = a2 + 12 | 0;
          e3 = b[j >> 2] | 0;
          f2 = h + f2 + e3 | 0;
        }
        if ((f2 | 0) <= (m | 0)) {
          o = 0;
          T = p2;
          return o | 0;
        }
        do {
          if ((e3 | 0) > 0) {
            e3 = b[a2 >> 2] | 0;
            if ((h | 0) > 0) {
              g2 = 18640 + (e3 * 80 | 0) + 60 | 0;
              e3 = a2;
              break;
            }
            e3 = 18640 + (e3 * 80 | 0) + 40 | 0;
            if (!d2) {
              g2 = e3;
              e3 = a2;
            } else {
              Ba(n, m, 0, 0);
              Ga(o, n, i);
              Ra(i);
              Fa(i, n, o);
              g2 = e3;
              e3 = a2;
            }
          } else {
            g2 = 18640 + ((b[a2 >> 2] | 0) * 80 | 0) + 20 | 0;
            e3 = a2;
          }
        } while (0);
        b[e3 >> 2] = b[g2 >> 2];
        f2 = g2 + 16 | 0;
        if ((b[f2 >> 2] | 0) > 0) {
          e3 = 0;
          do {
            Qa(o);
            e3 = e3 + 1 | 0;
          } while ((e3 | 0) < (b[f2 >> 2] | 0));
        }
        a2 = g2 + 4 | 0;
        b[n >> 2] = b[a2 >> 2];
        b[n + 4 >> 2] = b[a2 + 4 >> 2];
        b[n + 8 >> 2] = b[a2 + 8 >> 2];
        c4 = b[16880 + (c4 << 2) >> 2] | 0;
        Ha(n, l ? c4 * 3 | 0 : c4);
        Fa(o, n, o);
        Da(o);
        if (l) {
          e3 = ((b[k >> 2] | 0) + (b[o >> 2] | 0) + (b[j >> 2] | 0) | 0) == (m | 0) ? 1 : 2;
        } else {
          e3 = 2;
        }
        o = e3;
        T = p2;
        return o | 0;
      }
      function pb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0;
        do {
          c4 = ob(a2, b2, 0, 1) | 0;
        } while ((c4 | 0) == 2);
        return c4 | 0;
      }
      function qb(a2, c4, d2, f2, g2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A6 = 0, B4 = 0, C4 = 0, D4 = 0;
        B4 = T;
        T = T + 240 | 0;
        h = B4 + 224 | 0;
        x2 = B4 + 208 | 0;
        y2 = B4;
        z2 = B4 + 192 | 0;
        A6 = B4 + 176 | 0;
        s2 = B4 + 160 | 0;
        t4 = B4 + 144 | 0;
        u5 = B4 + 128 | 0;
        v3 = B4 + 112 | 0;
        w2 = B4 + 96 | 0;
        b[h >> 2] = c4;
        b[x2 >> 2] = b[a2 >> 2];
        b[x2 + 4 >> 2] = b[a2 + 4 >> 2];
        b[x2 + 8 >> 2] = b[a2 + 8 >> 2];
        b[x2 + 12 >> 2] = b[a2 + 12 >> 2];
        rb(x2, h, y2);
        b[g2 >> 2] = 0;
        r2 = f2 + d2 + ((f2 | 0) == 6 & 1) | 0;
        if ((r2 | 0) <= (d2 | 0)) {
          T = B4;
          return;
        }
        k = b[h >> 2] | 0;
        l = d2 + 6 | 0;
        m = 16960 + (k << 2) | 0;
        n = t4 + 8 | 0;
        o = u5 + 8 | 0;
        p2 = v3 + 8 | 0;
        q2 = z2 + 4 | 0;
        i = 0;
        j = d2;
        f2 = -1;
        a: while (1) {
          h = (j | 0) % 6 | 0;
          a2 = y2 + (h << 4) | 0;
          b[z2 >> 2] = b[a2 >> 2];
          b[z2 + 4 >> 2] = b[a2 + 4 >> 2];
          b[z2 + 8 >> 2] = b[a2 + 8 >> 2];
          b[z2 + 12 >> 2] = b[a2 + 12 >> 2];
          a2 = i;
          i = ob(z2, k, 0, 1) | 0;
          if ((j | 0) > (d2 | 0) & (Lb(c4) | 0) != 0 ? (a2 | 0) != 1 ? (b[z2 >> 2] | 0) != (f2 | 0) : 0 : 0) {
            Ea(y2 + (((h + 5 | 0) % 6 | 0) << 4) + 4 | 0, A6);
            Ea(y2 + (h << 4) + 4 | 0, s2);
            C4 = +(b[m >> 2] | 0);
            e[t4 >> 3] = C4 * 3;
            e[n >> 3] = 0;
            D4 = C4 * -1.5;
            e[u5 >> 3] = D4;
            e[o >> 3] = C4 * 2.598076211353316;
            e[v3 >> 3] = D4;
            e[p2 >> 3] = C4 * -2.598076211353316;
            h = b[x2 >> 2] | 0;
            switch (b[17040 + (h * 80 | 0) + (((f2 | 0) == (h | 0) ? b[z2 >> 2] | 0 : f2) << 2) >> 2] | 0) {
              case 1: {
                a2 = u5;
                f2 = t4;
                break;
              }
              case 3: {
                a2 = v3;
                f2 = u5;
                break;
              }
              case 2: {
                a2 = t4;
                f2 = v3;
                break;
              }
              default: {
                a2 = 8;
                break a;
              }
            }
            Qc(A6, s2, f2, a2, w2);
            if (!(Rc(A6, w2) | 0) ? !(Rc(s2, w2) | 0) : 0) {
              kb(w2, b[x2 >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
              b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
            }
          }
          if ((j | 0) < (l | 0)) {
            Ea(q2, A6);
            kb(A6, b[z2 >> 2] | 0, k, 1, g2 + 8 + (b[g2 >> 2] << 4) | 0);
            b[g2 >> 2] = (b[g2 >> 2] | 0) + 1;
          }
          j = j + 1 | 0;
          if ((j | 0) >= (r2 | 0)) {
            a2 = 3;
            break;
          } else {
            f2 = b[z2 >> 2] | 0;
          }
        }
        if ((a2 | 0) == 3) {
          T = B4;
          return;
        } else if ((a2 | 0) == 8) {
          I(22606, 22569, 736, 22651);
        }
      }
      function rb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
        j = T;
        T = T + 160 | 0;
        e3 = j + 80 | 0;
        f2 = j;
        g2 = e3;
        h = 20368;
        i = g2 + 72 | 0;
        do {
          b[g2 >> 2] = b[h >> 2];
          g2 = g2 + 4 | 0;
          h = h + 4 | 0;
        } while ((g2 | 0) < (i | 0));
        g2 = f2;
        h = 20448;
        i = g2 + 72 | 0;
        do {
          b[g2 >> 2] = b[h >> 2];
          g2 = g2 + 4 | 0;
          h = h + 4 | 0;
        } while ((g2 | 0) < (i | 0));
        i = (Lb(b[c4 >> 2] | 0) | 0) == 0;
        e3 = i ? e3 : f2;
        f2 = a2 + 4 | 0;
        Ua(f2);
        Va(f2);
        if (Lb(b[c4 >> 2] | 0) | 0) {
          Oa(f2);
          b[c4 >> 2] = (b[c4 >> 2] | 0) + 1;
        }
        b[d2 >> 2] = b[a2 >> 2];
        c4 = d2 + 4 | 0;
        Fa(f2, e3, c4);
        Da(c4);
        b[d2 + 16 >> 2] = b[a2 >> 2];
        c4 = d2 + 20 | 0;
        Fa(f2, e3 + 12 | 0, c4);
        Da(c4);
        b[d2 + 32 >> 2] = b[a2 >> 2];
        c4 = d2 + 36 | 0;
        Fa(f2, e3 + 24 | 0, c4);
        Da(c4);
        b[d2 + 48 >> 2] = b[a2 >> 2];
        c4 = d2 + 52 | 0;
        Fa(f2, e3 + 36 | 0, c4);
        Da(c4);
        b[d2 + 64 >> 2] = b[a2 >> 2];
        c4 = d2 + 68 | 0;
        Fa(f2, e3 + 48 | 0, c4);
        Da(c4);
        b[d2 + 80 >> 2] = b[a2 >> 2];
        d2 = d2 + 84 | 0;
        Fa(f2, e3 + 60 | 0, d2);
        Da(d2);
        T = j;
        return;
      }
      function sb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        b2 = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        return b2 & 15 | 0;
      }
      function tb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        b2 = vd(a2 | 0, b2 | 0, 45) | 0;
        H() | 0;
        return b2 & 127 | 0;
      }
      function ub(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0;
        if (!(true & (b2 & -16777216 | 0) == 134217728)) {
          b2 = 0;
          return b2 | 0;
        }
        g2 = vd(a2 | 0, b2 | 0, 45) | 0;
        H() | 0;
        g2 = g2 & 127;
        if (g2 >>> 0 > 121) {
          b2 = 0;
          return b2 | 0;
        }
        c4 = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        c4 = c4 & 15;
        do {
          if (c4 | 0) {
            e3 = 1;
            d2 = 0;
            while (1) {
              f2 = vd(a2 | 0, b2 | 0, (15 - e3 | 0) * 3 | 0) | 0;
              H() | 0;
              f2 = f2 & 7;
              if ((f2 | 0) != 0 & (d2 ^ 1)) {
                if ((f2 | 0) == 1 & (ma(g2) | 0) != 0) {
                  h = 0;
                  d2 = 13;
                  break;
                } else {
                  d2 = 1;
                }
              }
              if ((f2 | 0) == 7) {
                h = 0;
                d2 = 13;
                break;
              }
              if (e3 >>> 0 < c4 >>> 0) {
                e3 = e3 + 1 | 0;
              } else {
                d2 = 9;
                break;
              }
            }
            if ((d2 | 0) == 9) {
              if ((c4 | 0) == 15) {
                h = 1;
              } else {
                break;
              }
              return h | 0;
            } else if ((d2 | 0) == 13) {
              return h | 0;
            }
          }
        } while (0);
        while (1) {
          h = vd(a2 | 0, b2 | 0, (14 - c4 | 0) * 3 | 0) | 0;
          H() | 0;
          if (!((h & 7 | 0) == 7 & true)) {
            h = 0;
            d2 = 13;
            break;
          }
          if (c4 >>> 0 < 14) {
            c4 = c4 + 1 | 0;
          } else {
            h = 1;
            d2 = 13;
            break;
          }
        }
        if ((d2 | 0) == 13) {
          return h | 0;
        }
        return 0;
      }
      function vb(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0;
        g2 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        g2 = g2 & 15;
        if (d2 >>> 0 > 15) {
          e3 = 4;
          return e3 | 0;
        }
        if ((g2 | 0) < (d2 | 0)) {
          e3 = 12;
          return e3 | 0;
        }
        if ((g2 | 0) == (d2 | 0)) {
          b[e3 >> 2] = a2;
          b[e3 + 4 >> 2] = c4;
          e3 = 0;
          return e3 | 0;
        }
        f2 = wd(d2 | 0, 0, 52) | 0;
        f2 = f2 | a2;
        a2 = H() | 0 | c4 & -15728641;
        if ((g2 | 0) > (d2 | 0)) {
          do {
            c4 = wd(7, 0, (14 - d2 | 0) * 3 | 0) | 0;
            d2 = d2 + 1 | 0;
            f2 = c4 | f2;
            a2 = H() | 0 | a2;
          } while ((d2 | 0) < (g2 | 0));
        }
        b[e3 >> 2] = f2;
        b[e3 + 4 >> 2] = a2;
        e3 = 0;
        return e3 | 0;
      }
      function wb(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0;
        g2 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        g2 = g2 & 15;
        if (!((d2 | 0) < 16 & (g2 | 0) <= (d2 | 0))) {
          e3 = 4;
          return e3 | 0;
        }
        f2 = d2 - g2 | 0;
        d2 = vd(a2 | 0, c4 | 0, 45) | 0;
        H() | 0;
        a: do {
          if (!(ma(d2 & 127) | 0)) {
            d2 = Cc(7, 0, f2, ((f2 | 0) < 0) << 31 >> 31) | 0;
            f2 = H() | 0;
          } else {
            b: do {
              if (g2 | 0) {
                d2 = 1;
                while (1) {
                  h = wd(7, 0, (15 - d2 | 0) * 3 | 0) | 0;
                  if (!((h & a2 | 0) == 0 & ((H() | 0) & c4 | 0) == 0)) {
                    break;
                  }
                  if (d2 >>> 0 < g2 >>> 0) {
                    d2 = d2 + 1 | 0;
                  } else {
                    break b;
                  }
                }
                d2 = Cc(7, 0, f2, ((f2 | 0) < 0) << 31 >> 31) | 0;
                f2 = H() | 0;
                break a;
              }
            } while (0);
            d2 = Cc(7, 0, f2, ((f2 | 0) < 0) << 31 >> 31) | 0;
            d2 = rd(d2 | 0, H() | 0, 5, 0) | 0;
            d2 = ld(d2 | 0, H() | 0, -5, -1) | 0;
            d2 = pd(d2 | 0, H() | 0, 6, 0) | 0;
            d2 = ld(d2 | 0, H() | 0, 1, 0) | 0;
            f2 = H() | 0;
          }
        } while (0);
        h = e3;
        b[h >> 2] = d2;
        b[h + 4 >> 2] = f2;
        h = 0;
        return h | 0;
      }
      function xb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, e3 = 0;
        e3 = vd(a2 | 0, b2 | 0, 45) | 0;
        H() | 0;
        if (!(ma(e3 & 127) | 0)) {
          e3 = 0;
          return e3 | 0;
        }
        e3 = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        e3 = e3 & 15;
        a: do {
          if (!e3) {
            c4 = 0;
          } else {
            d2 = 1;
            while (1) {
              c4 = vd(a2 | 0, b2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
              H() | 0;
              c4 = c4 & 7;
              if (c4 | 0) {
                break a;
              }
              if (d2 >>> 0 < e3 >>> 0) {
                d2 = d2 + 1 | 0;
              } else {
                c4 = 0;
                break;
              }
            }
          }
        } while (0);
        e3 = (c4 | 0) == 0 & 1;
        return e3 | 0;
      }
      function yb(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0;
        h = T;
        T = T + 16 | 0;
        g2 = h;
        Xb(g2, a2, c4, d2);
        c4 = g2;
        a2 = b[c4 >> 2] | 0;
        c4 = b[c4 + 4 >> 2] | 0;
        if ((a2 | 0) == 0 & (c4 | 0) == 0) {
          T = h;
          return 0;
        }
        f2 = 0;
        d2 = 0;
        do {
          i = e3 + (f2 << 3) | 0;
          b[i >> 2] = a2;
          b[i + 4 >> 2] = c4;
          f2 = ld(f2 | 0, d2 | 0, 1, 0) | 0;
          d2 = H() | 0;
          Yb(g2);
          i = g2;
          a2 = b[i >> 2] | 0;
          c4 = b[i + 4 >> 2] | 0;
        } while (!((a2 | 0) == 0 & (c4 | 0) == 0));
        T = h;
        return 0;
      }
      function zb(a2, b2, c4, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        if ((d2 | 0) < (c4 | 0)) {
          c4 = b2;
          d2 = a2;
          G(c4 | 0);
          return d2 | 0;
        }
        c4 = wd(-1, -1, ((d2 - c4 | 0) * 3 | 0) + 3 | 0) | 0;
        d2 = wd(~c4 | 0, ~(H() | 0) | 0, (15 - d2 | 0) * 3 | 0) | 0;
        c4 = ~(H() | 0) & b2;
        d2 = ~d2 & a2;
        G(c4 | 0);
        return d2 | 0;
      }
      function Ab(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0;
        f2 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        f2 = f2 & 15;
        if (!((d2 | 0) < 16 & (f2 | 0) <= (d2 | 0))) {
          e3 = 4;
          return e3 | 0;
        }
        if ((f2 | 0) < (d2 | 0)) {
          f2 = wd(-1, -1, ((d2 + -1 - f2 | 0) * 3 | 0) + 3 | 0) | 0;
          f2 = wd(~f2 | 0, ~(H() | 0) | 0, (15 - d2 | 0) * 3 | 0) | 0;
          c4 = ~(H() | 0) & c4;
          a2 = ~f2 & a2;
        }
        f2 = wd(d2 | 0, 0, 52) | 0;
        d2 = c4 & -15728641 | (H() | 0);
        b[e3 >> 2] = a2 | f2;
        b[e3 + 4 >> 2] = d2;
        e3 = 0;
        return e3 | 0;
      }
      function Bb(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0;
        if ((d2 | 0) == 0 & (e3 | 0) == 0) {
          y2 = 0;
          return y2 | 0;
        }
        f2 = a2;
        g2 = b[f2 >> 2] | 0;
        f2 = b[f2 + 4 >> 2] | 0;
        if (true & (f2 & 15728640 | 0) == 0) {
          if (!((e3 | 0) > 0 | (e3 | 0) == 0 & d2 >>> 0 > 0)) {
            y2 = 0;
            return y2 | 0;
          }
          y2 = c4;
          b[y2 >> 2] = g2;
          b[y2 + 4 >> 2] = f2;
          if ((d2 | 0) == 1 & (e3 | 0) == 0) {
            y2 = 0;
            return y2 | 0;
          }
          f2 = 1;
          do {
            w2 = a2 + (f2 << 3) | 0;
            x2 = b[w2 + 4 >> 2] | 0;
            y2 = c4 + (f2 << 3) | 0;
            b[y2 >> 2] = b[w2 >> 2];
            b[y2 + 4 >> 2] = x2;
            f2 = f2 + 1 | 0;
          } while (0 < (e3 | 0) | 0 == (e3 | 0) & f2 >>> 0 < d2 >>> 0);
          f2 = 0;
          return f2 | 0;
        }
        v3 = d2 << 3;
        x2 = id(v3) | 0;
        if (!x2) {
          y2 = 13;
          return y2 | 0;
        }
        Ad(x2 | 0, a2 | 0, v3 | 0) | 0;
        w2 = kd(d2, 8) | 0;
        if (!w2) {
          jd(x2);
          y2 = 13;
          return y2 | 0;
        }
        a: do {
          if (d2 | 0) {
            b: while (1) {
              f2 = x2;
              s2 = b[f2 >> 2] | 0;
              f2 = b[f2 + 4 >> 2] | 0;
              t4 = vd(s2 | 0, f2 | 0, 52) | 0;
              H() | 0;
              t4 = t4 & 15;
              u5 = t4 + -1 | 0;
              r2 = (d2 | 0) > 0;
              c: do {
                if ((t4 | 0) != 0 & r2) {
                  o = ((d2 | 0) < 0) << 31 >> 31;
                  p2 = wd(u5 | 0, 0, 52) | 0;
                  q2 = H() | 0;
                  if (u5 >>> 0 > 15) {
                    if (!((s2 | 0) == 0 & (f2 | 0) == 0)) {
                      y2 = 17;
                      break b;
                    }
                    g2 = 0;
                    while (1) {
                      g2 = g2 + 1 | 0;
                      if ((g2 | 0) >= (d2 | 0)) {
                        break c;
                      }
                      e3 = x2 + (g2 << 3) | 0;
                      q2 = b[e3 >> 2] | 0;
                      e3 = b[e3 + 4 >> 2] | 0;
                      if (!((q2 | 0) == 0 & (e3 | 0) == 0)) {
                        f2 = e3;
                        y2 = 17;
                        break b;
                      }
                    }
                  }
                  g2 = 0;
                  a2 = s2;
                  e3 = f2;
                  while (1) {
                    if (!((a2 | 0) == 0 & (e3 | 0) == 0)) {
                      if (!(true & (e3 & 117440512 | 0) == 0)) {
                        y2 = 22;
                        break b;
                      }
                      i = vd(a2 | 0, e3 | 0, 52) | 0;
                      H() | 0;
                      i = i & 15;
                      if ((i | 0) < (u5 | 0)) {
                        f2 = 12;
                        y2 = 28;
                        break b;
                      }
                      if ((i | 0) != (u5 | 0)) {
                        a2 = a2 | p2;
                        e3 = e3 & -15728641 | q2;
                        if (i >>> 0 >= t4 >>> 0) {
                          h = u5;
                          do {
                            n = wd(7, 0, (14 - h | 0) * 3 | 0) | 0;
                            h = h + 1 | 0;
                            a2 = n | a2;
                            e3 = H() | 0 | e3;
                          } while (h >>> 0 < i >>> 0);
                        }
                      }
                      h = td(a2 | 0, e3 | 0, d2 | 0, o | 0) | 0;
                      H() | 0;
                      k = w2 + (h << 3) | 0;
                      i = k;
                      j = b[i >> 2] | 0;
                      i = b[i + 4 >> 2] | 0;
                      if ((j | 0) == 0 & (i | 0) == 0) {
                        h = k;
                      } else {
                        n = 0;
                        while (1) {
                          if ((n | 0) > (d2 | 0)) {
                            y2 = 32;
                            break b;
                          }
                          if ((j | 0) == (a2 | 0) & (i & -117440513 | 0) == (e3 | 0)) {
                            l = vd(j | 0, i | 0, 56) | 0;
                            H() | 0;
                            l = l & 7;
                            m = l + 1 | 0;
                            z2 = vd(j | 0, i | 0, 45) | 0;
                            H() | 0;
                            d: do {
                              if (!(ma(z2 & 127) | 0)) {
                                i = 7;
                              } else {
                                j = vd(j | 0, i | 0, 52) | 0;
                                H() | 0;
                                j = j & 15;
                                if (!j) {
                                  i = 6;
                                  break;
                                }
                                i = 1;
                                while (1) {
                                  z2 = wd(7, 0, (15 - i | 0) * 3 | 0) | 0;
                                  if (!((z2 & a2 | 0) == 0 & ((H() | 0) & e3 | 0) == 0)) {
                                    i = 7;
                                    break d;
                                  }
                                  if (i >>> 0 < j >>> 0) {
                                    i = i + 1 | 0;
                                  } else {
                                    i = 6;
                                    break;
                                  }
                                }
                              }
                            } while (0);
                            if ((l + 2 | 0) >>> 0 > i >>> 0) {
                              y2 = 42;
                              break b;
                            }
                            z2 = wd(m | 0, 0, 56) | 0;
                            e3 = H() | 0 | e3 & -117440513;
                            m = k;
                            b[m >> 2] = 0;
                            b[m + 4 >> 2] = 0;
                            a2 = z2 | a2;
                          } else {
                            h = (h + 1 | 0) % (d2 | 0) | 0;
                          }
                          k = w2 + (h << 3) | 0;
                          i = k;
                          j = b[i >> 2] | 0;
                          i = b[i + 4 >> 2] | 0;
                          if ((j | 0) == 0 & (i | 0) == 0) {
                            h = k;
                            break;
                          } else {
                            n = n + 1 | 0;
                          }
                        }
                      }
                      z2 = h;
                      b[z2 >> 2] = a2;
                      b[z2 + 4 >> 2] = e3;
                    }
                    g2 = g2 + 1 | 0;
                    if ((g2 | 0) >= (d2 | 0)) {
                      break c;
                    }
                    e3 = x2 + (g2 << 3) | 0;
                    a2 = b[e3 >> 2] | 0;
                    e3 = b[e3 + 4 >> 2] | 0;
                  }
                }
              } while (0);
              if ((d2 + 5 | 0) >>> 0 < 11) {
                y2 = 85;
                break;
              }
              q2 = kd((d2 | 0) / 6 | 0, 8) | 0;
              if (!q2) {
                y2 = 49;
                break;
              }
              e: do {
                if (r2) {
                  n = 0;
                  m = 0;
                  do {
                    i = w2 + (n << 3) | 0;
                    e3 = i;
                    g2 = b[e3 >> 2] | 0;
                    e3 = b[e3 + 4 >> 2] | 0;
                    if (!((g2 | 0) == 0 & (e3 | 0) == 0)) {
                      j = vd(g2 | 0, e3 | 0, 56) | 0;
                      H() | 0;
                      j = j & 7;
                      a2 = j + 1 | 0;
                      k = e3 & -117440513;
                      z2 = vd(g2 | 0, e3 | 0, 45) | 0;
                      H() | 0;
                      f: do {
                        if (ma(z2 & 127) | 0) {
                          l = vd(g2 | 0, e3 | 0, 52) | 0;
                          H() | 0;
                          l = l & 15;
                          if (l | 0) {
                            h = 1;
                            while (1) {
                              z2 = wd(7, 0, (15 - h | 0) * 3 | 0) | 0;
                              if (!((g2 & z2 | 0) == 0 & (k & (H() | 0) | 0) == 0)) {
                                break f;
                              }
                              if (h >>> 0 < l >>> 0) {
                                h = h + 1 | 0;
                              } else {
                                break;
                              }
                            }
                          }
                          e3 = wd(a2 | 0, 0, 56) | 0;
                          g2 = e3 | g2;
                          e3 = H() | 0 | k;
                          a2 = i;
                          b[a2 >> 2] = g2;
                          b[a2 + 4 >> 2] = e3;
                          a2 = j + 2 | 0;
                        }
                      } while (0);
                      if ((a2 | 0) == 7) {
                        z2 = q2 + (m << 3) | 0;
                        b[z2 >> 2] = g2;
                        b[z2 + 4 >> 2] = e3 & -117440513;
                        m = m + 1 | 0;
                      }
                    }
                    n = n + 1 | 0;
                  } while ((n | 0) != (d2 | 0));
                  if (r2) {
                    n = ((d2 | 0) < 0) << 31 >> 31;
                    o = wd(u5 | 0, 0, 52) | 0;
                    p2 = H() | 0;
                    if (u5 >>> 0 > 15) {
                      if (!((s2 | 0) == 0 & (f2 | 0) == 0)) {
                        f2 = 4;
                        y2 = 84;
                        break b;
                      }
                      f2 = 0;
                      while (1) {
                        f2 = f2 + 1 | 0;
                        if ((f2 | 0) >= (d2 | 0)) {
                          g2 = 0;
                          f2 = m;
                          break e;
                        }
                        z2 = x2 + (f2 << 3) | 0;
                        if (!((b[z2 >> 2] | 0) == 0 & (b[z2 + 4 >> 2] | 0) == 0)) {
                          f2 = 4;
                          y2 = 84;
                          break b;
                        }
                      }
                    }
                    l = 0;
                    g2 = 0;
                    k = s2;
                    while (1) {
                      do {
                        if (!((k | 0) == 0 & (f2 | 0) == 0)) {
                          i = vd(k | 0, f2 | 0, 52) | 0;
                          H() | 0;
                          i = i & 15;
                          if ((i | 0) < (u5 | 0)) {
                            f2 = 12;
                            y2 = 84;
                            break b;
                          }
                          do {
                            if ((i | 0) == (u5 | 0)) {
                              e3 = k;
                              i = f2;
                            } else {
                              e3 = k | o;
                              a2 = f2 & -15728641 | p2;
                              if (i >>> 0 < t4 >>> 0) {
                                i = a2;
                                break;
                              }
                              h = u5;
                              do {
                                z2 = wd(7, 0, (14 - h | 0) * 3 | 0) | 0;
                                h = h + 1 | 0;
                                e3 = z2 | e3;
                                a2 = H() | 0 | a2;
                              } while (h >>> 0 < i >>> 0);
                              i = a2;
                            }
                          } while (0);
                          h = td(e3 | 0, i | 0, d2 | 0, n | 0) | 0;
                          H() | 0;
                          a2 = 0;
                          while (1) {
                            if ((a2 | 0) > (d2 | 0)) {
                              y2 = 77;
                              break b;
                            }
                            z2 = w2 + (h << 3) | 0;
                            j = b[z2 + 4 >> 2] | 0;
                            if ((j & -117440513 | 0) == (i | 0) ? (b[z2 >> 2] | 0) == (e3 | 0) : 0) {
                              y2 = 79;
                              break;
                            }
                            h = (h + 1 | 0) % (d2 | 0) | 0;
                            z2 = w2 + (h << 3) | 0;
                            if ((b[z2 >> 2] | 0) == (e3 | 0) ? (b[z2 + 4 >> 2] | 0) == (i | 0) : 0) {
                              break;
                            } else {
                              a2 = a2 + 1 | 0;
                            }
                          }
                          if ((y2 | 0) == 79 ? (y2 = 0, true & (j & 117440512 | 0) == 100663296) : 0) {
                            break;
                          }
                          z2 = c4 + (g2 << 3) | 0;
                          b[z2 >> 2] = k;
                          b[z2 + 4 >> 2] = f2;
                          g2 = g2 + 1 | 0;
                        }
                      } while (0);
                      f2 = l + 1 | 0;
                      if ((f2 | 0) >= (d2 | 0)) {
                        f2 = m;
                        break e;
                      }
                      z2 = x2 + (f2 << 3) | 0;
                      l = f2;
                      k = b[z2 >> 2] | 0;
                      f2 = b[z2 + 4 >> 2] | 0;
                    }
                  } else {
                    g2 = 0;
                    f2 = m;
                  }
                } else {
                  g2 = 0;
                  f2 = 0;
                }
              } while (0);
              Bd(w2 | 0, 0, v3 | 0) | 0;
              Ad(x2 | 0, q2 | 0, f2 << 3 | 0) | 0;
              jd(q2);
              if (!f2) {
                break a;
              } else {
                c4 = c4 + (g2 << 3) | 0;
                d2 = f2;
              }
            }
            if ((y2 | 0) == 17) {
              if (true & (f2 & 117440512 | 0) == 0) {
                f2 = 4;
                y2 = 28;
              } else {
                y2 = 22;
              }
            } else if ((y2 | 0) == 32) {
              I(23313, 22674, 362, 22684);
            } else if ((y2 | 0) == 42) {
              jd(x2);
              jd(w2);
              z2 = 10;
              return z2 | 0;
            } else if ((y2 | 0) == 49) {
              jd(x2);
              jd(w2);
              z2 = 13;
              return z2 | 0;
            } else if ((y2 | 0) == 77) {
              I(23313, 22674, 462, 22684);
            } else if ((y2 | 0) == 84) {
              jd(q2);
              jd(x2);
              jd(w2);
              z2 = f2;
              return z2 | 0;
            } else if ((y2 | 0) == 85) {
              Ad(c4 | 0, x2 | 0, d2 << 3 | 0) | 0;
              break;
            }
            if ((y2 | 0) == 22) {
              jd(x2);
              jd(w2);
              z2 = 5;
              return z2 | 0;
            } else if ((y2 | 0) == 28) {
              jd(x2);
              jd(w2);
              z2 = f2;
              return z2 | 0;
            }
          }
        } while (0);
        jd(x2);
        jd(w2);
        z2 = 0;
        return z2 | 0;
      }
      function Cb(a2, c4, d2, e3, f2, g2, h) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        h = h | 0;
        var i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0;
        q2 = T;
        T = T + 16 | 0;
        p2 = q2;
        if (!((d2 | 0) > 0 | (d2 | 0) == 0 & c4 >>> 0 > 0)) {
          p2 = 0;
          T = q2;
          return p2 | 0;
        }
        if ((h | 0) >= 16) {
          p2 = 12;
          T = q2;
          return p2 | 0;
        }
        n = 0;
        o = 0;
        m = 0;
        i = 0;
        a: while (1) {
          k = a2 + (n << 3) | 0;
          j = b[k >> 2] | 0;
          k = b[k + 4 >> 2] | 0;
          l = vd(j | 0, k | 0, 52) | 0;
          H() | 0;
          if ((l & 15 | 0) > (h | 0)) {
            i = 12;
            j = 11;
            break;
          }
          Xb(p2, j, k, h);
          l = p2;
          k = b[l >> 2] | 0;
          l = b[l + 4 >> 2] | 0;
          if ((k | 0) == 0 & (l | 0) == 0) {
            j = m;
          } else {
            j = m;
            do {
              if (!((i | 0) < (g2 | 0) | (i | 0) == (g2 | 0) & j >>> 0 < f2 >>> 0)) {
                j = 10;
                break a;
              }
              m = e3 + (j << 3) | 0;
              b[m >> 2] = k;
              b[m + 4 >> 2] = l;
              j = ld(j | 0, i | 0, 1, 0) | 0;
              i = H() | 0;
              Yb(p2);
              m = p2;
              k = b[m >> 2] | 0;
              l = b[m + 4 >> 2] | 0;
            } while (!((k | 0) == 0 & (l | 0) == 0));
          }
          n = ld(n | 0, o | 0, 1, 0) | 0;
          o = H() | 0;
          if (!((o | 0) < (d2 | 0) | (o | 0) == (d2 | 0) & n >>> 0 < c4 >>> 0)) {
            i = 0;
            j = 11;
            break;
          } else {
            m = j;
          }
        }
        if ((j | 0) == 10) {
          p2 = 14;
          T = q2;
          return p2 | 0;
        } else if ((j | 0) == 11) {
          T = q2;
          return i | 0;
        }
        return 0;
      }
      function Db(a2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
        n = T;
        T = T + 16 | 0;
        m = n;
        a: do {
          if ((d2 | 0) > 0 | (d2 | 0) == 0 & c4 >>> 0 > 0) {
            k = 0;
            h = 0;
            g2 = 0;
            l = 0;
            while (1) {
              j = a2 + (k << 3) | 0;
              i = b[j >> 2] | 0;
              j = b[j + 4 >> 2] | 0;
              if (!((i | 0) == 0 & (j | 0) == 0)) {
                j = (wb(i, j, e3, m) | 0) == 0;
                i = m;
                h = ld(b[i >> 2] | 0, b[i + 4 >> 2] | 0, h | 0, g2 | 0) | 0;
                g2 = H() | 0;
                if (!j) {
                  g2 = 12;
                  break;
                }
              }
              k = ld(k | 0, l | 0, 1, 0) | 0;
              l = H() | 0;
              if (!((l | 0) < (d2 | 0) | (l | 0) == (d2 | 0) & k >>> 0 < c4 >>> 0)) {
                break a;
              }
            }
            T = n;
            return g2 | 0;
          } else {
            h = 0;
            g2 = 0;
          }
        } while (0);
        b[f2 >> 2] = h;
        b[f2 + 4 >> 2] = g2;
        f2 = 0;
        T = n;
        return f2 | 0;
      }
      function Eb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        b2 = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        return b2 & 1 | 0;
      }
      function Fb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, e3 = 0;
        e3 = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        e3 = e3 & 15;
        if (!e3) {
          e3 = 0;
          return e3 | 0;
        }
        d2 = 1;
        while (1) {
          c4 = vd(a2 | 0, b2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
          H() | 0;
          c4 = c4 & 7;
          if (c4 | 0) {
            d2 = 5;
            break;
          }
          if (d2 >>> 0 < e3 >>> 0) {
            d2 = d2 + 1 | 0;
          } else {
            c4 = 0;
            d2 = 5;
            break;
          }
        }
        if ((d2 | 0) == 5) {
          return c4 | 0;
        }
        return 0;
      }
      function Gb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        i = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        i = i & 15;
        if (!i) {
          h = b2;
          i = a2;
          G(h | 0);
          return i | 0;
        }
        h = 1;
        c4 = 0;
        while (1) {
          f2 = (15 - h | 0) * 3 | 0;
          d2 = wd(7, 0, f2 | 0) | 0;
          e3 = H() | 0;
          g2 = vd(a2 | 0, b2 | 0, f2 | 0) | 0;
          H() | 0;
          f2 = wd(Sa(g2 & 7) | 0, 0, f2 | 0) | 0;
          g2 = H() | 0;
          a2 = f2 | a2 & ~d2;
          b2 = g2 | b2 & ~e3;
          a: do {
            if (!c4) {
              if (!((f2 & d2 | 0) == 0 & (g2 & e3 | 0) == 0)) {
                d2 = vd(a2 | 0, b2 | 0, 52) | 0;
                H() | 0;
                d2 = d2 & 15;
                if (!d2) {
                  c4 = 1;
                } else {
                  c4 = 1;
                  b: while (1) {
                    g2 = vd(a2 | 0, b2 | 0, (15 - c4 | 0) * 3 | 0) | 0;
                    H() | 0;
                    switch (g2 & 7) {
                      case 1:
                        break b;
                      case 0:
                        break;
                      default: {
                        c4 = 1;
                        break a;
                      }
                    }
                    if (c4 >>> 0 < d2 >>> 0) {
                      c4 = c4 + 1 | 0;
                    } else {
                      c4 = 1;
                      break a;
                    }
                  }
                  c4 = 1;
                  while (1) {
                    g2 = (15 - c4 | 0) * 3 | 0;
                    e3 = vd(a2 | 0, b2 | 0, g2 | 0) | 0;
                    H() | 0;
                    f2 = wd(7, 0, g2 | 0) | 0;
                    b2 = b2 & ~(H() | 0);
                    g2 = wd(Sa(e3 & 7) | 0, 0, g2 | 0) | 0;
                    a2 = a2 & ~f2 | g2;
                    b2 = b2 | (H() | 0);
                    if (c4 >>> 0 < d2 >>> 0) {
                      c4 = c4 + 1 | 0;
                    } else {
                      c4 = 1;
                      break;
                    }
                  }
                }
              } else {
                c4 = 0;
              }
            }
          } while (0);
          if (h >>> 0 < i >>> 0) {
            h = h + 1 | 0;
          } else {
            break;
          }
        }
        G(b2 | 0);
        return a2 | 0;
      }
      function Hb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0;
        d2 = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        d2 = d2 & 15;
        if (!d2) {
          c4 = b2;
          d2 = a2;
          G(c4 | 0);
          return d2 | 0;
        }
        c4 = 1;
        while (1) {
          f2 = (15 - c4 | 0) * 3 | 0;
          g2 = vd(a2 | 0, b2 | 0, f2 | 0) | 0;
          H() | 0;
          e3 = wd(7, 0, f2 | 0) | 0;
          b2 = b2 & ~(H() | 0);
          f2 = wd(Sa(g2 & 7) | 0, 0, f2 | 0) | 0;
          a2 = f2 | a2 & ~e3;
          b2 = H() | 0 | b2;
          if (c4 >>> 0 < d2 >>> 0) {
            c4 = c4 + 1 | 0;
          } else {
            break;
          }
        }
        G(b2 | 0);
        return a2 | 0;
      }
      function Ib(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0;
        i = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        i = i & 15;
        if (!i) {
          h = b2;
          i = a2;
          G(h | 0);
          return i | 0;
        }
        h = 1;
        c4 = 0;
        while (1) {
          f2 = (15 - h | 0) * 3 | 0;
          d2 = wd(7, 0, f2 | 0) | 0;
          e3 = H() | 0;
          g2 = vd(a2 | 0, b2 | 0, f2 | 0) | 0;
          H() | 0;
          f2 = wd(Ta(g2 & 7) | 0, 0, f2 | 0) | 0;
          g2 = H() | 0;
          a2 = f2 | a2 & ~d2;
          b2 = g2 | b2 & ~e3;
          a: do {
            if (!c4) {
              if (!((f2 & d2 | 0) == 0 & (g2 & e3 | 0) == 0)) {
                d2 = vd(a2 | 0, b2 | 0, 52) | 0;
                H() | 0;
                d2 = d2 & 15;
                if (!d2) {
                  c4 = 1;
                } else {
                  c4 = 1;
                  b: while (1) {
                    g2 = vd(a2 | 0, b2 | 0, (15 - c4 | 0) * 3 | 0) | 0;
                    H() | 0;
                    switch (g2 & 7) {
                      case 1:
                        break b;
                      case 0:
                        break;
                      default: {
                        c4 = 1;
                        break a;
                      }
                    }
                    if (c4 >>> 0 < d2 >>> 0) {
                      c4 = c4 + 1 | 0;
                    } else {
                      c4 = 1;
                      break a;
                    }
                  }
                  c4 = 1;
                  while (1) {
                    e3 = (15 - c4 | 0) * 3 | 0;
                    f2 = wd(7, 0, e3 | 0) | 0;
                    g2 = b2 & ~(H() | 0);
                    b2 = vd(a2 | 0, b2 | 0, e3 | 0) | 0;
                    H() | 0;
                    b2 = wd(Ta(b2 & 7) | 0, 0, e3 | 0) | 0;
                    a2 = a2 & ~f2 | b2;
                    b2 = g2 | (H() | 0);
                    if (c4 >>> 0 < d2 >>> 0) {
                      c4 = c4 + 1 | 0;
                    } else {
                      c4 = 1;
                      break;
                    }
                  }
                }
              } else {
                c4 = 0;
              }
            }
          } while (0);
          if (h >>> 0 < i >>> 0) {
            h = h + 1 | 0;
          } else {
            break;
          }
        }
        G(b2 | 0);
        return a2 | 0;
      }
      function Jb(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0;
        d2 = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        d2 = d2 & 15;
        if (!d2) {
          c4 = b2;
          d2 = a2;
          G(c4 | 0);
          return d2 | 0;
        }
        c4 = 1;
        while (1) {
          g2 = (15 - c4 | 0) * 3 | 0;
          f2 = wd(7, 0, g2 | 0) | 0;
          e3 = b2 & ~(H() | 0);
          b2 = vd(a2 | 0, b2 | 0, g2 | 0) | 0;
          H() | 0;
          b2 = wd(Ta(b2 & 7) | 0, 0, g2 | 0) | 0;
          a2 = b2 | a2 & ~f2;
          b2 = H() | 0 | e3;
          if (c4 >>> 0 < d2 >>> 0) {
            c4 = c4 + 1 | 0;
          } else {
            break;
          }
        }
        G(b2 | 0);
        return a2 | 0;
      }
      function Kb(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
        j = T;
        T = T + 64 | 0;
        i = j + 40 | 0;
        e3 = j + 24 | 0;
        f2 = j + 12 | 0;
        g2 = j;
        wd(c4 | 0, 0, 52) | 0;
        d2 = H() | 0 | 134225919;
        if (!c4) {
          if ((b[a2 + 4 >> 2] | 0) > 2) {
            h = 0;
            i = 0;
            G(h | 0);
            T = j;
            return i | 0;
          }
          if ((b[a2 + 8 >> 2] | 0) > 2) {
            h = 0;
            i = 0;
            G(h | 0);
            T = j;
            return i | 0;
          }
          if ((b[a2 + 12 >> 2] | 0) > 2) {
            h = 0;
            i = 0;
            G(h | 0);
            T = j;
            return i | 0;
          }
          wd(oa(a2) | 0, 0, 45) | 0;
          h = H() | 0 | d2;
          i = -1;
          G(h | 0);
          T = j;
          return i | 0;
        }
        b[i >> 2] = b[a2 >> 2];
        b[i + 4 >> 2] = b[a2 + 4 >> 2];
        b[i + 8 >> 2] = b[a2 + 8 >> 2];
        b[i + 12 >> 2] = b[a2 + 12 >> 2];
        h = i + 4 | 0;
        if ((c4 | 0) > 0) {
          a2 = -1;
          while (1) {
            b[e3 >> 2] = b[h >> 2];
            b[e3 + 4 >> 2] = b[h + 4 >> 2];
            b[e3 + 8 >> 2] = b[h + 8 >> 2];
            if (!(c4 & 1)) {
              Ma(h);
              b[f2 >> 2] = b[h >> 2];
              b[f2 + 4 >> 2] = b[h + 4 >> 2];
              b[f2 + 8 >> 2] = b[h + 8 >> 2];
              Oa(f2);
            } else {
              La(h);
              b[f2 >> 2] = b[h >> 2];
              b[f2 + 4 >> 2] = b[h + 4 >> 2];
              b[f2 + 8 >> 2] = b[h + 8 >> 2];
              Na(f2);
            }
            Ga(e3, f2, g2);
            Da(g2);
            l = (15 - c4 | 0) * 3 | 0;
            k = wd(7, 0, l | 0) | 0;
            d2 = d2 & ~(H() | 0);
            l = wd(Ia(g2) | 0, 0, l | 0) | 0;
            a2 = l | a2 & ~k;
            d2 = H() | 0 | d2;
            if ((c4 | 0) > 1) {
              c4 = c4 + -1 | 0;
            } else {
              break;
            }
          }
        } else {
          a2 = -1;
        }
        a: do {
          if (((b[h >> 2] | 0) <= 2 ? (b[i + 8 >> 2] | 0) <= 2 : 0) ? (b[i + 12 >> 2] | 0) <= 2 : 0) {
            e3 = oa(i) | 0;
            c4 = wd(e3 | 0, 0, 45) | 0;
            c4 = c4 | a2;
            a2 = H() | 0 | d2 & -1040385;
            g2 = pa(i) | 0;
            if (!(ma(e3) | 0)) {
              if ((g2 | 0) <= 0) {
                break;
              }
              f2 = 0;
              while (1) {
                e3 = vd(c4 | 0, a2 | 0, 52) | 0;
                H() | 0;
                e3 = e3 & 15;
                if (e3) {
                  d2 = 1;
                  while (1) {
                    l = (15 - d2 | 0) * 3 | 0;
                    i = vd(c4 | 0, a2 | 0, l | 0) | 0;
                    H() | 0;
                    k = wd(7, 0, l | 0) | 0;
                    a2 = a2 & ~(H() | 0);
                    l = wd(Sa(i & 7) | 0, 0, l | 0) | 0;
                    c4 = c4 & ~k | l;
                    a2 = a2 | (H() | 0);
                    if (d2 >>> 0 < e3 >>> 0) {
                      d2 = d2 + 1 | 0;
                    } else {
                      break;
                    }
                  }
                }
                f2 = f2 + 1 | 0;
                if ((f2 | 0) == (g2 | 0)) {
                  break a;
                }
              }
            }
            f2 = vd(c4 | 0, a2 | 0, 52) | 0;
            H() | 0;
            f2 = f2 & 15;
            b: do {
              if (f2) {
                d2 = 1;
                c: while (1) {
                  l = vd(c4 | 0, a2 | 0, (15 - d2 | 0) * 3 | 0) | 0;
                  H() | 0;
                  switch (l & 7) {
                    case 1:
                      break c;
                    case 0:
                      break;
                    default:
                      break b;
                  }
                  if (d2 >>> 0 < f2 >>> 0) {
                    d2 = d2 + 1 | 0;
                  } else {
                    break b;
                  }
                }
                if (sa(e3, b[i >> 2] | 0) | 0) {
                  d2 = 1;
                  while (1) {
                    i = (15 - d2 | 0) * 3 | 0;
                    k = wd(7, 0, i | 0) | 0;
                    l = a2 & ~(H() | 0);
                    a2 = vd(c4 | 0, a2 | 0, i | 0) | 0;
                    H() | 0;
                    a2 = wd(Ta(a2 & 7) | 0, 0, i | 0) | 0;
                    c4 = c4 & ~k | a2;
                    a2 = l | (H() | 0);
                    if (d2 >>> 0 < f2 >>> 0) {
                      d2 = d2 + 1 | 0;
                    } else {
                      break;
                    }
                  }
                } else {
                  d2 = 1;
                  while (1) {
                    l = (15 - d2 | 0) * 3 | 0;
                    i = vd(c4 | 0, a2 | 0, l | 0) | 0;
                    H() | 0;
                    k = wd(7, 0, l | 0) | 0;
                    a2 = a2 & ~(H() | 0);
                    l = wd(Sa(i & 7) | 0, 0, l | 0) | 0;
                    c4 = c4 & ~k | l;
                    a2 = a2 | (H() | 0);
                    if (d2 >>> 0 < f2 >>> 0) {
                      d2 = d2 + 1 | 0;
                    } else {
                      break;
                    }
                  }
                }
              }
            } while (0);
            if ((g2 | 0) > 0) {
              d2 = 0;
              do {
                c4 = Gb(c4, a2) | 0;
                a2 = H() | 0;
                d2 = d2 + 1 | 0;
              } while ((d2 | 0) != (g2 | 0));
            }
          } else {
            c4 = 0;
            a2 = 0;
          }
        } while (0);
        k = a2;
        l = c4;
        G(k | 0);
        T = j;
        return l | 0;
      }
      function Lb(a2) {
        a2 = a2 | 0;
        return (a2 | 0) % 2 | 0 | 0;
      }
      function Mb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0;
        f2 = T;
        T = T + 16 | 0;
        e3 = f2;
        if (c4 >>> 0 > 15) {
          e3 = 4;
          T = f2;
          return e3 | 0;
        }
        if ((b[a2 + 4 >> 2] & 2146435072 | 0) == 2146435072) {
          e3 = 3;
          T = f2;
          return e3 | 0;
        }
        if ((b[a2 + 8 + 4 >> 2] & 2146435072 | 0) == 2146435072) {
          e3 = 3;
          T = f2;
          return e3 | 0;
        }
        hb(a2, c4, e3);
        c4 = Kb(e3, c4) | 0;
        e3 = H() | 0;
        b[d2 >> 2] = c4;
        b[d2 + 4 >> 2] = e3;
        if ((c4 | 0) == 0 & (e3 | 0) == 0) {
          I(23313, 22674, 786, 22697);
        }
        e3 = 0;
        T = f2;
        return e3 | 0;
      }
      function Nb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0;
        f2 = d2 + 4 | 0;
        g2 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        g2 = g2 & 15;
        h = vd(a2 | 0, c4 | 0, 45) | 0;
        H() | 0;
        e3 = (g2 | 0) == 0;
        if (!(ma(h & 127) | 0)) {
          if (e3) {
            h = 0;
            return h | 0;
          }
          if ((b[f2 >> 2] | 0) == 0 ? (b[d2 + 8 >> 2] | 0) == 0 : 0) {
            e3 = (b[d2 + 12 >> 2] | 0) != 0 & 1;
          } else {
            e3 = 1;
          }
        } else if (e3) {
          h = 1;
          return h | 0;
        } else {
          e3 = 1;
        }
        d2 = 1;
        while (1) {
          if (!(d2 & 1)) {
            Oa(f2);
          } else {
            Na(f2);
          }
          h = vd(a2 | 0, c4 | 0, (15 - d2 | 0) * 3 | 0) | 0;
          H() | 0;
          Pa(f2, h & 7);
          if (d2 >>> 0 < g2 >>> 0) {
            d2 = d2 + 1 | 0;
          } else {
            break;
          }
        }
        return e3 | 0;
      }
      function Ob(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0;
        l = T;
        T = T + 16 | 0;
        j = l;
        k = vd(a2 | 0, c4 | 0, 45) | 0;
        H() | 0;
        k = k & 127;
        if (k >>> 0 > 121) {
          b[d2 >> 2] = 0;
          b[d2 + 4 >> 2] = 0;
          b[d2 + 8 >> 2] = 0;
          b[d2 + 12 >> 2] = 0;
          k = 5;
          T = l;
          return k | 0;
        }
        a: do {
          if ((ma(k) | 0) != 0 ? (g2 = vd(a2 | 0, c4 | 0, 52) | 0, H() | 0, g2 = g2 & 15, (g2 | 0) != 0) : 0) {
            e3 = 1;
            b: while (1) {
              i = vd(a2 | 0, c4 | 0, (15 - e3 | 0) * 3 | 0) | 0;
              H() | 0;
              switch (i & 7) {
                case 5:
                  break b;
                case 0:
                  break;
                default: {
                  e3 = c4;
                  break a;
                }
              }
              if (e3 >>> 0 < g2 >>> 0) {
                e3 = e3 + 1 | 0;
              } else {
                e3 = c4;
                break a;
              }
            }
            f2 = 1;
            e3 = c4;
            while (1) {
              c4 = (15 - f2 | 0) * 3 | 0;
              h = wd(7, 0, c4 | 0) | 0;
              i = e3 & ~(H() | 0);
              e3 = vd(a2 | 0, e3 | 0, c4 | 0) | 0;
              H() | 0;
              e3 = wd(Ta(e3 & 7) | 0, 0, c4 | 0) | 0;
              a2 = a2 & ~h | e3;
              e3 = i | (H() | 0);
              if (f2 >>> 0 < g2 >>> 0) {
                f2 = f2 + 1 | 0;
              } else {
                break;
              }
            }
          } else {
            e3 = c4;
          }
        } while (0);
        i = 7696 + (k * 28 | 0) | 0;
        b[d2 >> 2] = b[i >> 2];
        b[d2 + 4 >> 2] = b[i + 4 >> 2];
        b[d2 + 8 >> 2] = b[i + 8 >> 2];
        b[d2 + 12 >> 2] = b[i + 12 >> 2];
        if (!(Nb(a2, e3, d2) | 0)) {
          k = 0;
          T = l;
          return k | 0;
        }
        h = d2 + 4 | 0;
        b[j >> 2] = b[h >> 2];
        b[j + 4 >> 2] = b[h + 4 >> 2];
        b[j + 8 >> 2] = b[h + 8 >> 2];
        g2 = vd(a2 | 0, e3 | 0, 52) | 0;
        H() | 0;
        i = g2 & 15;
        if (!(g2 & 1)) {
          g2 = i;
        } else {
          Oa(h);
          g2 = i + 1 | 0;
        }
        if (!(ma(k) | 0)) {
          e3 = 0;
        } else {
          c: do {
            if (!i) {
              e3 = 0;
            } else {
              c4 = 1;
              while (1) {
                f2 = vd(a2 | 0, e3 | 0, (15 - c4 | 0) * 3 | 0) | 0;
                H() | 0;
                f2 = f2 & 7;
                if (f2 | 0) {
                  e3 = f2;
                  break c;
                }
                if (c4 >>> 0 < i >>> 0) {
                  c4 = c4 + 1 | 0;
                } else {
                  e3 = 0;
                  break;
                }
              }
            }
          } while (0);
          e3 = (e3 | 0) == 4 & 1;
        }
        if (!(ob(d2, g2, e3, 0) | 0)) {
          if ((g2 | 0) != (i | 0)) {
            b[h >> 2] = b[j >> 2];
            b[h + 4 >> 2] = b[j + 4 >> 2];
            b[h + 8 >> 2] = b[j + 8 >> 2];
          }
        } else {
          if (ma(k) | 0) {
            do {
            } while ((ob(d2, g2, 0, 0) | 0) != 0);
          }
          if ((g2 | 0) != (i | 0)) {
            Ma(h);
          }
        }
        k = 0;
        T = l;
        return k | 0;
      }
      function Pb(a2, b2, c4) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0, f2 = 0;
        f2 = T;
        T = T + 16 | 0;
        d2 = f2;
        e3 = Ob(a2, b2, d2) | 0;
        if (e3 | 0) {
          T = f2;
          return e3 | 0;
        }
        e3 = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        lb(d2, e3 & 15, c4);
        e3 = 0;
        T = f2;
        return e3 | 0;
      }
      function Qb(a2, b2, c4) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0;
        g2 = T;
        T = T + 16 | 0;
        f2 = g2;
        d2 = Ob(a2, b2, f2) | 0;
        if (d2 | 0) {
          f2 = d2;
          T = g2;
          return f2 | 0;
        }
        d2 = vd(a2 | 0, b2 | 0, 45) | 0;
        H() | 0;
        d2 = (ma(d2 & 127) | 0) == 0;
        e3 = vd(a2 | 0, b2 | 0, 52) | 0;
        H() | 0;
        e3 = e3 & 15;
        a: do {
          if (!d2) {
            if (e3 | 0) {
              d2 = 1;
              while (1) {
                h = wd(7, 0, (15 - d2 | 0) * 3 | 0) | 0;
                if (!((h & a2 | 0) == 0 & ((H() | 0) & b2 | 0) == 0)) {
                  break a;
                }
                if (d2 >>> 0 < e3 >>> 0) {
                  d2 = d2 + 1 | 0;
                } else {
                  break;
                }
              }
            }
            mb(f2, e3, 0, 5, c4);
            h = 0;
            T = g2;
            return h | 0;
          }
        } while (0);
        qb(f2, e3, 0, 6, c4);
        h = 0;
        T = g2;
        return h | 0;
      }
      function Rb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0;
        f2 = vd(a2 | 0, c4 | 0, 45) | 0;
        H() | 0;
        if (!(ma(f2 & 127) | 0)) {
          f2 = 2;
          b[d2 >> 2] = f2;
          return 0;
        }
        f2 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        f2 = f2 & 15;
        if (!f2) {
          f2 = 5;
          b[d2 >> 2] = f2;
          return 0;
        }
        e3 = 1;
        while (1) {
          g2 = wd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
          if (!((g2 & a2 | 0) == 0 & ((H() | 0) & c4 | 0) == 0)) {
            e3 = 2;
            a2 = 6;
            break;
          }
          if (e3 >>> 0 < f2 >>> 0) {
            e3 = e3 + 1 | 0;
          } else {
            e3 = 5;
            a2 = 6;
            break;
          }
        }
        if ((a2 | 0) == 6) {
          b[d2 >> 2] = e3;
          return 0;
        }
        return 0;
      }
      function Sb(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
        m = T;
        T = T + 128 | 0;
        k = m + 112 | 0;
        g2 = m + 96 | 0;
        l = m;
        f2 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        i = f2 & 15;
        b[k >> 2] = i;
        h = vd(a2 | 0, c4 | 0, 45) | 0;
        H() | 0;
        h = h & 127;
        a: do {
          if (ma(h) | 0) {
            if (i | 0) {
              e3 = 1;
              while (1) {
                j = wd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
                if (!((j & a2 | 0) == 0 & ((H() | 0) & c4 | 0) == 0)) {
                  f2 = 0;
                  break a;
                }
                if (e3 >>> 0 < i >>> 0) {
                  e3 = e3 + 1 | 0;
                } else {
                  break;
                }
              }
            }
            if (!(f2 & 1)) {
              j = wd(i + 1 | 0, 0, 52) | 0;
              l = H() | 0 | c4 & -15728641;
              k = wd(7, 0, (14 - i | 0) * 3 | 0) | 0;
              l = Sb((j | a2) & ~k, l & ~(H() | 0), d2) | 0;
              T = m;
              return l | 0;
            } else {
              f2 = 1;
            }
          } else {
            f2 = 0;
          }
        } while (0);
        e3 = Ob(a2, c4, g2) | 0;
        if (!e3) {
          if (f2) {
            nb(g2, k, l);
            j = 5;
          } else {
            rb(g2, k, l);
            j = 6;
          }
          b: do {
            if (ma(h) | 0) {
              if (!i) {
                a2 = 5;
              } else {
                e3 = 1;
                while (1) {
                  h = wd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
                  if (!((h & a2 | 0) == 0 & ((H() | 0) & c4 | 0) == 0)) {
                    a2 = 2;
                    break b;
                  }
                  if (e3 >>> 0 < i >>> 0) {
                    e3 = e3 + 1 | 0;
                  } else {
                    a2 = 5;
                    break;
                  }
                }
              }
            } else {
              a2 = 2;
            }
          } while (0);
          Bd(d2 | 0, -1, a2 << 2 | 0) | 0;
          c: do {
            if (f2) {
              g2 = 0;
              while (1) {
                h = l + (g2 << 4) | 0;
                pb(h, b[k >> 2] | 0) | 0;
                h = b[h >> 2] | 0;
                i = b[d2 >> 2] | 0;
                if ((i | 0) == -1 | (i | 0) == (h | 0)) {
                  e3 = d2;
                } else {
                  f2 = 0;
                  do {
                    f2 = f2 + 1 | 0;
                    if (f2 >>> 0 >= a2 >>> 0) {
                      e3 = 1;
                      break c;
                    }
                    e3 = d2 + (f2 << 2) | 0;
                    i = b[e3 >> 2] | 0;
                  } while (!((i | 0) == -1 | (i | 0) == (h | 0)));
                }
                b[e3 >> 2] = h;
                g2 = g2 + 1 | 0;
                if (g2 >>> 0 >= j >>> 0) {
                  e3 = 0;
                  break;
                }
              }
            } else {
              g2 = 0;
              while (1) {
                h = l + (g2 << 4) | 0;
                ob(h, b[k >> 2] | 0, 0, 1) | 0;
                h = b[h >> 2] | 0;
                i = b[d2 >> 2] | 0;
                if ((i | 0) == -1 | (i | 0) == (h | 0)) {
                  e3 = d2;
                } else {
                  f2 = 0;
                  do {
                    f2 = f2 + 1 | 0;
                    if (f2 >>> 0 >= a2 >>> 0) {
                      e3 = 1;
                      break c;
                    }
                    e3 = d2 + (f2 << 2) | 0;
                    i = b[e3 >> 2] | 0;
                  } while (!((i | 0) == -1 | (i | 0) == (h | 0)));
                }
                b[e3 >> 2] = h;
                g2 = g2 + 1 | 0;
                if (g2 >>> 0 >= j >>> 0) {
                  e3 = 0;
                  break;
                }
              }
            }
          } while (0);
        }
        l = e3;
        T = m;
        return l | 0;
      }
      function Tb() {
        return 12;
      }
      function Ub(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
        if (a2 >>> 0 > 15) {
          i = 4;
          return i | 0;
        }
        wd(a2 | 0, 0, 52) | 0;
        i = H() | 0 | 134225919;
        if (!a2) {
          d2 = 0;
          e3 = 0;
          do {
            if (ma(e3) | 0) {
              wd(e3 | 0, 0, 45) | 0;
              h = i | (H() | 0);
              a2 = c4 + (d2 << 3) | 0;
              b[a2 >> 2] = -1;
              b[a2 + 4 >> 2] = h;
              d2 = d2 + 1 | 0;
            }
            e3 = e3 + 1 | 0;
          } while ((e3 | 0) != 122);
          d2 = 0;
          return d2 | 0;
        }
        d2 = 0;
        h = 0;
        do {
          if (ma(h) | 0) {
            wd(h | 0, 0, 45) | 0;
            e3 = 1;
            f2 = -1;
            g2 = i | (H() | 0);
            while (1) {
              j = wd(7, 0, (15 - e3 | 0) * 3 | 0) | 0;
              f2 = f2 & ~j;
              g2 = g2 & ~(H() | 0);
              if ((e3 | 0) == (a2 | 0)) {
                break;
              } else {
                e3 = e3 + 1 | 0;
              }
            }
            j = c4 + (d2 << 3) | 0;
            b[j >> 2] = f2;
            b[j + 4 >> 2] = g2;
            d2 = d2 + 1 | 0;
          }
          h = h + 1 | 0;
        } while ((h | 0) != 122);
        d2 = 0;
        return d2 | 0;
      }
      function Vb(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0;
        t4 = T;
        T = T + 16 | 0;
        r2 = t4;
        s2 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        s2 = s2 & 15;
        if (d2 >>> 0 > 15) {
          s2 = 4;
          T = t4;
          return s2 | 0;
        }
        if ((s2 | 0) < (d2 | 0)) {
          s2 = 12;
          T = t4;
          return s2 | 0;
        }
        if ((s2 | 0) != (d2 | 0)) {
          g2 = wd(d2 | 0, 0, 52) | 0;
          g2 = g2 | a2;
          i = H() | 0 | c4 & -15728641;
          if ((s2 | 0) > (d2 | 0)) {
            j = d2;
            do {
              q2 = wd(7, 0, (14 - j | 0) * 3 | 0) | 0;
              j = j + 1 | 0;
              g2 = q2 | g2;
              i = H() | 0 | i;
            } while ((j | 0) < (s2 | 0));
            q2 = g2;
          } else {
            q2 = g2;
          }
        } else {
          q2 = a2;
          i = c4;
        }
        p2 = vd(q2 | 0, i | 0, 45) | 0;
        H() | 0;
        a: do {
          if (ma(p2 & 127) | 0) {
            j = vd(q2 | 0, i | 0, 52) | 0;
            H() | 0;
            j = j & 15;
            if (j | 0) {
              g2 = 1;
              while (1) {
                p2 = wd(7, 0, (15 - g2 | 0) * 3 | 0) | 0;
                if (!((p2 & q2 | 0) == 0 & ((H() | 0) & i | 0) == 0)) {
                  k = 33;
                  break a;
                }
                if (g2 >>> 0 < j >>> 0) {
                  g2 = g2 + 1 | 0;
                } else {
                  break;
                }
              }
            }
            p2 = e3;
            b[p2 >> 2] = 0;
            b[p2 + 4 >> 2] = 0;
            if ((s2 | 0) > (d2 | 0)) {
              p2 = c4 & -15728641;
              o = s2;
              while (1) {
                n = o;
                o = o + -1 | 0;
                if (o >>> 0 > 15 | (s2 | 0) < (o | 0)) {
                  k = 19;
                  break;
                }
                if ((s2 | 0) != (o | 0)) {
                  g2 = wd(o | 0, 0, 52) | 0;
                  g2 = g2 | a2;
                  j = H() | 0 | p2;
                  if ((s2 | 0) < (n | 0)) {
                    m = g2;
                  } else {
                    k = o;
                    do {
                      m = wd(7, 0, (14 - k | 0) * 3 | 0) | 0;
                      k = k + 1 | 0;
                      g2 = m | g2;
                      j = H() | 0 | j;
                    } while ((k | 0) < (s2 | 0));
                    m = g2;
                  }
                } else {
                  m = a2;
                  j = c4;
                }
                l = vd(m | 0, j | 0, 45) | 0;
                H() | 0;
                if (!(ma(l & 127) | 0)) {
                  g2 = 0;
                } else {
                  l = vd(m | 0, j | 0, 52) | 0;
                  H() | 0;
                  l = l & 15;
                  b: do {
                    if (!l) {
                      g2 = 0;
                    } else {
                      k = 1;
                      while (1) {
                        g2 = vd(m | 0, j | 0, (15 - k | 0) * 3 | 0) | 0;
                        H() | 0;
                        g2 = g2 & 7;
                        if (g2 | 0) {
                          break b;
                        }
                        if (k >>> 0 < l >>> 0) {
                          k = k + 1 | 0;
                        } else {
                          g2 = 0;
                          break;
                        }
                      }
                    }
                  } while (0);
                  g2 = (g2 | 0) == 0 & 1;
                }
                j = vd(a2 | 0, c4 | 0, (15 - n | 0) * 3 | 0) | 0;
                H() | 0;
                j = j & 7;
                if ((j | 0) == 7) {
                  f2 = 5;
                  k = 42;
                  break;
                }
                g2 = (g2 | 0) != 0;
                if ((j | 0) == 1 & g2) {
                  f2 = 5;
                  k = 42;
                  break;
                }
                m = j + (((j | 0) != 0 & g2) << 31 >> 31) | 0;
                if (m | 0) {
                  k = s2 - n | 0;
                  k = Cc(7, 0, k, ((k | 0) < 0) << 31 >> 31) | 0;
                  l = H() | 0;
                  if (g2) {
                    g2 = rd(k | 0, l | 0, 5, 0) | 0;
                    g2 = ld(g2 | 0, H() | 0, -5, -1) | 0;
                    g2 = pd(g2 | 0, H() | 0, 6, 0) | 0;
                    g2 = ld(g2 | 0, H() | 0, 1, 0) | 0;
                    j = H() | 0;
                  } else {
                    g2 = k;
                    j = l;
                  }
                  n = m + -1 | 0;
                  n = rd(k | 0, l | 0, n | 0, ((n | 0) < 0) << 31 >> 31 | 0) | 0;
                  n = ld(g2 | 0, j | 0, n | 0, H() | 0) | 0;
                  m = H() | 0;
                  l = e3;
                  l = ld(n | 0, m | 0, b[l >> 2] | 0, b[l + 4 >> 2] | 0) | 0;
                  m = H() | 0;
                  n = e3;
                  b[n >> 2] = l;
                  b[n + 4 >> 2] = m;
                }
                if ((o | 0) <= (d2 | 0)) {
                  k = 37;
                  break;
                }
              }
              if ((k | 0) == 19) {
                I(23313, 22674, 1099, 22710);
              } else if ((k | 0) == 37) {
                h = e3;
                f2 = b[h + 4 >> 2] | 0;
                h = b[h >> 2] | 0;
                break;
              } else if ((k | 0) == 42) {
                T = t4;
                return f2 | 0;
              }
            } else {
              f2 = 0;
              h = 0;
            }
          } else {
            k = 33;
          }
        } while (0);
        c: do {
          if ((k | 0) == 33) {
            p2 = e3;
            b[p2 >> 2] = 0;
            b[p2 + 4 >> 2] = 0;
            if ((s2 | 0) > (d2 | 0)) {
              g2 = s2;
              while (1) {
                f2 = vd(a2 | 0, c4 | 0, (15 - g2 | 0) * 3 | 0) | 0;
                H() | 0;
                f2 = f2 & 7;
                if ((f2 | 0) == 7) {
                  f2 = 5;
                  break;
                }
                h = s2 - g2 | 0;
                h = Cc(7, 0, h, ((h | 0) < 0) << 31 >> 31) | 0;
                f2 = rd(h | 0, H() | 0, f2 | 0, 0) | 0;
                h = H() | 0;
                p2 = e3;
                h = ld(b[p2 >> 2] | 0, b[p2 + 4 >> 2] | 0, f2 | 0, h | 0) | 0;
                f2 = H() | 0;
                p2 = e3;
                b[p2 >> 2] = h;
                b[p2 + 4 >> 2] = f2;
                g2 = g2 + -1 | 0;
                if ((g2 | 0) <= (d2 | 0)) {
                  break c;
                }
              }
              T = t4;
              return f2 | 0;
            } else {
              f2 = 0;
              h = 0;
            }
          }
        } while (0);
        if (wb(q2, i, s2, r2) | 0) {
          I(23313, 22674, 1063, 22725);
        }
        s2 = r2;
        r2 = b[s2 + 4 >> 2] | 0;
        if (((f2 | 0) > -1 | (f2 | 0) == -1 & h >>> 0 > 4294967295) & ((r2 | 0) > (f2 | 0) | ((r2 | 0) == (f2 | 0) ? (b[s2 >> 2] | 0) >>> 0 > h >>> 0 : 0))) {
          s2 = 0;
          T = t4;
          return s2 | 0;
        } else {
          I(23313, 22674, 1139, 22710);
        }
        return 0;
      }
      function Wb(a2, c4, d2, e3, f2, g2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0;
        m = T;
        T = T + 16 | 0;
        h = m;
        if (f2 >>> 0 > 15) {
          g2 = 4;
          T = m;
          return g2 | 0;
        }
        i = vd(d2 | 0, e3 | 0, 52) | 0;
        H() | 0;
        i = i & 15;
        if ((i | 0) > (f2 | 0)) {
          g2 = 12;
          T = m;
          return g2 | 0;
        }
        if (wb(d2, e3, f2, h) | 0) {
          I(23313, 22674, 1063, 22725);
        }
        l = h;
        k = b[l + 4 >> 2] | 0;
        if (!(((c4 | 0) > -1 | (c4 | 0) == -1 & a2 >>> 0 > 4294967295) & ((k | 0) > (c4 | 0) | ((k | 0) == (c4 | 0) ? (b[l >> 2] | 0) >>> 0 > a2 >>> 0 : 0)))) {
          g2 = 2;
          T = m;
          return g2 | 0;
        }
        l = f2 - i | 0;
        f2 = wd(f2 | 0, 0, 52) | 0;
        j = H() | 0 | e3 & -15728641;
        k = g2;
        b[k >> 2] = f2 | d2;
        b[k + 4 >> 2] = j;
        k = vd(d2 | 0, e3 | 0, 45) | 0;
        H() | 0;
        a: do {
          if (ma(k & 127) | 0) {
            if (i | 0) {
              h = 1;
              while (1) {
                k = wd(7, 0, (15 - h | 0) * 3 | 0) | 0;
                if (!((k & d2 | 0) == 0 & ((H() | 0) & e3 | 0) == 0)) {
                  break a;
                }
                if (h >>> 0 < i >>> 0) {
                  h = h + 1 | 0;
                } else {
                  break;
                }
              }
            }
            if ((l | 0) < 1) {
              g2 = 0;
              T = m;
              return g2 | 0;
            }
            k = i ^ 15;
            e3 = -1;
            j = 1;
            h = 1;
            while (1) {
              i = l - j | 0;
              i = Cc(7, 0, i, ((i | 0) < 0) << 31 >> 31) | 0;
              d2 = H() | 0;
              do {
                if (h) {
                  h = rd(i | 0, d2 | 0, 5, 0) | 0;
                  h = ld(h | 0, H() | 0, -5, -1) | 0;
                  h = pd(h | 0, H() | 0, 6, 0) | 0;
                  f2 = H() | 0;
                  if ((c4 | 0) > (f2 | 0) | (c4 | 0) == (f2 | 0) & a2 >>> 0 > h >>> 0) {
                    c4 = ld(a2 | 0, c4 | 0, -1, -1) | 0;
                    c4 = md(c4 | 0, H() | 0, h | 0, f2 | 0) | 0;
                    h = H() | 0;
                    n = g2;
                    p2 = b[n >> 2] | 0;
                    n = b[n + 4 >> 2] | 0;
                    q2 = (k + e3 | 0) * 3 | 0;
                    o = wd(7, 0, q2 | 0) | 0;
                    n = n & ~(H() | 0);
                    e3 = pd(c4 | 0, h | 0, i | 0, d2 | 0) | 0;
                    a2 = H() | 0;
                    f2 = ld(e3 | 0, a2 | 0, 2, 0) | 0;
                    q2 = wd(f2 | 0, H() | 0, q2 | 0) | 0;
                    n = H() | 0 | n;
                    f2 = g2;
                    b[f2 >> 2] = q2 | p2 & ~o;
                    b[f2 + 4 >> 2] = n;
                    a2 = rd(e3 | 0, a2 | 0, i | 0, d2 | 0) | 0;
                    a2 = md(c4 | 0, h | 0, a2 | 0, H() | 0) | 0;
                    h = 0;
                    c4 = H() | 0;
                    break;
                  } else {
                    q2 = g2;
                    o = b[q2 >> 2] | 0;
                    q2 = b[q2 + 4 >> 2] | 0;
                    p2 = wd(7, 0, (k + e3 | 0) * 3 | 0) | 0;
                    q2 = q2 & ~(H() | 0);
                    h = g2;
                    b[h >> 2] = o & ~p2;
                    b[h + 4 >> 2] = q2;
                    h = 1;
                    break;
                  }
                } else {
                  o = g2;
                  f2 = b[o >> 2] | 0;
                  o = b[o + 4 >> 2] | 0;
                  e3 = (k + e3 | 0) * 3 | 0;
                  n = wd(7, 0, e3 | 0) | 0;
                  o = o & ~(H() | 0);
                  q2 = pd(a2 | 0, c4 | 0, i | 0, d2 | 0) | 0;
                  h = H() | 0;
                  e3 = wd(q2 | 0, h | 0, e3 | 0) | 0;
                  o = H() | 0 | o;
                  p2 = g2;
                  b[p2 >> 2] = e3 | f2 & ~n;
                  b[p2 + 4 >> 2] = o;
                  h = rd(q2 | 0, h | 0, i | 0, d2 | 0) | 0;
                  a2 = md(a2 | 0, c4 | 0, h | 0, H() | 0) | 0;
                  h = 0;
                  c4 = H() | 0;
                }
              } while (0);
              if ((l | 0) > (j | 0)) {
                e3 = ~j;
                j = j + 1 | 0;
              } else {
                c4 = 0;
                break;
              }
            }
            T = m;
            return c4 | 0;
          }
        } while (0);
        if ((l | 0) < 1) {
          q2 = 0;
          T = m;
          return q2 | 0;
        }
        f2 = i ^ 15;
        h = 1;
        while (1) {
          p2 = l - h | 0;
          p2 = Cc(7, 0, p2, ((p2 | 0) < 0) << 31 >> 31) | 0;
          q2 = H() | 0;
          j = g2;
          d2 = b[j >> 2] | 0;
          j = b[j + 4 >> 2] | 0;
          i = (f2 - h | 0) * 3 | 0;
          e3 = wd(7, 0, i | 0) | 0;
          j = j & ~(H() | 0);
          n = pd(a2 | 0, c4 | 0, p2 | 0, q2 | 0) | 0;
          o = H() | 0;
          i = wd(n | 0, o | 0, i | 0) | 0;
          j = H() | 0 | j;
          k = g2;
          b[k >> 2] = i | d2 & ~e3;
          b[k + 4 >> 2] = j;
          q2 = rd(n | 0, o | 0, p2 | 0, q2 | 0) | 0;
          a2 = md(a2 | 0, c4 | 0, q2 | 0, H() | 0) | 0;
          c4 = H() | 0;
          if ((l | 0) <= (h | 0)) {
            c4 = 0;
            break;
          } else {
            h = h + 1 | 0;
          }
        }
        T = m;
        return c4 | 0;
      }
      function Xb(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0;
        f2 = vd(c4 | 0, d2 | 0, 52) | 0;
        H() | 0;
        f2 = f2 & 15;
        if ((c4 | 0) == 0 & (d2 | 0) == 0 | ((e3 | 0) > 15 | (f2 | 0) > (e3 | 0))) {
          e3 = -1;
          f2 = -1;
          c4 = 0;
          d2 = 0;
        } else {
          g2 = zb(c4, d2, f2 + 1 | 0, e3) | 0;
          d2 = (H() | 0) & -15728641;
          c4 = wd(e3 | 0, 0, 52) | 0;
          c4 = g2 | c4;
          d2 = d2 | (H() | 0);
          g2 = (xb(c4, d2) | 0) == 0;
          e3 = g2 ? -1 : e3;
        }
        g2 = a2;
        b[g2 >> 2] = c4;
        b[g2 + 4 >> 2] = d2;
        b[a2 + 8 >> 2] = f2;
        b[a2 + 12 >> 2] = e3;
        return;
      }
      function Yb(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
        d2 = a2;
        c4 = b[d2 >> 2] | 0;
        d2 = b[d2 + 4 >> 2] | 0;
        if ((c4 | 0) == 0 & (d2 | 0) == 0) {
          return;
        }
        e3 = vd(c4 | 0, d2 | 0, 52) | 0;
        H() | 0;
        e3 = e3 & 15;
        i = wd(1, 0, (e3 ^ 15) * 3 | 0) | 0;
        c4 = ld(i | 0, H() | 0, c4 | 0, d2 | 0) | 0;
        d2 = H() | 0;
        i = a2;
        b[i >> 2] = c4;
        b[i + 4 >> 2] = d2;
        i = a2 + 8 | 0;
        h = b[i >> 2] | 0;
        if ((e3 | 0) < (h | 0)) {
          return;
        }
        j = a2 + 12 | 0;
        g2 = e3;
        while (1) {
          if ((g2 | 0) == (h | 0)) {
            e3 = 5;
            break;
          }
          k = (g2 | 0) == (b[j >> 2] | 0);
          f2 = (15 - g2 | 0) * 3 | 0;
          e3 = vd(c4 | 0, d2 | 0, f2 | 0) | 0;
          H() | 0;
          e3 = e3 & 7;
          if (k & ((e3 | 0) == 1 & true)) {
            e3 = 7;
            break;
          }
          if (!((e3 | 0) == 7 & true)) {
            e3 = 10;
            break;
          }
          k = wd(1, 0, f2 | 0) | 0;
          c4 = ld(c4 | 0, d2 | 0, k | 0, H() | 0) | 0;
          d2 = H() | 0;
          k = a2;
          b[k >> 2] = c4;
          b[k + 4 >> 2] = d2;
          if ((g2 | 0) > (h | 0)) {
            g2 = g2 + -1 | 0;
          } else {
            e3 = 10;
            break;
          }
        }
        if ((e3 | 0) == 5) {
          k = a2;
          b[k >> 2] = 0;
          b[k + 4 >> 2] = 0;
          b[i >> 2] = -1;
          b[j >> 2] = -1;
          return;
        } else if ((e3 | 0) == 7) {
          h = wd(1, 0, f2 | 0) | 0;
          h = ld(c4 | 0, d2 | 0, h | 0, H() | 0) | 0;
          i = H() | 0;
          k = a2;
          b[k >> 2] = h;
          b[k + 4 >> 2] = i;
          b[j >> 2] = g2 + -1;
          return;
        } else if ((e3 | 0) == 10) {
          return;
        }
      }
      function Zb(a2) {
        a2 = +a2;
        var b2 = 0;
        b2 = a2 < 0 ? a2 + 6.283185307179586 : a2;
        return +(!(a2 >= 6.283185307179586) ? b2 : b2 + -6.283185307179586);
      }
      function _b2(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (!(+q(+(+e[a2 >> 3] - +e[b2 >> 3])) < 17453292519943298e-27)) {
          b2 = 0;
          return b2 | 0;
        }
        b2 = +q(+(+e[a2 + 8 >> 3] - +e[b2 + 8 >> 3])) < 17453292519943298e-27;
        return b2 | 0;
      }
      function $b(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, f2 = 0, g2 = 0;
        f2 = +e[b2 >> 3];
        d2 = +e[a2 >> 3];
        g2 = +u4(+((f2 - d2) * 0.5));
        c4 = +u4(+((+e[b2 + 8 >> 3] - +e[a2 + 8 >> 3]) * 0.5));
        c4 = g2 * g2 + c4 * (+t(+f2) * +t(+d2) * c4);
        return +(+z(+ +r(+c4), + +r(+(1 - c4))) * 2);
      }
      function ac2(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, f2 = 0, g2 = 0;
        f2 = +e[b2 >> 3];
        d2 = +e[a2 >> 3];
        g2 = +u4(+((f2 - d2) * 0.5));
        c4 = +u4(+((+e[b2 + 8 >> 3] - +e[a2 + 8 >> 3]) * 0.5));
        c4 = g2 * g2 + c4 * (+t(+f2) * +t(+d2) * c4);
        return +(+z(+ +r(+c4), + +r(+(1 - c4))) * 2 * 6371.007180918475);
      }
      function bc4(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, f2 = 0, g2 = 0;
        f2 = +e[b2 >> 3];
        d2 = +e[a2 >> 3];
        g2 = +u4(+((f2 - d2) * 0.5));
        c4 = +u4(+((+e[b2 + 8 >> 3] - +e[a2 + 8 >> 3]) * 0.5));
        c4 = g2 * g2 + c4 * (+t(+f2) * +t(+d2) * c4);
        return +(+z(+ +r(+c4), + +r(+(1 - c4))) * 2 * 6371.007180918475 * 1e3);
      }
      function cc2(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, f2 = 0, g2 = 0, h = 0;
        g2 = +e[b2 >> 3];
        d2 = +t(+g2);
        f2 = +e[b2 + 8 >> 3] - +e[a2 + 8 >> 3];
        h = d2 * +u4(+f2);
        c4 = +e[a2 >> 3];
        return + +z(+h, +(+u4(+g2) * +t(+c4) - +t(+f2) * (d2 * +u4(+c4))));
      }
      function dc(a2, c4, d2, f2) {
        a2 = a2 | 0;
        c4 = +c4;
        d2 = +d2;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0;
        if (d2 < 1e-16) {
          b[f2 >> 2] = b[a2 >> 2];
          b[f2 + 4 >> 2] = b[a2 + 4 >> 2];
          b[f2 + 8 >> 2] = b[a2 + 8 >> 2];
          b[f2 + 12 >> 2] = b[a2 + 12 >> 2];
          return;
        }
        h = c4 < 0 ? c4 + 6.283185307179586 : c4;
        h = !(c4 >= 6.283185307179586) ? h : h + -6.283185307179586;
        do {
          if (h < 1e-16) {
            c4 = +e[a2 >> 3] + d2;
            e[f2 >> 3] = c4;
            g2 = f2;
          } else {
            g2 = +q(+(h + -3.141592653589793)) < 1e-16;
            c4 = +e[a2 >> 3];
            if (g2) {
              c4 = c4 - d2;
              e[f2 >> 3] = c4;
              g2 = f2;
              break;
            }
            i = +t(+d2);
            d2 = +u4(+d2);
            c4 = i * +u4(+c4) + +t(+h) * (d2 * +t(+c4));
            c4 = c4 > 1 ? 1 : c4;
            c4 = +x(+(c4 < -1 ? -1 : c4));
            e[f2 >> 3] = c4;
            if (+q(+(c4 + -1.5707963267948966)) < 1e-16) {
              e[f2 >> 3] = 1.5707963267948966;
              e[f2 + 8 >> 3] = 0;
              return;
            }
            if (+q(+(c4 + 1.5707963267948966)) < 1e-16) {
              e[f2 >> 3] = -1.5707963267948966;
              e[f2 + 8 >> 3] = 0;
              return;
            }
            j = +t(+c4);
            h = d2 * +u4(+h) / j;
            d2 = +e[a2 >> 3];
            c4 = (i - +u4(+c4) * +u4(+d2)) / +t(+d2) / j;
            i = h > 1 ? 1 : h;
            c4 = c4 > 1 ? 1 : c4;
            c4 = +e[a2 + 8 >> 3] + +z(+(i < -1 ? -1 : i), +(c4 < -1 ? -1 : c4));
            if (c4 > 3.141592653589793) {
              do {
                c4 = c4 + -6.283185307179586;
              } while (c4 > 3.141592653589793);
            }
            if (c4 < -3.141592653589793) {
              do {
                c4 = c4 + 6.283185307179586;
              } while (c4 < -3.141592653589793);
            }
            e[f2 + 8 >> 3] = c4;
            return;
          }
        } while (0);
        if (+q(+(c4 + -1.5707963267948966)) < 1e-16) {
          e[g2 >> 3] = 1.5707963267948966;
          e[f2 + 8 >> 3] = 0;
          return;
        }
        if (+q(+(c4 + 1.5707963267948966)) < 1e-16) {
          e[g2 >> 3] = -1.5707963267948966;
          e[f2 + 8 >> 3] = 0;
          return;
        }
        c4 = +e[a2 + 8 >> 3];
        if (c4 > 3.141592653589793) {
          do {
            c4 = c4 + -6.283185307179586;
          } while (c4 > 3.141592653589793);
        }
        if (c4 < -3.141592653589793) {
          do {
            c4 = c4 + 6.283185307179586;
          } while (c4 < -3.141592653589793);
        }
        e[f2 + 8 >> 3] = c4;
        return;
      }
      function ec(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (a2 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e[b2 >> 3] = +e[20528 + (a2 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function fc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (a2 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e[b2 >> 3] = +e[20656 + (a2 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function gc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (a2 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e[b2 >> 3] = +e[20784 + (a2 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function hc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (a2 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e[b2 >> 3] = +e[20912 + (a2 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function ic(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0;
        if (a2 >>> 0 > 15) {
          c4 = 4;
          return c4 | 0;
        }
        d2 = Cc(7, 0, a2, ((a2 | 0) < 0) << 31 >> 31) | 0;
        d2 = rd(d2 | 0, H() | 0, 120, 0) | 0;
        a2 = H() | 0;
        b[c4 >> 2] = d2 | 2;
        b[c4 + 4 >> 2] = a2;
        c4 = 0;
        return c4 | 0;
      }
      function jc(a2, b2, c4) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        var d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
        n = +e[b2 >> 3];
        l = +e[a2 >> 3];
        j = +u4(+((n - l) * 0.5));
        g2 = +e[b2 + 8 >> 3];
        k = +e[a2 + 8 >> 3];
        h = +u4(+((g2 - k) * 0.5));
        i = +t(+l);
        m = +t(+n);
        h = j * j + h * (m * i * h);
        h = +z(+ +r(+h), + +r(+(1 - h))) * 2;
        j = +e[c4 >> 3];
        n = +u4(+((j - n) * 0.5));
        d2 = +e[c4 + 8 >> 3];
        g2 = +u4(+((d2 - g2) * 0.5));
        f2 = +t(+j);
        g2 = n * n + g2 * (m * f2 * g2);
        g2 = +z(+ +r(+g2), + +r(+(1 - g2))) * 2;
        j = +u4(+((l - j) * 0.5));
        d2 = +u4(+((k - d2) * 0.5));
        d2 = j * j + d2 * (i * f2 * d2);
        d2 = +z(+ +r(+d2), + +r(+(1 - d2))) * 2;
        f2 = (h + g2 + d2) * 0.5;
        return +(+y(+ +r(+(+v2(+(f2 * 0.5)) * +v2(+((f2 - h) * 0.5)) * +v2(+((f2 - g2) * 0.5)) * +v2(+((f2 - d2) * 0.5))))) * 4);
      }
      function kc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
        j = T;
        T = T + 192 | 0;
        h = j + 168 | 0;
        i = j;
        g2 = Pb(a2, c4, h) | 0;
        if (g2 | 0) {
          d2 = g2;
          T = j;
          return d2 | 0;
        }
        if (Qb(a2, c4, i) | 0) {
          I(23313, 22742, 386, 22751);
        }
        c4 = b[i >> 2] | 0;
        if ((c4 | 0) > 0) {
          f2 = +jc(i + 8 | 0, i + 8 + (((c4 | 0) != 1 & 1) << 4) | 0, h) + 0;
          if ((c4 | 0) != 1) {
            a2 = 1;
            do {
              g2 = a2;
              a2 = a2 + 1 | 0;
              f2 = f2 + +jc(i + 8 + (g2 << 4) | 0, i + 8 + (((a2 | 0) % (c4 | 0) | 0) << 4) | 0, h);
            } while ((a2 | 0) < (c4 | 0));
          }
        } else {
          f2 = 0;
        }
        e[d2 >> 3] = f2;
        d2 = 0;
        T = j;
        return d2 | 0;
      }
      function lc(a2, b2, c4) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        a2 = kc(a2, b2, c4) | 0;
        if (a2 | 0) {
          return a2 | 0;
        }
        e[c4 >> 3] = +e[c4 >> 3] * 6371.007180918475 * 6371.007180918475;
        return a2 | 0;
      }
      function mc(a2, b2, c4) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        a2 = kc(a2, b2, c4) | 0;
        if (a2 | 0) {
          return a2 | 0;
        }
        e[c4 >> 3] = +e[c4 >> 3] * 6371.007180918475 * 6371.007180918475 * 1e3 * 1e3;
        return a2 | 0;
      }
      function nc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
        j = T;
        T = T + 176 | 0;
        i = j;
        a2 = gb(a2, c4, i) | 0;
        if (a2 | 0) {
          i = a2;
          T = j;
          return i | 0;
        }
        e[d2 >> 3] = 0;
        a2 = b[i >> 2] | 0;
        if ((a2 | 0) <= 1) {
          i = 0;
          T = j;
          return i | 0;
        }
        c4 = a2 + -1 | 0;
        a2 = 0;
        f2 = +e[i + 8 >> 3];
        g2 = +e[i + 16 >> 3];
        h = 0;
        do {
          a2 = a2 + 1 | 0;
          l = f2;
          f2 = +e[i + 8 + (a2 << 4) >> 3];
          m = +u4(+((f2 - l) * 0.5));
          k = g2;
          g2 = +e[i + 8 + (a2 << 4) + 8 >> 3];
          k = +u4(+((g2 - k) * 0.5));
          k = m * m + k * (+t(+f2) * +t(+l) * k);
          h = h + +z(+ +r(+k), + +r(+(1 - k))) * 2;
        } while ((a2 | 0) < (c4 | 0));
        e[d2 >> 3] = h;
        i = 0;
        T = j;
        return i | 0;
      }
      function oc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
        j = T;
        T = T + 176 | 0;
        i = j;
        a2 = gb(a2, c4, i) | 0;
        if (a2 | 0) {
          i = a2;
          h = +e[d2 >> 3];
          h = h * 6371.007180918475;
          e[d2 >> 3] = h;
          T = j;
          return i | 0;
        }
        e[d2 >> 3] = 0;
        a2 = b[i >> 2] | 0;
        if ((a2 | 0) <= 1) {
          i = 0;
          h = 0;
          h = h * 6371.007180918475;
          e[d2 >> 3] = h;
          T = j;
          return i | 0;
        }
        c4 = a2 + -1 | 0;
        a2 = 0;
        f2 = +e[i + 8 >> 3];
        g2 = +e[i + 16 >> 3];
        h = 0;
        do {
          a2 = a2 + 1 | 0;
          l = f2;
          f2 = +e[i + 8 + (a2 << 4) >> 3];
          m = +u4(+((f2 - l) * 0.5));
          k = g2;
          g2 = +e[i + 8 + (a2 << 4) + 8 >> 3];
          k = +u4(+((g2 - k) * 0.5));
          k = m * m + k * (+t(+l) * +t(+f2) * k);
          h = h + +z(+ +r(+k), + +r(+(1 - k))) * 2;
        } while ((a2 | 0) != (c4 | 0));
        e[d2 >> 3] = h;
        i = 0;
        m = h;
        m = m * 6371.007180918475;
        e[d2 >> 3] = m;
        T = j;
        return i | 0;
      }
      function pc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
        j = T;
        T = T + 176 | 0;
        i = j;
        a2 = gb(a2, c4, i) | 0;
        if (a2 | 0) {
          i = a2;
          h = +e[d2 >> 3];
          h = h * 6371.007180918475;
          h = h * 1e3;
          e[d2 >> 3] = h;
          T = j;
          return i | 0;
        }
        e[d2 >> 3] = 0;
        a2 = b[i >> 2] | 0;
        if ((a2 | 0) <= 1) {
          i = 0;
          h = 0;
          h = h * 6371.007180918475;
          h = h * 1e3;
          e[d2 >> 3] = h;
          T = j;
          return i | 0;
        }
        c4 = a2 + -1 | 0;
        a2 = 0;
        f2 = +e[i + 8 >> 3];
        g2 = +e[i + 16 >> 3];
        h = 0;
        do {
          a2 = a2 + 1 | 0;
          l = f2;
          f2 = +e[i + 8 + (a2 << 4) >> 3];
          m = +u4(+((f2 - l) * 0.5));
          k = g2;
          g2 = +e[i + 8 + (a2 << 4) + 8 >> 3];
          k = +u4(+((g2 - k) * 0.5));
          k = m * m + k * (+t(+l) * +t(+f2) * k);
          h = h + +z(+ +r(+k), + +r(+(1 - k))) * 2;
        } while ((a2 | 0) != (c4 | 0));
        e[d2 >> 3] = h;
        i = 0;
        m = h;
        m = m * 6371.007180918475;
        m = m * 1e3;
        e[d2 >> 3] = m;
        T = j;
        return i | 0;
      }
      function qc(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0;
        c4 = kd(1, 12) | 0;
        if (!c4) {
          I(22832, 22787, 49, 22845);
        }
        d2 = a2 + 4 | 0;
        e3 = b[d2 >> 2] | 0;
        if (e3 | 0) {
          e3 = e3 + 8 | 0;
          b[e3 >> 2] = c4;
          b[d2 >> 2] = c4;
          return c4 | 0;
        }
        if (b[a2 >> 2] | 0) {
          I(22862, 22787, 61, 22885);
        }
        e3 = a2;
        b[e3 >> 2] = c4;
        b[d2 >> 2] = c4;
        return c4 | 0;
      }
      function rc(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0;
        e3 = id(24) | 0;
        if (!e3) {
          I(22899, 22787, 78, 22913);
        }
        b[e3 >> 2] = b[c4 >> 2];
        b[e3 + 4 >> 2] = b[c4 + 4 >> 2];
        b[e3 + 8 >> 2] = b[c4 + 8 >> 2];
        b[e3 + 12 >> 2] = b[c4 + 12 >> 2];
        b[e3 + 16 >> 2] = 0;
        c4 = a2 + 4 | 0;
        d2 = b[c4 >> 2] | 0;
        if (d2 | 0) {
          b[d2 + 16 >> 2] = e3;
          b[c4 >> 2] = e3;
          return e3 | 0;
        }
        if (b[a2 >> 2] | 0) {
          I(22928, 22787, 82, 22913);
        }
        b[a2 >> 2] = e3;
        b[c4 >> 2] = e3;
        return e3 | 0;
      }
      function sc(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0;
        if (!a2) {
          return;
        }
        e3 = 1;
        while (1) {
          c4 = b[a2 >> 2] | 0;
          if (c4 | 0) {
            do {
              d2 = b[c4 >> 2] | 0;
              if (d2 | 0) {
                do {
                  f2 = d2;
                  d2 = b[d2 + 16 >> 2] | 0;
                  jd(f2);
                } while ((d2 | 0) != 0);
              }
              f2 = c4;
              c4 = b[c4 + 8 >> 2] | 0;
              jd(f2);
            } while ((c4 | 0) != 0);
          }
          c4 = a2;
          a2 = b[a2 + 8 >> 2] | 0;
          if (!e3) {
            jd(c4);
          }
          if (!a2) {
            break;
          } else {
            e3 = 0;
          }
        }
        return;
      }
      function tc(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A6 = 0, B4 = 0, C4 = 0, D4 = 0, E3 = 0, F = 0, G2 = 0, H2 = 0, J2 = 0, K3 = 0;
        g2 = a2 + 8 | 0;
        if (b[g2 >> 2] | 0) {
          K3 = 1;
          return K3 | 0;
        }
        f2 = b[a2 >> 2] | 0;
        if (!f2) {
          K3 = 0;
          return K3 | 0;
        }
        c4 = f2;
        d2 = 0;
        do {
          d2 = d2 + 1 | 0;
          c4 = b[c4 + 8 >> 2] | 0;
        } while ((c4 | 0) != 0);
        if (d2 >>> 0 < 2) {
          K3 = 0;
          return K3 | 0;
        }
        H2 = id(d2 << 2) | 0;
        if (!H2) {
          I(22948, 22787, 317, 22967);
        }
        G2 = id(d2 << 5) | 0;
        if (!G2) {
          I(22989, 22787, 321, 22967);
        }
        b[a2 >> 2] = 0;
        z2 = a2 + 4 | 0;
        b[z2 >> 2] = 0;
        b[g2 >> 2] = 0;
        d2 = 0;
        F = 0;
        y2 = 0;
        n = 0;
        a: while (1) {
          m = b[f2 >> 2] | 0;
          if (m) {
            h = 0;
            i = m;
            do {
              k = +e[i + 8 >> 3];
              c4 = i;
              i = b[i + 16 >> 2] | 0;
              l = (i | 0) == 0;
              g2 = l ? m : i;
              j = +e[g2 + 8 >> 3];
              if (+q(+(k - j)) > 3.141592653589793) {
                K3 = 14;
                break;
              }
              h = h + (j - k) * (+e[c4 >> 3] + +e[g2 >> 3]);
            } while (!l);
            if ((K3 | 0) == 14) {
              K3 = 0;
              h = 0;
              c4 = m;
              do {
                x2 = +e[c4 + 8 >> 3];
                E3 = c4 + 16 | 0;
                D4 = b[E3 >> 2] | 0;
                D4 = (D4 | 0) == 0 ? m : D4;
                w2 = +e[D4 + 8 >> 3];
                h = h + (+e[c4 >> 3] + +e[D4 >> 3]) * ((w2 < 0 ? w2 + 6.283185307179586 : w2) - (x2 < 0 ? x2 + 6.283185307179586 : x2));
                c4 = b[((c4 | 0) == 0 ? f2 : E3) >> 2] | 0;
              } while ((c4 | 0) != 0);
            }
            if (h > 0) {
              b[H2 + (F << 2) >> 2] = f2;
              F = F + 1 | 0;
              g2 = y2;
              c4 = n;
            } else {
              K3 = 19;
            }
          } else {
            K3 = 19;
          }
          if ((K3 | 0) == 19) {
            K3 = 0;
            do {
              if (!d2) {
                if (!n) {
                  if (!(b[a2 >> 2] | 0)) {
                    g2 = z2;
                    i = a2;
                    c4 = f2;
                    d2 = a2;
                    break;
                  } else {
                    K3 = 27;
                    break a;
                  }
                } else {
                  g2 = z2;
                  i = n + 8 | 0;
                  c4 = f2;
                  d2 = a2;
                  break;
                }
              } else {
                c4 = d2 + 8 | 0;
                if (b[c4 >> 2] | 0) {
                  K3 = 21;
                  break a;
                }
                d2 = kd(1, 12) | 0;
                if (!d2) {
                  K3 = 23;
                  break a;
                }
                b[c4 >> 2] = d2;
                g2 = d2 + 4 | 0;
                i = d2;
                c4 = n;
              }
            } while (0);
            b[i >> 2] = f2;
            b[g2 >> 2] = f2;
            i = G2 + (y2 << 5) | 0;
            l = b[f2 >> 2] | 0;
            if (l) {
              m = G2 + (y2 << 5) + 8 | 0;
              e[m >> 3] = 17976931348623157e292;
              n = G2 + (y2 << 5) + 24 | 0;
              e[n >> 3] = 17976931348623157e292;
              e[i >> 3] = -17976931348623157e292;
              o = G2 + (y2 << 5) + 16 | 0;
              e[o >> 3] = -17976931348623157e292;
              u5 = 17976931348623157e292;
              v3 = -17976931348623157e292;
              g2 = 0;
              p2 = l;
              k = 17976931348623157e292;
              s2 = 17976931348623157e292;
              t4 = -17976931348623157e292;
              j = -17976931348623157e292;
              while (1) {
                h = +e[p2 >> 3];
                x2 = +e[p2 + 8 >> 3];
                p2 = b[p2 + 16 >> 2] | 0;
                r2 = (p2 | 0) == 0;
                w2 = +e[(r2 ? l : p2) + 8 >> 3];
                if (h < k) {
                  e[m >> 3] = h;
                  k = h;
                }
                if (x2 < s2) {
                  e[n >> 3] = x2;
                  s2 = x2;
                }
                if (h > t4) {
                  e[i >> 3] = h;
                } else {
                  h = t4;
                }
                if (x2 > j) {
                  e[o >> 3] = x2;
                  j = x2;
                }
                u5 = x2 > 0 & x2 < u5 ? x2 : u5;
                v3 = x2 < 0 & x2 > v3 ? x2 : v3;
                g2 = g2 | +q(+(x2 - w2)) > 3.141592653589793;
                if (r2) {
                  break;
                } else {
                  t4 = h;
                }
              }
              if (g2) {
                e[o >> 3] = v3;
                e[n >> 3] = u5;
              }
            } else {
              b[i >> 2] = 0;
              b[i + 4 >> 2] = 0;
              b[i + 8 >> 2] = 0;
              b[i + 12 >> 2] = 0;
              b[i + 16 >> 2] = 0;
              b[i + 20 >> 2] = 0;
              b[i + 24 >> 2] = 0;
              b[i + 28 >> 2] = 0;
            }
            g2 = y2 + 1 | 0;
          }
          E3 = f2 + 8 | 0;
          f2 = b[E3 >> 2] | 0;
          b[E3 >> 2] = 0;
          if (!f2) {
            K3 = 45;
            break;
          } else {
            y2 = g2;
            n = c4;
          }
        }
        if ((K3 | 0) == 21) {
          I(22765, 22787, 35, 22799);
        } else if ((K3 | 0) == 23) {
          I(22819, 22787, 37, 22799);
        } else if ((K3 | 0) == 27) {
          I(22862, 22787, 61, 22885);
        } else if ((K3 | 0) == 45) {
          b: do {
            if ((F | 0) > 0) {
              E3 = (g2 | 0) == 0;
              C4 = g2 << 2;
              D4 = (a2 | 0) == 0;
              B4 = 0;
              c4 = 0;
              while (1) {
                A6 = b[H2 + (B4 << 2) >> 2] | 0;
                if (!E3) {
                  y2 = id(C4) | 0;
                  if (!y2) {
                    K3 = 50;
                    break;
                  }
                  z2 = id(C4) | 0;
                  if (!z2) {
                    K3 = 52;
                    break;
                  }
                  c: do {
                    if (!D4) {
                      g2 = 0;
                      d2 = 0;
                      i = a2;
                      while (1) {
                        f2 = G2 + (g2 << 5) | 0;
                        if (uc(b[i >> 2] | 0, f2, b[A6 >> 2] | 0) | 0) {
                          b[y2 + (d2 << 2) >> 2] = i;
                          b[z2 + (d2 << 2) >> 2] = f2;
                          r2 = d2 + 1 | 0;
                        } else {
                          r2 = d2;
                        }
                        i = b[i + 8 >> 2] | 0;
                        if (!i) {
                          break;
                        } else {
                          g2 = g2 + 1 | 0;
                          d2 = r2;
                        }
                      }
                      if ((r2 | 0) > 0) {
                        f2 = b[y2 >> 2] | 0;
                        if ((r2 | 0) == 1) {
                          d2 = f2;
                        } else {
                          o = 0;
                          p2 = -1;
                          d2 = f2;
                          n = f2;
                          while (1) {
                            l = b[n >> 2] | 0;
                            f2 = 0;
                            i = 0;
                            while (1) {
                              g2 = b[b[y2 + (i << 2) >> 2] >> 2] | 0;
                              if ((g2 | 0) == (l | 0)) {
                                m = f2;
                              } else {
                                m = f2 + ((uc(g2, b[z2 + (i << 2) >> 2] | 0, b[l >> 2] | 0) | 0) & 1) | 0;
                              }
                              i = i + 1 | 0;
                              if ((i | 0) == (r2 | 0)) {
                                break;
                              } else {
                                f2 = m;
                              }
                            }
                            g2 = (m | 0) > (p2 | 0);
                            d2 = g2 ? n : d2;
                            f2 = o + 1 | 0;
                            if ((f2 | 0) == (r2 | 0)) {
                              break c;
                            }
                            o = f2;
                            p2 = g2 ? m : p2;
                            n = b[y2 + (f2 << 2) >> 2] | 0;
                          }
                        }
                      } else {
                        d2 = 0;
                      }
                    } else {
                      d2 = 0;
                    }
                  } while (0);
                  jd(y2);
                  jd(z2);
                  if (d2) {
                    g2 = d2 + 4 | 0;
                    f2 = b[g2 >> 2] | 0;
                    if (!f2) {
                      if (b[d2 >> 2] | 0) {
                        K3 = 70;
                        break;
                      }
                    } else {
                      d2 = f2 + 8 | 0;
                    }
                    b[d2 >> 2] = A6;
                    b[g2 >> 2] = A6;
                  } else {
                    K3 = 73;
                  }
                } else {
                  K3 = 73;
                }
                if ((K3 | 0) == 73) {
                  K3 = 0;
                  c4 = b[A6 >> 2] | 0;
                  if (c4 | 0) {
                    do {
                      z2 = c4;
                      c4 = b[c4 + 16 >> 2] | 0;
                      jd(z2);
                    } while ((c4 | 0) != 0);
                  }
                  jd(A6);
                  c4 = 1;
                }
                B4 = B4 + 1 | 0;
                if ((B4 | 0) >= (F | 0)) {
                  J2 = c4;
                  break b;
                }
              }
              if ((K3 | 0) == 50) {
                I(23004, 22787, 249, 23023);
              } else if ((K3 | 0) == 52) {
                I(23042, 22787, 252, 23023);
              } else if ((K3 | 0) == 70) {
                I(22862, 22787, 61, 22885);
              }
            } else {
              J2 = 0;
            }
          } while (0);
          jd(H2);
          jd(G2);
          K3 = J2;
          return K3 | 0;
        }
        return 0;
      }
      function uc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
        if (!(ya(c4, d2) | 0)) {
          a2 = 0;
          return a2 | 0;
        }
        c4 = xa(c4) | 0;
        f2 = +e[d2 >> 3];
        g2 = +e[d2 + 8 >> 3];
        g2 = c4 & g2 < 0 ? g2 + 6.283185307179586 : g2;
        a2 = b[a2 >> 2] | 0;
        if (!a2) {
          a2 = 0;
          return a2 | 0;
        }
        if (c4) {
          c4 = 0;
          l = g2;
          d2 = a2;
          a: while (1) {
            while (1) {
              i = +e[d2 >> 3];
              g2 = +e[d2 + 8 >> 3];
              d2 = d2 + 16 | 0;
              m = b[d2 >> 2] | 0;
              m = (m | 0) == 0 ? a2 : m;
              h = +e[m >> 3];
              j = +e[m + 8 >> 3];
              if (i > h) {
                k = i;
                i = j;
              } else {
                k = h;
                h = i;
                i = g2;
                g2 = j;
              }
              f2 = f2 == h | f2 == k ? f2 + 2220446049250313e-31 : f2;
              if (!(f2 < h | f2 > k)) {
                break;
              }
              d2 = b[d2 >> 2] | 0;
              if (!d2) {
                d2 = 22;
                break a;
              }
            }
            j = i < 0 ? i + 6.283185307179586 : i;
            i = g2 < 0 ? g2 + 6.283185307179586 : g2;
            l = j == l | i == l ? l + -2220446049250313e-31 : l;
            k = j + (i - j) * ((f2 - h) / (k - h));
            if ((k < 0 ? k + 6.283185307179586 : k) > l) {
              c4 = c4 ^ 1;
            }
            d2 = b[d2 >> 2] | 0;
            if (!d2) {
              d2 = 22;
              break;
            }
          }
          if ((d2 | 0) == 22) {
            return c4 | 0;
          }
        } else {
          c4 = 0;
          l = g2;
          d2 = a2;
          b: while (1) {
            while (1) {
              i = +e[d2 >> 3];
              g2 = +e[d2 + 8 >> 3];
              d2 = d2 + 16 | 0;
              m = b[d2 >> 2] | 0;
              m = (m | 0) == 0 ? a2 : m;
              h = +e[m >> 3];
              j = +e[m + 8 >> 3];
              if (i > h) {
                k = i;
                i = j;
              } else {
                k = h;
                h = i;
                i = g2;
                g2 = j;
              }
              f2 = f2 == h | f2 == k ? f2 + 2220446049250313e-31 : f2;
              if (!(f2 < h | f2 > k)) {
                break;
              }
              d2 = b[d2 >> 2] | 0;
              if (!d2) {
                d2 = 22;
                break b;
              }
            }
            l = i == l | g2 == l ? l + -2220446049250313e-31 : l;
            if (i + (g2 - i) * ((f2 - h) / (k - h)) > l) {
              c4 = c4 ^ 1;
            }
            d2 = b[d2 >> 2] | 0;
            if (!d2) {
              d2 = 22;
              break;
            }
          }
          if ((d2 | 0) == 22) {
            return c4 | 0;
          }
        }
        return 0;
      }
      function vc(c4, d2, e3, f2, g2) {
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        g2 = g2 | 0;
        var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0;
        u5 = T;
        T = T + 32 | 0;
        t4 = u5 + 16 | 0;
        s2 = u5;
        h = vd(c4 | 0, d2 | 0, 52) | 0;
        H() | 0;
        h = h & 15;
        p2 = vd(e3 | 0, f2 | 0, 52) | 0;
        H() | 0;
        if ((h | 0) != (p2 & 15 | 0)) {
          t4 = 12;
          T = u5;
          return t4 | 0;
        }
        l = vd(c4 | 0, d2 | 0, 45) | 0;
        H() | 0;
        l = l & 127;
        m = vd(e3 | 0, f2 | 0, 45) | 0;
        H() | 0;
        m = m & 127;
        if (l >>> 0 > 121 | m >>> 0 > 121) {
          t4 = 5;
          T = u5;
          return t4 | 0;
        }
        p2 = (l | 0) != (m | 0);
        if (p2) {
          j = ua(l, m) | 0;
          if ((j | 0) == 7) {
            t4 = 1;
            T = u5;
            return t4 | 0;
          }
          k = ua(m, l) | 0;
          if ((k | 0) == 7) {
            I(23066, 23090, 161, 23100);
          } else {
            q2 = j;
            i = k;
          }
        } else {
          q2 = 0;
          i = 0;
        }
        n = ma(l) | 0;
        o = ma(m) | 0;
        b[t4 >> 2] = 0;
        b[t4 + 4 >> 2] = 0;
        b[t4 + 8 >> 2] = 0;
        b[t4 + 12 >> 2] = 0;
        do {
          if (!q2) {
            Nb(e3, f2, t4) | 0;
            if ((n | 0) != 0 & (o | 0) != 0) {
              if ((m | 0) != (l | 0)) {
                I(23173, 23090, 261, 23100);
              }
              i = Fb(c4, d2) | 0;
              h = Fb(e3, f2) | 0;
              if (!((i | 0) == 7 | (h | 0) == 7)) {
                if (!(a[21872 + (i * 7 | 0) + h >> 0] | 0)) {
                  i = b[21040 + (i * 28 | 0) + (h << 2) >> 2] | 0;
                  if ((i | 0) > 0) {
                    j = t4 + 4 | 0;
                    h = 0;
                    do {
                      Ra(j);
                      h = h + 1 | 0;
                    } while ((h | 0) != (i | 0));
                    r2 = 51;
                  } else {
                    r2 = 51;
                  }
                } else {
                  h = 1;
                }
              } else {
                h = 5;
              }
            } else {
              r2 = 51;
            }
          } else {
            m = b[4272 + (l * 28 | 0) + (q2 << 2) >> 2] | 0;
            j = (m | 0) > 0;
            if (!o) {
              if (j) {
                l = 0;
                k = e3;
                j = f2;
                do {
                  k = Jb(k, j) | 0;
                  j = H() | 0;
                  i = Ta(i) | 0;
                  l = l + 1 | 0;
                } while ((l | 0) != (m | 0));
                m = i;
                l = k;
                k = j;
              } else {
                m = i;
                l = e3;
                k = f2;
              }
            } else if (j) {
              l = 0;
              k = e3;
              j = f2;
              do {
                k = Ib(k, j) | 0;
                j = H() | 0;
                i = Ta(i) | 0;
                if ((i | 0) == 1) {
                  i = Ta(1) | 0;
                }
                l = l + 1 | 0;
              } while ((l | 0) != (m | 0));
              m = i;
              l = k;
              k = j;
            } else {
              m = i;
              l = e3;
              k = f2;
            }
            Nb(l, k, t4) | 0;
            if (!p2) {
              I(23115, 23090, 191, 23100);
            }
            j = (n | 0) != 0;
            i = (o | 0) != 0;
            if (j & i) {
              I(23142, 23090, 192, 23100);
            }
            if (!j) {
              if (i) {
                i = Fb(l, k) | 0;
                if ((i | 0) == 7) {
                  h = 5;
                  break;
                }
                if (a[21872 + (i * 7 | 0) + m >> 0] | 0) {
                  h = 1;
                  break;
                }
                l = 0;
                k = b[21040 + (m * 28 | 0) + (i << 2) >> 2] | 0;
              } else {
                l = 0;
                k = 0;
              }
            } else {
              i = Fb(c4, d2) | 0;
              if ((i | 0) == 7) {
                h = 5;
                break;
              }
              if (a[21872 + (i * 7 | 0) + q2 >> 0] | 0) {
                h = 1;
                break;
              }
              k = b[21040 + (i * 28 | 0) + (q2 << 2) >> 2] | 0;
              l = k;
            }
            if ((l | k | 0) < 0) {
              h = 5;
            } else {
              if ((k | 0) > 0) {
                j = t4 + 4 | 0;
                i = 0;
                do {
                  Ra(j);
                  i = i + 1 | 0;
                } while ((i | 0) != (k | 0));
              }
              b[s2 >> 2] = 0;
              b[s2 + 4 >> 2] = 0;
              b[s2 + 8 >> 2] = 0;
              Pa(s2, q2);
              if (h | 0) {
                while (1) {
                  if (!(Lb(h) | 0)) {
                    Oa(s2);
                  } else {
                    Na(s2);
                  }
                  if ((h | 0) > 1) {
                    h = h + -1 | 0;
                  } else {
                    break;
                  }
                }
              }
              if ((l | 0) > 0) {
                h = 0;
                do {
                  Ra(s2);
                  h = h + 1 | 0;
                } while ((h | 0) != (l | 0));
              }
              r2 = t4 + 4 | 0;
              Fa(r2, s2, r2);
              Da(r2);
              r2 = 51;
            }
          }
        } while (0);
        if ((r2 | 0) == 51) {
          h = t4 + 4 | 0;
          b[g2 >> 2] = b[h >> 2];
          b[g2 + 4 >> 2] = b[h + 4 >> 2];
          b[g2 + 8 >> 2] = b[h + 8 >> 2];
          h = 0;
        }
        t4 = h;
        T = u5;
        return t4 | 0;
      }
      function wc(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0;
        q2 = T;
        T = T + 48 | 0;
        k = q2 + 36 | 0;
        h = q2 + 24 | 0;
        i = q2 + 12 | 0;
        j = q2;
        f2 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        f2 = f2 & 15;
        n = vd(a2 | 0, c4 | 0, 45) | 0;
        H() | 0;
        n = n & 127;
        if (n >>> 0 > 121) {
          e3 = 5;
          T = q2;
          return e3 | 0;
        }
        l = ma(n) | 0;
        wd(f2 | 0, 0, 52) | 0;
        r2 = H() | 0 | 134225919;
        g2 = e3;
        b[g2 >> 2] = -1;
        b[g2 + 4 >> 2] = r2;
        if (!f2) {
          f2 = Ia(d2) | 0;
          if ((f2 | 0) == 7) {
            r2 = 1;
            T = q2;
            return r2 | 0;
          }
          f2 = ta(n, f2) | 0;
          if ((f2 | 0) == 127) {
            r2 = 1;
            T = q2;
            return r2 | 0;
          }
          o = wd(f2 | 0, 0, 45) | 0;
          p2 = H() | 0;
          n = e3;
          p2 = b[n + 4 >> 2] & -1040385 | p2;
          r2 = e3;
          b[r2 >> 2] = b[n >> 2] | o;
          b[r2 + 4 >> 2] = p2;
          r2 = 0;
          T = q2;
          return r2 | 0;
        }
        b[k >> 2] = b[d2 >> 2];
        b[k + 4 >> 2] = b[d2 + 4 >> 2];
        b[k + 8 >> 2] = b[d2 + 8 >> 2];
        d2 = f2;
        while (1) {
          g2 = d2;
          d2 = d2 + -1 | 0;
          b[h >> 2] = b[k >> 2];
          b[h + 4 >> 2] = b[k + 4 >> 2];
          b[h + 8 >> 2] = b[k + 8 >> 2];
          if (!(Lb(g2) | 0)) {
            f2 = Ka(k) | 0;
            if (f2 | 0) {
              d2 = 13;
              break;
            }
            b[i >> 2] = b[k >> 2];
            b[i + 4 >> 2] = b[k + 4 >> 2];
            b[i + 8 >> 2] = b[k + 8 >> 2];
            Oa(i);
          } else {
            f2 = Ja(k) | 0;
            if (f2 | 0) {
              d2 = 13;
              break;
            }
            b[i >> 2] = b[k >> 2];
            b[i + 4 >> 2] = b[k + 4 >> 2];
            b[i + 8 >> 2] = b[k + 8 >> 2];
            Na(i);
          }
          Ga(h, i, j);
          Da(j);
          f2 = e3;
          t4 = b[f2 >> 2] | 0;
          f2 = b[f2 + 4 >> 2] | 0;
          u5 = (15 - g2 | 0) * 3 | 0;
          s2 = wd(7, 0, u5 | 0) | 0;
          f2 = f2 & ~(H() | 0);
          u5 = wd(Ia(j) | 0, 0, u5 | 0) | 0;
          f2 = H() | 0 | f2;
          r2 = e3;
          b[r2 >> 2] = u5 | t4 & ~s2;
          b[r2 + 4 >> 2] = f2;
          if ((g2 | 0) <= 1) {
            d2 = 14;
            break;
          }
        }
        a: do {
          if ((d2 | 0) != 13) {
            if ((d2 | 0) == 14) {
              if (((b[k >> 2] | 0) <= 1 ? (b[k + 4 >> 2] | 0) <= 1 : 0) ? (b[k + 8 >> 2] | 0) <= 1 : 0) {
                d2 = Ia(k) | 0;
                f2 = ta(n, d2) | 0;
                if ((f2 | 0) == 127) {
                  j = 0;
                } else {
                  j = ma(f2) | 0;
                }
                b: do {
                  if (!d2) {
                    if ((l | 0) != 0 & (j | 0) != 0) {
                      d2 = Fb(a2, c4) | 0;
                      g2 = e3;
                      g2 = Fb(b[g2 >> 2] | 0, b[g2 + 4 >> 2] | 0) | 0;
                      if ((d2 | 0) == 7 | (g2 | 0) == 7) {
                        f2 = 5;
                        break a;
                      }
                      g2 = b[21248 + (d2 * 28 | 0) + (g2 << 2) >> 2] | 0;
                      if ((g2 | 0) < 0) {
                        f2 = 5;
                        break a;
                      }
                      if (!g2) {
                        d2 = 59;
                      } else {
                        i = e3;
                        d2 = 0;
                        h = b[i >> 2] | 0;
                        i = b[i + 4 >> 2] | 0;
                        do {
                          h = Hb(h, i) | 0;
                          i = H() | 0;
                          u5 = e3;
                          b[u5 >> 2] = h;
                          b[u5 + 4 >> 2] = i;
                          d2 = d2 + 1 | 0;
                        } while ((d2 | 0) < (g2 | 0));
                        d2 = 58;
                      }
                    } else {
                      d2 = 58;
                    }
                  } else {
                    if (l) {
                      f2 = Fb(a2, c4) | 0;
                      if ((f2 | 0) == 7) {
                        f2 = 5;
                        break a;
                      }
                      g2 = b[21248 + (f2 * 28 | 0) + (d2 << 2) >> 2] | 0;
                      if ((g2 | 0) > 0) {
                        f2 = d2;
                        d2 = 0;
                        do {
                          f2 = Sa(f2) | 0;
                          d2 = d2 + 1 | 0;
                        } while ((d2 | 0) != (g2 | 0));
                      } else {
                        f2 = d2;
                      }
                      if ((f2 | 0) == 1) {
                        f2 = 9;
                        break a;
                      }
                      d2 = ta(n, f2) | 0;
                      if ((d2 | 0) == 127) {
                        I(23200, 23090, 411, 23230);
                      }
                      if (!(ma(d2) | 0)) {
                        p2 = d2;
                        o = g2;
                        m = f2;
                      } else {
                        I(23245, 23090, 412, 23230);
                      }
                    } else {
                      p2 = f2;
                      o = 0;
                      m = d2;
                    }
                    i = b[4272 + (n * 28 | 0) + (m << 2) >> 2] | 0;
                    if ((i | 0) <= -1) {
                      I(23276, 23090, 419, 23230);
                    }
                    if (!j) {
                      if ((o | 0) < 0) {
                        f2 = 5;
                        break a;
                      }
                      if (o | 0) {
                        g2 = e3;
                        f2 = 0;
                        d2 = b[g2 >> 2] | 0;
                        g2 = b[g2 + 4 >> 2] | 0;
                        do {
                          d2 = Hb(d2, g2) | 0;
                          g2 = H() | 0;
                          u5 = e3;
                          b[u5 >> 2] = d2;
                          b[u5 + 4 >> 2] = g2;
                          f2 = f2 + 1 | 0;
                        } while ((f2 | 0) < (o | 0));
                      }
                      if ((i | 0) <= 0) {
                        f2 = p2;
                        d2 = 58;
                        break;
                      }
                      g2 = e3;
                      f2 = 0;
                      d2 = b[g2 >> 2] | 0;
                      g2 = b[g2 + 4 >> 2] | 0;
                      while (1) {
                        d2 = Hb(d2, g2) | 0;
                        g2 = H() | 0;
                        u5 = e3;
                        b[u5 >> 2] = d2;
                        b[u5 + 4 >> 2] = g2;
                        f2 = f2 + 1 | 0;
                        if ((f2 | 0) == (i | 0)) {
                          f2 = p2;
                          d2 = 58;
                          break b;
                        }
                      }
                    }
                    h = ua(p2, n) | 0;
                    if ((h | 0) == 7) {
                      I(23066, 23090, 428, 23230);
                    }
                    f2 = e3;
                    d2 = b[f2 >> 2] | 0;
                    f2 = b[f2 + 4 >> 2] | 0;
                    if ((i | 0) > 0) {
                      g2 = 0;
                      do {
                        d2 = Hb(d2, f2) | 0;
                        f2 = H() | 0;
                        u5 = e3;
                        b[u5 >> 2] = d2;
                        b[u5 + 4 >> 2] = f2;
                        g2 = g2 + 1 | 0;
                      } while ((g2 | 0) != (i | 0));
                    }
                    f2 = Fb(d2, f2) | 0;
                    if ((f2 | 0) == 7) {
                      I(23313, 23090, 440, 23230);
                    }
                    d2 = na(p2) | 0;
                    d2 = b[(d2 ? 21664 : 21456) + (h * 28 | 0) + (f2 << 2) >> 2] | 0;
                    if ((d2 | 0) < 0) {
                      I(23313, 23090, 454, 23230);
                    }
                    if (!d2) {
                      f2 = p2;
                      d2 = 58;
                    } else {
                      h = e3;
                      f2 = 0;
                      g2 = b[h >> 2] | 0;
                      h = b[h + 4 >> 2] | 0;
                      do {
                        g2 = Gb(g2, h) | 0;
                        h = H() | 0;
                        u5 = e3;
                        b[u5 >> 2] = g2;
                        b[u5 + 4 >> 2] = h;
                        f2 = f2 + 1 | 0;
                      } while ((f2 | 0) < (d2 | 0));
                      f2 = p2;
                      d2 = 58;
                    }
                  }
                } while (0);
                if ((d2 | 0) == 58) {
                  if (j) {
                    d2 = 59;
                  }
                }
                if ((d2 | 0) == 59) {
                  u5 = e3;
                  if ((Fb(b[u5 >> 2] | 0, b[u5 + 4 >> 2] | 0) | 0) == 1) {
                    f2 = 9;
                    break;
                  }
                }
                u5 = e3;
                s2 = b[u5 >> 2] | 0;
                u5 = b[u5 + 4 >> 2] & -1040385;
                t4 = wd(f2 | 0, 0, 45) | 0;
                u5 = u5 | (H() | 0);
                f2 = e3;
                b[f2 >> 2] = s2 | t4;
                b[f2 + 4 >> 2] = u5;
                f2 = 0;
              } else {
                f2 = 1;
              }
            }
          }
        } while (0);
        u5 = f2;
        T = q2;
        return u5 | 0;
      }
      function xc(a2, b2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0;
        h = T;
        T = T + 16 | 0;
        g2 = h;
        if (!e3) {
          a2 = vc(a2, b2, c4, d2, g2) | 0;
          if (!a2) {
            Xa(g2, f2);
            a2 = 0;
          }
        } else {
          a2 = 15;
        }
        T = h;
        return a2 | 0;
      }
      function yc(a2, b2, c4, d2, e3) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0;
        g2 = T;
        T = T + 16 | 0;
        f2 = g2;
        if (!d2) {
          c4 = Ya(c4, f2) | 0;
          if (!c4) {
            c4 = wc(a2, b2, f2, e3) | 0;
          }
        } else {
          c4 = 15;
        }
        T = g2;
        return c4 | 0;
      }
      function zc(a2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0;
        j = T;
        T = T + 32 | 0;
        h = j + 12 | 0;
        i = j;
        g2 = vc(a2, c4, a2, c4, h) | 0;
        if (g2 | 0) {
          i = g2;
          T = j;
          return i | 0;
        }
        a2 = vc(a2, c4, d2, e3, i) | 0;
        if (a2 | 0) {
          i = a2;
          T = j;
          return i | 0;
        }
        h = Wa(h, i) | 0;
        i = f2;
        b[i >> 2] = h;
        b[i + 4 >> 2] = ((h | 0) < 0) << 31 >> 31;
        i = 0;
        T = j;
        return i | 0;
      }
      function Ac(a2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0;
        j = T;
        T = T + 32 | 0;
        h = j + 12 | 0;
        i = j;
        g2 = vc(a2, c4, a2, c4, h) | 0;
        if (!g2) {
          g2 = vc(a2, c4, d2, e3, i) | 0;
          if (!g2) {
            e3 = Wa(h, i) | 0;
            e3 = ld(e3 | 0, ((e3 | 0) < 0) << 31 >> 31 | 0, 1, 0) | 0;
            h = H() | 0;
            i = f2;
            b[i >> 2] = e3;
            b[i + 4 >> 2] = h;
            i = 0;
            T = j;
            return i | 0;
          }
        }
        i = g2;
        T = j;
        return i | 0;
      }
      function Bc(a2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A6 = 0;
        z2 = T;
        T = T + 48 | 0;
        h = z2 + 24 | 0;
        i = z2 + 12 | 0;
        y2 = z2;
        g2 = vc(a2, c4, a2, c4, h) | 0;
        if (!g2) {
          g2 = vc(a2, c4, d2, e3, i) | 0;
          if (!g2) {
            w2 = Wa(h, i) | 0;
            x2 = ((w2 | 0) < 0) << 31 >> 31;
            b[h >> 2] = 0;
            b[h + 4 >> 2] = 0;
            b[h + 8 >> 2] = 0;
            b[i >> 2] = 0;
            b[i + 4 >> 2] = 0;
            b[i + 8 >> 2] = 0;
            if (vc(a2, c4, a2, c4, h) | 0) {
              I(23313, 23090, 691, 23299);
            }
            if (vc(a2, c4, d2, e3, i) | 0) {
              I(23313, 23090, 696, 23299);
            }
            Za(h);
            Za(i);
            if (!w2) {
              g2 = h + 4 | 0;
              d2 = h + 8 | 0;
              t4 = g2;
              u5 = d2;
              v3 = h;
              e3 = b[h >> 2] | 0;
              g2 = b[g2 >> 2] | 0;
              d2 = b[d2 >> 2] | 0;
              r2 = 0;
              s2 = 0;
              p2 = 0;
            } else {
              m = b[h >> 2] | 0;
              p2 = +(w2 | 0);
              t4 = h + 4 | 0;
              n = b[t4 >> 2] | 0;
              u5 = h + 8 | 0;
              o = b[u5 >> 2] | 0;
              v3 = h;
              e3 = m;
              g2 = n;
              d2 = o;
              r2 = +((b[i >> 2] | 0) - m | 0) / p2;
              s2 = +((b[i + 4 >> 2] | 0) - n | 0) / p2;
              p2 = +((b[i + 8 >> 2] | 0) - o | 0) / p2;
            }
            b[y2 >> 2] = e3;
            o = y2 + 4 | 0;
            b[o >> 2] = g2;
            n = y2 + 8 | 0;
            b[n >> 2] = d2;
            a: do {
              if ((w2 | 0) < 0) {
                g2 = 0;
              } else {
                l = 0;
                m = 0;
                g2 = e3;
                while (1) {
                  k = +(m >>> 0) + 4294967296 * +(l | 0);
                  A6 = r2 * k + +(g2 | 0);
                  j = s2 * k + +(b[t4 >> 2] | 0);
                  k = p2 * k + +(b[u5 >> 2] | 0);
                  d2 = ~~+zd(+A6);
                  h = ~~+zd(+j);
                  g2 = ~~+zd(+k);
                  A6 = +q(+(+(d2 | 0) - A6));
                  j = +q(+(+(h | 0) - j));
                  k = +q(+(+(g2 | 0) - k));
                  do {
                    if (!(A6 > j & A6 > k)) {
                      i = 0 - d2 | 0;
                      if (j > k) {
                        e3 = i - g2 | 0;
                        break;
                      } else {
                        e3 = h;
                        g2 = i - h | 0;
                        break;
                      }
                    } else {
                      d2 = 0 - (h + g2) | 0;
                      e3 = h;
                    }
                  } while (0);
                  b[y2 >> 2] = d2;
                  b[o >> 2] = e3;
                  b[n >> 2] = g2;
                  _a2(y2);
                  g2 = wc(a2, c4, y2, f2 + (m << 3) | 0) | 0;
                  if (g2 | 0) {
                    break a;
                  }
                  if (!((l | 0) < (x2 | 0) | (l | 0) == (x2 | 0) & m >>> 0 < w2 >>> 0)) {
                    g2 = 0;
                    break a;
                  }
                  g2 = ld(m | 0, l | 0, 1, 0) | 0;
                  i = H() | 0;
                  l = i;
                  m = g2;
                  g2 = b[v3 >> 2] | 0;
                }
              }
            } while (0);
            y2 = g2;
            T = z2;
            return y2 | 0;
          }
        }
        y2 = g2;
        T = z2;
        return y2 | 0;
      }
      function Cc(a2, b2, c4, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0;
        if ((c4 | 0) == 0 & (d2 | 0) == 0) {
          e3 = 0;
          f2 = 1;
          G(e3 | 0);
          return f2 | 0;
        }
        f2 = a2;
        e3 = b2;
        a2 = 1;
        b2 = 0;
        do {
          g2 = (c4 & 1 | 0) == 0 & true;
          a2 = rd((g2 ? 1 : f2) | 0, (g2 ? 0 : e3) | 0, a2 | 0, b2 | 0) | 0;
          b2 = H() | 0;
          c4 = ud(c4 | 0, d2 | 0, 1) | 0;
          d2 = H() | 0;
          f2 = rd(f2 | 0, e3 | 0, f2 | 0, e3 | 0) | 0;
          e3 = H() | 0;
        } while (!((c4 | 0) == 0 & (d2 | 0) == 0));
        G(b2 | 0);
        return a2 | 0;
      }
      function Dc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
        if (!(ya(c4, d2) | 0)) {
          o = 0;
          return o | 0;
        }
        c4 = xa(c4) | 0;
        f2 = +e[d2 >> 3];
        g2 = +e[d2 + 8 >> 3];
        g2 = c4 & g2 < 0 ? g2 + 6.283185307179586 : g2;
        o = b[a2 >> 2] | 0;
        if ((o | 0) <= 0) {
          o = 0;
          return o | 0;
        }
        n = b[a2 + 4 >> 2] | 0;
        if (c4) {
          c4 = 0;
          m = g2;
          d2 = -1;
          a2 = 0;
          a: while (1) {
            l = a2;
            while (1) {
              i = +e[n + (l << 4) >> 3];
              g2 = +e[n + (l << 4) + 8 >> 3];
              a2 = (d2 + 2 | 0) % (o | 0) | 0;
              h = +e[n + (a2 << 4) >> 3];
              j = +e[n + (a2 << 4) + 8 >> 3];
              if (i > h) {
                k = i;
                i = j;
              } else {
                k = h;
                h = i;
                i = g2;
                g2 = j;
              }
              f2 = f2 == h | f2 == k ? f2 + 2220446049250313e-31 : f2;
              if (!(f2 < h | f2 > k)) {
                break;
              }
              d2 = l + 1 | 0;
              if ((d2 | 0) >= (o | 0)) {
                d2 = 22;
                break a;
              } else {
                a2 = l;
                l = d2;
                d2 = a2;
              }
            }
            j = i < 0 ? i + 6.283185307179586 : i;
            i = g2 < 0 ? g2 + 6.283185307179586 : g2;
            m = j == m | i == m ? m + -2220446049250313e-31 : m;
            k = j + (i - j) * ((f2 - h) / (k - h));
            if ((k < 0 ? k + 6.283185307179586 : k) > m) {
              c4 = c4 ^ 1;
            }
            a2 = l + 1 | 0;
            if ((a2 | 0) >= (o | 0)) {
              d2 = 22;
              break;
            } else {
              d2 = l;
            }
          }
          if ((d2 | 0) == 22) {
            return c4 | 0;
          }
        } else {
          c4 = 0;
          m = g2;
          d2 = -1;
          a2 = 0;
          b: while (1) {
            l = a2;
            while (1) {
              i = +e[n + (l << 4) >> 3];
              g2 = +e[n + (l << 4) + 8 >> 3];
              a2 = (d2 + 2 | 0) % (o | 0) | 0;
              h = +e[n + (a2 << 4) >> 3];
              j = +e[n + (a2 << 4) + 8 >> 3];
              if (i > h) {
                k = i;
                i = j;
              } else {
                k = h;
                h = i;
                i = g2;
                g2 = j;
              }
              f2 = f2 == h | f2 == k ? f2 + 2220446049250313e-31 : f2;
              if (!(f2 < h | f2 > k)) {
                break;
              }
              d2 = l + 1 | 0;
              if ((d2 | 0) >= (o | 0)) {
                d2 = 22;
                break b;
              } else {
                a2 = l;
                l = d2;
                d2 = a2;
              }
            }
            m = i == m | g2 == m ? m + -2220446049250313e-31 : m;
            if (i + (g2 - i) * ((f2 - h) / (k - h)) > m) {
              c4 = c4 ^ 1;
            }
            a2 = l + 1 | 0;
            if ((a2 | 0) >= (o | 0)) {
              d2 = 22;
              break;
            } else {
              d2 = l;
            }
          }
          if ((d2 | 0) == 22) {
            return c4 | 0;
          }
        }
        return 0;
      }
      function Ec(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0;
        r2 = b[a2 >> 2] | 0;
        if (!r2) {
          b[c4 >> 2] = 0;
          b[c4 + 4 >> 2] = 0;
          b[c4 + 8 >> 2] = 0;
          b[c4 + 12 >> 2] = 0;
          b[c4 + 16 >> 2] = 0;
          b[c4 + 20 >> 2] = 0;
          b[c4 + 24 >> 2] = 0;
          b[c4 + 28 >> 2] = 0;
          return;
        }
        s2 = c4 + 8 | 0;
        e[s2 >> 3] = 17976931348623157e292;
        t4 = c4 + 24 | 0;
        e[t4 >> 3] = 17976931348623157e292;
        e[c4 >> 3] = -17976931348623157e292;
        u5 = c4 + 16 | 0;
        e[u5 >> 3] = -17976931348623157e292;
        if ((r2 | 0) <= 0) {
          return;
        }
        o = b[a2 + 4 >> 2] | 0;
        l = 17976931348623157e292;
        m = -17976931348623157e292;
        n = 0;
        a2 = -1;
        h = 17976931348623157e292;
        i = 17976931348623157e292;
        k = -17976931348623157e292;
        f2 = -17976931348623157e292;
        p2 = 0;
        while (1) {
          d2 = +e[o + (p2 << 4) >> 3];
          j = +e[o + (p2 << 4) + 8 >> 3];
          a2 = a2 + 2 | 0;
          g2 = +e[o + (((a2 | 0) == (r2 | 0) ? 0 : a2) << 4) + 8 >> 3];
          if (d2 < h) {
            e[s2 >> 3] = d2;
            h = d2;
          }
          if (j < i) {
            e[t4 >> 3] = j;
            i = j;
          }
          if (d2 > k) {
            e[c4 >> 3] = d2;
          } else {
            d2 = k;
          }
          if (j > f2) {
            e[u5 >> 3] = j;
            f2 = j;
          }
          l = j > 0 & j < l ? j : l;
          m = j < 0 & j > m ? j : m;
          n = n | +q(+(j - g2)) > 3.141592653589793;
          a2 = p2 + 1 | 0;
          if ((a2 | 0) == (r2 | 0)) {
            break;
          } else {
            v3 = p2;
            k = d2;
            p2 = a2;
            a2 = v3;
          }
        }
        if (!n) {
          return;
        }
        e[u5 >> 3] = m;
        e[t4 >> 3] = l;
        return;
      }
      function Fc(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A6 = 0;
        r2 = b[a2 >> 2] | 0;
        if (r2) {
          s2 = c4 + 8 | 0;
          e[s2 >> 3] = 17976931348623157e292;
          t4 = c4 + 24 | 0;
          e[t4 >> 3] = 17976931348623157e292;
          e[c4 >> 3] = -17976931348623157e292;
          u5 = c4 + 16 | 0;
          e[u5 >> 3] = -17976931348623157e292;
          if ((r2 | 0) > 0) {
            g2 = b[a2 + 4 >> 2] | 0;
            o = 17976931348623157e292;
            p2 = -17976931348623157e292;
            f2 = 0;
            d2 = -1;
            k = 17976931348623157e292;
            l = 17976931348623157e292;
            n = -17976931348623157e292;
            i = -17976931348623157e292;
            v3 = 0;
            while (1) {
              h = +e[g2 + (v3 << 4) >> 3];
              m = +e[g2 + (v3 << 4) + 8 >> 3];
              z2 = d2 + 2 | 0;
              j = +e[g2 + (((z2 | 0) == (r2 | 0) ? 0 : z2) << 4) + 8 >> 3];
              if (h < k) {
                e[s2 >> 3] = h;
                k = h;
              }
              if (m < l) {
                e[t4 >> 3] = m;
                l = m;
              }
              if (h > n) {
                e[c4 >> 3] = h;
              } else {
                h = n;
              }
              if (m > i) {
                e[u5 >> 3] = m;
                i = m;
              }
              o = m > 0 & m < o ? m : o;
              p2 = m < 0 & m > p2 ? m : p2;
              f2 = f2 | +q(+(m - j)) > 3.141592653589793;
              d2 = v3 + 1 | 0;
              if ((d2 | 0) == (r2 | 0)) {
                break;
              } else {
                z2 = v3;
                n = h;
                v3 = d2;
                d2 = z2;
              }
            }
            if (f2) {
              e[u5 >> 3] = p2;
              e[t4 >> 3] = o;
            }
          }
        } else {
          b[c4 >> 2] = 0;
          b[c4 + 4 >> 2] = 0;
          b[c4 + 8 >> 2] = 0;
          b[c4 + 12 >> 2] = 0;
          b[c4 + 16 >> 2] = 0;
          b[c4 + 20 >> 2] = 0;
          b[c4 + 24 >> 2] = 0;
          b[c4 + 28 >> 2] = 0;
        }
        z2 = a2 + 8 | 0;
        d2 = b[z2 >> 2] | 0;
        if ((d2 | 0) <= 0) {
          return;
        }
        y2 = a2 + 12 | 0;
        x2 = 0;
        do {
          g2 = b[y2 >> 2] | 0;
          f2 = x2;
          x2 = x2 + 1 | 0;
          t4 = c4 + (x2 << 5) | 0;
          u5 = b[g2 + (f2 << 3) >> 2] | 0;
          if (u5) {
            v3 = c4 + (x2 << 5) + 8 | 0;
            e[v3 >> 3] = 17976931348623157e292;
            a2 = c4 + (x2 << 5) + 24 | 0;
            e[a2 >> 3] = 17976931348623157e292;
            e[t4 >> 3] = -17976931348623157e292;
            w2 = c4 + (x2 << 5) + 16 | 0;
            e[w2 >> 3] = -17976931348623157e292;
            if ((u5 | 0) > 0) {
              r2 = b[g2 + (f2 << 3) + 4 >> 2] | 0;
              o = 17976931348623157e292;
              p2 = -17976931348623157e292;
              g2 = 0;
              f2 = -1;
              s2 = 0;
              k = 17976931348623157e292;
              l = 17976931348623157e292;
              m = -17976931348623157e292;
              i = -17976931348623157e292;
              while (1) {
                h = +e[r2 + (s2 << 4) >> 3];
                n = +e[r2 + (s2 << 4) + 8 >> 3];
                f2 = f2 + 2 | 0;
                j = +e[r2 + (((f2 | 0) == (u5 | 0) ? 0 : f2) << 4) + 8 >> 3];
                if (h < k) {
                  e[v3 >> 3] = h;
                  k = h;
                }
                if (n < l) {
                  e[a2 >> 3] = n;
                  l = n;
                }
                if (h > m) {
                  e[t4 >> 3] = h;
                } else {
                  h = m;
                }
                if (n > i) {
                  e[w2 >> 3] = n;
                  i = n;
                }
                o = n > 0 & n < o ? n : o;
                p2 = n < 0 & n > p2 ? n : p2;
                g2 = g2 | +q(+(n - j)) > 3.141592653589793;
                f2 = s2 + 1 | 0;
                if ((f2 | 0) == (u5 | 0)) {
                  break;
                } else {
                  A6 = s2;
                  s2 = f2;
                  m = h;
                  f2 = A6;
                }
              }
              if (g2) {
                e[w2 >> 3] = p2;
                e[a2 >> 3] = o;
              }
            }
          } else {
            b[t4 >> 2] = 0;
            b[t4 + 4 >> 2] = 0;
            b[t4 + 8 >> 2] = 0;
            b[t4 + 12 >> 2] = 0;
            b[t4 + 16 >> 2] = 0;
            b[t4 + 20 >> 2] = 0;
            b[t4 + 24 >> 2] = 0;
            b[t4 + 28 >> 2] = 0;
            d2 = b[z2 >> 2] | 0;
          }
        } while ((x2 | 0) < (d2 | 0));
        return;
      }
      function Gc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0;
        if (!(Dc(a2, c4, d2) | 0)) {
          f2 = 0;
          return f2 | 0;
        }
        f2 = a2 + 8 | 0;
        if ((b[f2 >> 2] | 0) <= 0) {
          f2 = 1;
          return f2 | 0;
        }
        e3 = a2 + 12 | 0;
        a2 = 0;
        while (1) {
          g2 = a2;
          a2 = a2 + 1 | 0;
          if (Dc((b[e3 >> 2] | 0) + (g2 << 3) | 0, c4 + (a2 << 5) | 0, d2) | 0) {
            a2 = 0;
            e3 = 6;
            break;
          }
          if ((a2 | 0) >= (b[f2 >> 2] | 0)) {
            a2 = 1;
            e3 = 6;
            break;
          }
        }
        if ((e3 | 0) == 6) {
          return a2 | 0;
        }
        return 0;
      }
      function Hc() {
        return 8;
      }
      function Ic() {
        return 16;
      }
      function Jc() {
        return 168;
      }
      function Kc() {
        return 8;
      }
      function Lc() {
        return 16;
      }
      function Mc() {
        return 12;
      }
      function Nc() {
        return 8;
      }
      function Oc(a2) {
        a2 = a2 | 0;
        return +(+((b[a2 >> 2] | 0) >>> 0) + 4294967296 * +(b[a2 + 4 >> 2] | 0));
      }
      function Pc(a2) {
        a2 = a2 | 0;
        var b2 = 0, c4 = 0;
        c4 = +e[a2 >> 3];
        b2 = +e[a2 + 8 >> 3];
        return + +r(+(c4 * c4 + b2 * b2));
      }
      function Qc(a2, b2, c4, d2, f2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
        k = +e[a2 >> 3];
        j = +e[b2 >> 3] - k;
        i = +e[a2 + 8 >> 3];
        h = +e[b2 + 8 >> 3] - i;
        m = +e[c4 >> 3];
        g2 = +e[d2 >> 3] - m;
        n = +e[c4 + 8 >> 3];
        l = +e[d2 + 8 >> 3] - n;
        g2 = (g2 * (i - n) - (k - m) * l) / (j * l - h * g2);
        e[f2 >> 3] = k + j * g2;
        e[f2 + 8 >> 3] = i + h * g2;
        return;
      }
      function Rc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        if (!(+q(+(+e[a2 >> 3] - +e[b2 >> 3])) < 11920928955078125e-23)) {
          b2 = 0;
          return b2 | 0;
        }
        b2 = +q(+(+e[a2 + 8 >> 3] - +e[b2 + 8 >> 3])) < 11920928955078125e-23;
        return b2 | 0;
      }
      function Sc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, f2 = 0;
        f2 = +e[a2 >> 3] - +e[b2 >> 3];
        d2 = +e[a2 + 8 >> 3] - +e[b2 + 8 >> 3];
        c4 = +e[a2 + 16 >> 3] - +e[b2 + 16 >> 3];
        return +(f2 * f2 + d2 * d2 + c4 * c4);
      }
      function Tc(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, f2 = 0;
        c4 = +e[a2 >> 3];
        d2 = +t(+c4);
        c4 = +u4(+c4);
        e[b2 + 16 >> 3] = c4;
        c4 = +e[a2 + 8 >> 3];
        f2 = d2 * +t(+c4);
        e[b2 >> 3] = f2;
        c4 = d2 * +u4(+c4);
        e[b2 + 8 >> 3] = c4;
        return;
      }
      function Uc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0;
        g2 = T;
        T = T + 16 | 0;
        f2 = g2;
        e3 = xb(a2, c4) | 0;
        if ((d2 + -1 | 0) >>> 0 > 5) {
          f2 = -1;
          T = g2;
          return f2 | 0;
        }
        e3 = (e3 | 0) != 0;
        if ((d2 | 0) == 1 & e3) {
          f2 = -1;
          T = g2;
          return f2 | 0;
        }
        do {
          if (!(Vc(a2, c4, f2) | 0)) {
            if (e3) {
              e3 = ((b[21936 + (d2 << 2) >> 2] | 0) + 5 - (b[f2 >> 2] | 0) | 0) % 5 | 0;
              break;
            } else {
              e3 = ((b[21968 + (d2 << 2) >> 2] | 0) + 6 - (b[f2 >> 2] | 0) | 0) % 6 | 0;
              break;
            }
          } else {
            e3 = -1;
          }
        } while (0);
        f2 = e3;
        T = g2;
        return f2 | 0;
      }
      function Vc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
        k = T;
        T = T + 32 | 0;
        h = k + 16 | 0;
        i = k;
        e3 = Ob(a2, c4, h) | 0;
        if (e3 | 0) {
          d2 = e3;
          T = k;
          return d2 | 0;
        }
        g2 = tb(a2, c4) | 0;
        j = Fb(a2, c4) | 0;
        qa(g2, i);
        e3 = ra(g2, b[h >> 2] | 0) | 0;
        a: do {
          if (ma(g2) | 0) {
            do {
              switch (g2 | 0) {
                case 4: {
                  a2 = 0;
                  break;
                }
                case 14: {
                  a2 = 1;
                  break;
                }
                case 24: {
                  a2 = 2;
                  break;
                }
                case 38: {
                  a2 = 3;
                  break;
                }
                case 49: {
                  a2 = 4;
                  break;
                }
                case 58: {
                  a2 = 5;
                  break;
                }
                case 63: {
                  a2 = 6;
                  break;
                }
                case 72: {
                  a2 = 7;
                  break;
                }
                case 83: {
                  a2 = 8;
                  break;
                }
                case 97: {
                  a2 = 9;
                  break;
                }
                case 107: {
                  a2 = 10;
                  break;
                }
                case 117: {
                  a2 = 11;
                  break;
                }
                default: {
                  e3 = 1;
                  break a;
                }
              }
            } while (0);
            f2 = b[22e3 + (a2 * 24 | 0) + 8 >> 2] | 0;
            c4 = b[22e3 + (a2 * 24 | 0) + 16 >> 2] | 0;
            a2 = b[h >> 2] | 0;
            if ((a2 | 0) != (b[i >> 2] | 0)) {
              i = na(g2) | 0;
              a2 = b[h >> 2] | 0;
              if (i | (a2 | 0) == (c4 | 0)) {
                e3 = (e3 + 1 | 0) % 6 | 0;
              }
            }
            if ((j | 0) == 3 & (a2 | 0) == (c4 | 0)) {
              e3 = (e3 + 5 | 0) % 6 | 0;
              f2 = 22;
              break;
            }
            if ((j | 0) == 5 & (a2 | 0) == (f2 | 0)) {
              e3 = (e3 + 1 | 0) % 6 | 0;
              f2 = 22;
            } else {
              f2 = 22;
            }
          } else {
            f2 = 22;
          }
        } while (0);
        if ((f2 | 0) == 22) {
          b[d2 >> 2] = e3;
          e3 = 0;
        }
        d2 = e3;
        T = k;
        return d2 | 0;
      }
      function Wc(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0;
        u5 = T;
        T = T + 32 | 0;
        t4 = u5 + 24 | 0;
        r2 = u5 + 20 | 0;
        p2 = u5 + 8 | 0;
        o = u5 + 16 | 0;
        n = u5;
        j = (xb(a2, c4) | 0) == 0;
        j = j ? 6 : 5;
        l = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        l = l & 15;
        if (j >>> 0 <= d2 >>> 0) {
          e3 = 2;
          T = u5;
          return e3 | 0;
        }
        m = (l | 0) == 0;
        if (!m ? (q2 = wd(7, 0, (l ^ 15) * 3 | 0) | 0, (q2 & a2 | 0) == 0 & ((H() | 0) & c4 | 0) == 0) : 0) {
          f2 = d2;
        } else {
          g2 = 4;
        }
        a: do {
          if ((g2 | 0) == 4) {
            f2 = (xb(a2, c4) | 0) != 0;
            if (((f2 ? 4 : 5) | 0) < (d2 | 0)) {
              e3 = 1;
              T = u5;
              return e3 | 0;
            }
            if (Vc(a2, c4, t4) | 0) {
              e3 = 1;
              T = u5;
              return e3 | 0;
            }
            g2 = (b[t4 >> 2] | 0) + d2 | 0;
            if (f2) {
              f2 = 22288 + (((g2 | 0) % 5 | 0) << 2) | 0;
            } else {
              f2 = 22320 + (((g2 | 0) % 6 | 0) << 2) | 0;
            }
            q2 = b[f2 >> 2] | 0;
            if ((q2 | 0) == 7) {
              e3 = 1;
              T = u5;
              return e3 | 0;
            }
            b[r2 >> 2] = 0;
            f2 = ea2(a2, c4, q2, r2, p2) | 0;
            do {
              if (!f2) {
                i = p2;
                k = b[i >> 2] | 0;
                i = b[i + 4 >> 2] | 0;
                h = i >>> 0 < c4 >>> 0 | (i | 0) == (c4 | 0) & k >>> 0 < a2 >>> 0;
                g2 = h ? k : a2;
                h = h ? i : c4;
                if (!m ? (m = wd(7, 0, (l ^ 15) * 3 | 0) | 0, (k & m | 0) == 0 & (i & (H() | 0) | 0) == 0) : 0) {
                  f2 = d2;
                } else {
                  i = (d2 + -1 + j | 0) % (j | 0) | 0;
                  f2 = xb(a2, c4) | 0;
                  if ((i | 0) < 0) {
                    I(23313, 23315, 245, 23324);
                  }
                  j = (f2 | 0) != 0;
                  if (((j ? 4 : 5) | 0) < (i | 0)) {
                    I(23313, 23315, 245, 23324);
                  }
                  if (Vc(a2, c4, t4) | 0) {
                    I(23313, 23315, 245, 23324);
                  }
                  f2 = (b[t4 >> 2] | 0) + i | 0;
                  if (j) {
                    f2 = 22288 + (((f2 | 0) % 5 | 0) << 2) | 0;
                  } else {
                    f2 = 22320 + (((f2 | 0) % 6 | 0) << 2) | 0;
                  }
                  i = b[f2 >> 2] | 0;
                  if ((i | 0) == 7) {
                    I(23313, 23315, 245, 23324);
                  }
                  b[o >> 2] = 0;
                  f2 = ea2(a2, c4, i, o, n) | 0;
                  if (f2 | 0) {
                    break;
                  }
                  k = n;
                  j = b[k >> 2] | 0;
                  k = b[k + 4 >> 2] | 0;
                  do {
                    if (k >>> 0 < h >>> 0 | (k | 0) == (h | 0) & j >>> 0 < g2 >>> 0) {
                      if (!(xb(j, k) | 0)) {
                        g2 = b[22384 + ((((b[o >> 2] | 0) + (b[22352 + (i << 2) >> 2] | 0) | 0) % 6 | 0) << 2) >> 2] | 0;
                      } else {
                        g2 = fa(j, k, a2, c4) | 0;
                      }
                      f2 = xb(j, k) | 0;
                      if ((g2 + -1 | 0) >>> 0 > 5) {
                        f2 = -1;
                        g2 = j;
                        h = k;
                        break;
                      }
                      f2 = (f2 | 0) != 0;
                      if ((g2 | 0) == 1 & f2) {
                        f2 = -1;
                        g2 = j;
                        h = k;
                        break;
                      }
                      do {
                        if (!(Vc(j, k, t4) | 0)) {
                          if (f2) {
                            f2 = ((b[21936 + (g2 << 2) >> 2] | 0) + 5 - (b[t4 >> 2] | 0) | 0) % 5 | 0;
                            break;
                          } else {
                            f2 = ((b[21968 + (g2 << 2) >> 2] | 0) + 6 - (b[t4 >> 2] | 0) | 0) % 6 | 0;
                            break;
                          }
                        } else {
                          f2 = -1;
                        }
                      } while (0);
                      g2 = j;
                      h = k;
                    } else {
                      f2 = d2;
                    }
                  } while (0);
                  i = p2;
                  k = b[i >> 2] | 0;
                  i = b[i + 4 >> 2] | 0;
                }
                if ((g2 | 0) == (k | 0) & (h | 0) == (i | 0)) {
                  j = (xb(k, i) | 0) != 0;
                  if (j) {
                    a2 = fa(k, i, a2, c4) | 0;
                  } else {
                    a2 = b[22384 + ((((b[r2 >> 2] | 0) + (b[22352 + (q2 << 2) >> 2] | 0) | 0) % 6 | 0) << 2) >> 2] | 0;
                  }
                  f2 = xb(k, i) | 0;
                  if ((a2 + -1 | 0) >>> 0 <= 5 ? (s2 = (f2 | 0) != 0, !((a2 | 0) == 1 & s2)) : 0) {
                    do {
                      if (!(Vc(k, i, t4) | 0)) {
                        if (s2) {
                          f2 = ((b[21936 + (a2 << 2) >> 2] | 0) + 5 - (b[t4 >> 2] | 0) | 0) % 5 | 0;
                          break;
                        } else {
                          f2 = ((b[21968 + (a2 << 2) >> 2] | 0) + 6 - (b[t4 >> 2] | 0) | 0) % 6 | 0;
                          break;
                        }
                      } else {
                        f2 = -1;
                      }
                    } while (0);
                  } else {
                    f2 = -1;
                  }
                  f2 = f2 + 1 | 0;
                  f2 = (f2 | 0) == 6 | j & (f2 | 0) == 5 ? 0 : f2;
                }
                c4 = h;
                a2 = g2;
                break a;
              }
            } while (0);
            e3 = f2;
            T = u5;
            return e3 | 0;
          }
        } while (0);
        s2 = wd(f2 | 0, 0, 56) | 0;
        t4 = H() | 0 | c4 & -2130706433 | 536870912;
        b[e3 >> 2] = s2 | a2;
        b[e3 + 4 >> 2] = t4;
        e3 = 0;
        T = u5;
        return e3 | 0;
      }
      function Xc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0;
        g2 = (xb(a2, c4) | 0) == 0;
        e3 = Wc(a2, c4, 0, d2) | 0;
        f2 = (e3 | 0) == 0;
        if (g2) {
          if (!f2) {
            g2 = e3;
            return g2 | 0;
          }
          e3 = Wc(a2, c4, 1, d2 + 8 | 0) | 0;
          if (e3 | 0) {
            g2 = e3;
            return g2 | 0;
          }
          e3 = Wc(a2, c4, 2, d2 + 16 | 0) | 0;
          if (e3 | 0) {
            g2 = e3;
            return g2 | 0;
          }
          e3 = Wc(a2, c4, 3, d2 + 24 | 0) | 0;
          if (e3 | 0) {
            g2 = e3;
            return g2 | 0;
          }
          e3 = Wc(a2, c4, 4, d2 + 32 | 0) | 0;
          if (!e3) {
            return Wc(a2, c4, 5, d2 + 40 | 0) | 0;
          } else {
            g2 = e3;
            return g2 | 0;
          }
        }
        if (!f2) {
          g2 = e3;
          return g2 | 0;
        }
        e3 = Wc(a2, c4, 1, d2 + 8 | 0) | 0;
        if (e3 | 0) {
          g2 = e3;
          return g2 | 0;
        }
        e3 = Wc(a2, c4, 2, d2 + 16 | 0) | 0;
        if (e3 | 0) {
          g2 = e3;
          return g2 | 0;
        }
        e3 = Wc(a2, c4, 3, d2 + 24 | 0) | 0;
        if (e3 | 0) {
          g2 = e3;
          return g2 | 0;
        }
        e3 = Wc(a2, c4, 4, d2 + 32 | 0) | 0;
        if (e3 | 0) {
          g2 = e3;
          return g2 | 0;
        }
        g2 = d2 + 40 | 0;
        b[g2 >> 2] = 0;
        b[g2 + 4 >> 2] = 0;
        g2 = 0;
        return g2 | 0;
      }
      function Yc(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
        j = T;
        T = T + 192 | 0;
        f2 = j;
        g2 = j + 168 | 0;
        h = vd(a2 | 0, c4 | 0, 56) | 0;
        H() | 0;
        h = h & 7;
        i = c4 & -2130706433 | 134217728;
        e3 = Ob(a2, i, g2) | 0;
        if (e3 | 0) {
          i = e3;
          T = j;
          return i | 0;
        }
        c4 = vd(a2 | 0, c4 | 0, 52) | 0;
        H() | 0;
        c4 = c4 & 15;
        if (!(xb(a2, i) | 0)) {
          qb(g2, c4, h, 1, f2);
        } else {
          mb(g2, c4, h, 1, f2);
        }
        i = f2 + 8 | 0;
        b[d2 >> 2] = b[i >> 2];
        b[d2 + 4 >> 2] = b[i + 4 >> 2];
        b[d2 + 8 >> 2] = b[i + 8 >> 2];
        b[d2 + 12 >> 2] = b[i + 12 >> 2];
        i = 0;
        T = j;
        return i | 0;
      }
      function Zc(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, e3 = 0, f2 = 0, g2 = 0;
        f2 = T;
        T = T + 16 | 0;
        d2 = f2;
        if (!(true & (c4 & 2013265920 | 0) == 536870912)) {
          e3 = 0;
          T = f2;
          return e3 | 0;
        }
        e3 = c4 & -2130706433 | 134217728;
        if (!(ub(a2, e3) | 0)) {
          e3 = 0;
          T = f2;
          return e3 | 0;
        }
        g2 = vd(a2 | 0, c4 | 0, 56) | 0;
        H() | 0;
        g2 = (Wc(a2, e3, g2 & 7, d2) | 0) == 0;
        e3 = d2;
        e3 = g2 & ((b[e3 >> 2] | 0) == (a2 | 0) ? (b[e3 + 4 >> 2] | 0) == (c4 | 0) : 0) & 1;
        T = f2;
        return e3 | 0;
      }
      function _c(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0;
        if ((c4 | 0) > 0) {
          e3 = kd(c4, 4) | 0;
          b[a2 >> 2] = e3;
          if (!e3) {
            I(23337, 23360, 40, 23374);
          }
        } else {
          b[a2 >> 2] = 0;
        }
        b[a2 + 4 >> 2] = c4;
        b[a2 + 8 >> 2] = 0;
        b[a2 + 12 >> 2] = d2;
        return;
      }
      function $c(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
        g2 = a2 + 4 | 0;
        h = a2 + 12 | 0;
        i = a2 + 8 | 0;
        a: while (1) {
          d2 = b[g2 >> 2] | 0;
          c4 = 0;
          while (1) {
            if ((c4 | 0) >= (d2 | 0)) {
              break a;
            }
            f2 = b[a2 >> 2] | 0;
            j = b[f2 + (c4 << 2) >> 2] | 0;
            if (!j) {
              c4 = c4 + 1 | 0;
            } else {
              break;
            }
          }
          c4 = f2 + (~~(+q(+(+s(10, + +(15 - (b[h >> 2] | 0) | 0)) * (+e[j >> 3] + +e[j + 8 >> 3]))) % +(d2 | 0)) >>> 0 << 2) | 0;
          d2 = b[c4 >> 2] | 0;
          b: do {
            if (d2 | 0) {
              f2 = j + 32 | 0;
              if ((d2 | 0) == (j | 0)) {
                b[c4 >> 2] = b[f2 >> 2];
              } else {
                d2 = d2 + 32 | 0;
                c4 = b[d2 >> 2] | 0;
                if (!c4) {
                  break;
                }
                while (1) {
                  if ((c4 | 0) == (j | 0)) {
                    break;
                  }
                  d2 = c4 + 32 | 0;
                  c4 = b[d2 >> 2] | 0;
                  if (!c4) {
                    break b;
                  }
                }
                b[d2 >> 2] = b[f2 >> 2];
              }
              jd(j);
              b[i >> 2] = (b[i >> 2] | 0) + -1;
            }
          } while (0);
        }
        jd(b[a2 >> 2] | 0);
        return;
      }
      function ad(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0;
        e3 = b[a2 + 4 >> 2] | 0;
        d2 = 0;
        while (1) {
          if ((d2 | 0) >= (e3 | 0)) {
            c4 = 0;
            d2 = 4;
            break;
          }
          c4 = b[(b[a2 >> 2] | 0) + (d2 << 2) >> 2] | 0;
          if (!c4) {
            d2 = d2 + 1 | 0;
          } else {
            d2 = 4;
            break;
          }
        }
        if ((d2 | 0) == 4) {
          return c4 | 0;
        }
        return 0;
      }
      function bd2(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0, f2 = 0, g2 = 0, h = 0;
        d2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c4 >> 3] + +e[c4 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
        d2 = (b[a2 >> 2] | 0) + (d2 << 2) | 0;
        f2 = b[d2 >> 2] | 0;
        if (!f2) {
          h = 1;
          return h | 0;
        }
        h = c4 + 32 | 0;
        do {
          if ((f2 | 0) != (c4 | 0)) {
            d2 = b[f2 + 32 >> 2] | 0;
            if (!d2) {
              h = 1;
              return h | 0;
            }
            g2 = d2;
            while (1) {
              if ((g2 | 0) == (c4 | 0)) {
                g2 = 8;
                break;
              }
              d2 = b[g2 + 32 >> 2] | 0;
              if (!d2) {
                d2 = 1;
                g2 = 10;
                break;
              } else {
                f2 = g2;
                g2 = d2;
              }
            }
            if ((g2 | 0) == 8) {
              b[f2 + 32 >> 2] = b[h >> 2];
              break;
            } else if ((g2 | 0) == 10) {
              return d2 | 0;
            }
          } else {
            b[d2 >> 2] = b[h >> 2];
          }
        } while (0);
        jd(c4);
        h = a2 + 8 | 0;
        b[h >> 2] = (b[h >> 2] | 0) + -1;
        h = 0;
        return h | 0;
      }
      function cd2(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0;
        h = id(40) | 0;
        if (!h) {
          I(23390, 23360, 98, 23403);
        }
        b[h >> 2] = b[c4 >> 2];
        b[h + 4 >> 2] = b[c4 + 4 >> 2];
        b[h + 8 >> 2] = b[c4 + 8 >> 2];
        b[h + 12 >> 2] = b[c4 + 12 >> 2];
        g2 = h + 16 | 0;
        b[g2 >> 2] = b[d2 >> 2];
        b[g2 + 4 >> 2] = b[d2 + 4 >> 2];
        b[g2 + 8 >> 2] = b[d2 + 8 >> 2];
        b[g2 + 12 >> 2] = b[d2 + 12 >> 2];
        b[h + 32 >> 2] = 0;
        g2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c4 >> 3] + +e[c4 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
        g2 = (b[a2 >> 2] | 0) + (g2 << 2) | 0;
        f2 = b[g2 >> 2] | 0;
        do {
          if (!f2) {
            b[g2 >> 2] = h;
          } else {
            while (1) {
              if (_b2(f2, c4) | 0 ? _b2(f2 + 16 | 0, d2) | 0 : 0) {
                break;
              }
              g2 = b[f2 + 32 >> 2] | 0;
              f2 = (g2 | 0) == 0 ? f2 : g2;
              if (!(b[f2 + 32 >> 2] | 0)) {
                i = 10;
                break;
              }
            }
            if ((i | 0) == 10) {
              b[f2 + 32 >> 2] = h;
              break;
            }
            jd(h);
            i = f2;
            return i | 0;
          }
        } while (0);
        i = a2 + 8 | 0;
        b[i >> 2] = (b[i >> 2] | 0) + 1;
        i = h;
        return i | 0;
      }
      function dd(a2, c4, d2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var f2 = 0, g2 = 0;
        g2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c4 >> 3] + +e[c4 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
        g2 = b[(b[a2 >> 2] | 0) + (g2 << 2) >> 2] | 0;
        if (!g2) {
          d2 = 0;
          return d2 | 0;
        }
        if (!d2) {
          a2 = g2;
          while (1) {
            if (_b2(a2, c4) | 0) {
              f2 = 10;
              break;
            }
            a2 = b[a2 + 32 >> 2] | 0;
            if (!a2) {
              a2 = 0;
              f2 = 10;
              break;
            }
          }
          if ((f2 | 0) == 10) {
            return a2 | 0;
          }
        }
        a2 = g2;
        while (1) {
          if (_b2(a2, c4) | 0 ? _b2(a2 + 16 | 0, d2) | 0 : 0) {
            f2 = 10;
            break;
          }
          a2 = b[a2 + 32 >> 2] | 0;
          if (!a2) {
            a2 = 0;
            f2 = 10;
            break;
          }
        }
        if ((f2 | 0) == 10) {
          return a2 | 0;
        }
        return 0;
      }
      function ed(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0;
        d2 = ~~(+q(+(+s(10, + +(15 - (b[a2 + 12 >> 2] | 0) | 0)) * (+e[c4 >> 3] + +e[c4 + 8 >> 3]))) % +(b[a2 + 4 >> 2] | 0)) >>> 0;
        a2 = b[(b[a2 >> 2] | 0) + (d2 << 2) >> 2] | 0;
        if (!a2) {
          d2 = 0;
          return d2 | 0;
        }
        while (1) {
          if (_b2(a2, c4) | 0) {
            c4 = 5;
            break;
          }
          a2 = b[a2 + 32 >> 2] | 0;
          if (!a2) {
            a2 = 0;
            c4 = 5;
            break;
          }
        }
        if ((c4 | 0) == 5) {
          return a2 | 0;
        }
        return 0;
      }
      function fd() {
        return 23424;
      }
      function gd(a2) {
        a2 = +a2;
        return + +Cd(+a2);
      }
      function hd(a2) {
        a2 = +a2;
        return ~~+gd(a2) | 0;
      }
      function id(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t4 = 0, u5 = 0, v3 = 0, w2 = 0;
        w2 = T;
        T = T + 16 | 0;
        n = w2;
        do {
          if (a2 >>> 0 < 245) {
            k = a2 >>> 0 < 11 ? 16 : a2 + 11 & -8;
            a2 = k >>> 3;
            m = b[5857] | 0;
            d2 = m >>> a2;
            if (d2 & 3 | 0) {
              c4 = (d2 & 1 ^ 1) + a2 | 0;
              a2 = 23468 + (c4 << 1 << 2) | 0;
              d2 = a2 + 8 | 0;
              e3 = b[d2 >> 2] | 0;
              f2 = e3 + 8 | 0;
              g2 = b[f2 >> 2] | 0;
              if ((g2 | 0) == (a2 | 0)) {
                b[5857] = m & ~(1 << c4);
              } else {
                b[g2 + 12 >> 2] = a2;
                b[d2 >> 2] = g2;
              }
              v3 = c4 << 3;
              b[e3 + 4 >> 2] = v3 | 3;
              v3 = e3 + v3 + 4 | 0;
              b[v3 >> 2] = b[v3 >> 2] | 1;
              v3 = f2;
              T = w2;
              return v3 | 0;
            }
            l = b[5859] | 0;
            if (k >>> 0 > l >>> 0) {
              if (d2 | 0) {
                c4 = 2 << a2;
                c4 = d2 << a2 & (c4 | 0 - c4);
                c4 = (c4 & 0 - c4) + -1 | 0;
                i = c4 >>> 12 & 16;
                c4 = c4 >>> i;
                d2 = c4 >>> 5 & 8;
                c4 = c4 >>> d2;
                g2 = c4 >>> 2 & 4;
                c4 = c4 >>> g2;
                a2 = c4 >>> 1 & 2;
                c4 = c4 >>> a2;
                e3 = c4 >>> 1 & 1;
                e3 = (d2 | i | g2 | a2 | e3) + (c4 >>> e3) | 0;
                c4 = 23468 + (e3 << 1 << 2) | 0;
                a2 = c4 + 8 | 0;
                g2 = b[a2 >> 2] | 0;
                i = g2 + 8 | 0;
                d2 = b[i >> 2] | 0;
                if ((d2 | 0) == (c4 | 0)) {
                  a2 = m & ~(1 << e3);
                  b[5857] = a2;
                } else {
                  b[d2 + 12 >> 2] = c4;
                  b[a2 >> 2] = d2;
                  a2 = m;
                }
                v3 = e3 << 3;
                h = v3 - k | 0;
                b[g2 + 4 >> 2] = k | 3;
                f2 = g2 + k | 0;
                b[f2 + 4 >> 2] = h | 1;
                b[g2 + v3 >> 2] = h;
                if (l | 0) {
                  e3 = b[5862] | 0;
                  c4 = l >>> 3;
                  d2 = 23468 + (c4 << 1 << 2) | 0;
                  c4 = 1 << c4;
                  if (!(a2 & c4)) {
                    b[5857] = a2 | c4;
                    c4 = d2;
                    a2 = d2 + 8 | 0;
                  } else {
                    a2 = d2 + 8 | 0;
                    c4 = b[a2 >> 2] | 0;
                  }
                  b[a2 >> 2] = e3;
                  b[c4 + 12 >> 2] = e3;
                  b[e3 + 8 >> 2] = c4;
                  b[e3 + 12 >> 2] = d2;
                }
                b[5859] = h;
                b[5862] = f2;
                v3 = i;
                T = w2;
                return v3 | 0;
              }
              g2 = b[5858] | 0;
              if (g2) {
                d2 = (g2 & 0 - g2) + -1 | 0;
                f2 = d2 >>> 12 & 16;
                d2 = d2 >>> f2;
                e3 = d2 >>> 5 & 8;
                d2 = d2 >>> e3;
                h = d2 >>> 2 & 4;
                d2 = d2 >>> h;
                i = d2 >>> 1 & 2;
                d2 = d2 >>> i;
                j = d2 >>> 1 & 1;
                j = b[23732 + ((e3 | f2 | h | i | j) + (d2 >>> j) << 2) >> 2] | 0;
                d2 = j;
                i = j;
                j = (b[j + 4 >> 2] & -8) - k | 0;
                while (1) {
                  a2 = b[d2 + 16 >> 2] | 0;
                  if (!a2) {
                    a2 = b[d2 + 20 >> 2] | 0;
                    if (!a2) {
                      break;
                    }
                  }
                  h = (b[a2 + 4 >> 2] & -8) - k | 0;
                  f2 = h >>> 0 < j >>> 0;
                  d2 = a2;
                  i = f2 ? a2 : i;
                  j = f2 ? h : j;
                }
                h = i + k | 0;
                if (h >>> 0 > i >>> 0) {
                  f2 = b[i + 24 >> 2] | 0;
                  c4 = b[i + 12 >> 2] | 0;
                  do {
                    if ((c4 | 0) == (i | 0)) {
                      a2 = i + 20 | 0;
                      c4 = b[a2 >> 2] | 0;
                      if (!c4) {
                        a2 = i + 16 | 0;
                        c4 = b[a2 >> 2] | 0;
                        if (!c4) {
                          d2 = 0;
                          break;
                        }
                      }
                      while (1) {
                        e3 = c4 + 20 | 0;
                        d2 = b[e3 >> 2] | 0;
                        if (!d2) {
                          e3 = c4 + 16 | 0;
                          d2 = b[e3 >> 2] | 0;
                          if (!d2) {
                            break;
                          } else {
                            c4 = d2;
                            a2 = e3;
                          }
                        } else {
                          c4 = d2;
                          a2 = e3;
                        }
                      }
                      b[a2 >> 2] = 0;
                      d2 = c4;
                    } else {
                      d2 = b[i + 8 >> 2] | 0;
                      b[d2 + 12 >> 2] = c4;
                      b[c4 + 8 >> 2] = d2;
                      d2 = c4;
                    }
                  } while (0);
                  do {
                    if (f2 | 0) {
                      c4 = b[i + 28 >> 2] | 0;
                      a2 = 23732 + (c4 << 2) | 0;
                      if ((i | 0) == (b[a2 >> 2] | 0)) {
                        b[a2 >> 2] = d2;
                        if (!d2) {
                          b[5858] = g2 & ~(1 << c4);
                          break;
                        }
                      } else {
                        v3 = f2 + 16 | 0;
                        b[((b[v3 >> 2] | 0) == (i | 0) ? v3 : f2 + 20 | 0) >> 2] = d2;
                        if (!d2) {
                          break;
                        }
                      }
                      b[d2 + 24 >> 2] = f2;
                      c4 = b[i + 16 >> 2] | 0;
                      if (c4 | 0) {
                        b[d2 + 16 >> 2] = c4;
                        b[c4 + 24 >> 2] = d2;
                      }
                      c4 = b[i + 20 >> 2] | 0;
                      if (c4 | 0) {
                        b[d2 + 20 >> 2] = c4;
                        b[c4 + 24 >> 2] = d2;
                      }
                    }
                  } while (0);
                  if (j >>> 0 < 16) {
                    v3 = j + k | 0;
                    b[i + 4 >> 2] = v3 | 3;
                    v3 = i + v3 + 4 | 0;
                    b[v3 >> 2] = b[v3 >> 2] | 1;
                  } else {
                    b[i + 4 >> 2] = k | 3;
                    b[h + 4 >> 2] = j | 1;
                    b[h + j >> 2] = j;
                    if (l | 0) {
                      e3 = b[5862] | 0;
                      c4 = l >>> 3;
                      d2 = 23468 + (c4 << 1 << 2) | 0;
                      c4 = 1 << c4;
                      if (!(c4 & m)) {
                        b[5857] = c4 | m;
                        c4 = d2;
                        a2 = d2 + 8 | 0;
                      } else {
                        a2 = d2 + 8 | 0;
                        c4 = b[a2 >> 2] | 0;
                      }
                      b[a2 >> 2] = e3;
                      b[c4 + 12 >> 2] = e3;
                      b[e3 + 8 >> 2] = c4;
                      b[e3 + 12 >> 2] = d2;
                    }
                    b[5859] = j;
                    b[5862] = h;
                  }
                  v3 = i + 8 | 0;
                  T = w2;
                  return v3 | 0;
                } else {
                  m = k;
                }
              } else {
                m = k;
              }
            } else {
              m = k;
            }
          } else if (a2 >>> 0 <= 4294967231) {
            a2 = a2 + 11 | 0;
            k = a2 & -8;
            e3 = b[5858] | 0;
            if (e3) {
              f2 = 0 - k | 0;
              a2 = a2 >>> 8;
              if (a2) {
                if (k >>> 0 > 16777215) {
                  j = 31;
                } else {
                  m = (a2 + 1048320 | 0) >>> 16 & 8;
                  q2 = a2 << m;
                  i = (q2 + 520192 | 0) >>> 16 & 4;
                  q2 = q2 << i;
                  j = (q2 + 245760 | 0) >>> 16 & 2;
                  j = 14 - (i | m | j) + (q2 << j >>> 15) | 0;
                  j = k >>> (j + 7 | 0) & 1 | j << 1;
                }
              } else {
                j = 0;
              }
              d2 = b[23732 + (j << 2) >> 2] | 0;
              a: do {
                if (!d2) {
                  d2 = 0;
                  a2 = 0;
                  q2 = 61;
                } else {
                  a2 = 0;
                  i = k << ((j | 0) == 31 ? 0 : 25 - (j >>> 1) | 0);
                  g2 = 0;
                  while (1) {
                    h = (b[d2 + 4 >> 2] & -8) - k | 0;
                    if (h >>> 0 < f2 >>> 0) {
                      if (!h) {
                        a2 = d2;
                        f2 = 0;
                        q2 = 65;
                        break a;
                      } else {
                        a2 = d2;
                        f2 = h;
                      }
                    }
                    q2 = b[d2 + 20 >> 2] | 0;
                    d2 = b[d2 + 16 + (i >>> 31 << 2) >> 2] | 0;
                    g2 = (q2 | 0) == 0 | (q2 | 0) == (d2 | 0) ? g2 : q2;
                    if (!d2) {
                      d2 = g2;
                      q2 = 61;
                      break;
                    } else {
                      i = i << 1;
                    }
                  }
                }
              } while (0);
              if ((q2 | 0) == 61) {
                if ((d2 | 0) == 0 & (a2 | 0) == 0) {
                  a2 = 2 << j;
                  a2 = (a2 | 0 - a2) & e3;
                  if (!a2) {
                    m = k;
                    break;
                  }
                  m = (a2 & 0 - a2) + -1 | 0;
                  h = m >>> 12 & 16;
                  m = m >>> h;
                  g2 = m >>> 5 & 8;
                  m = m >>> g2;
                  i = m >>> 2 & 4;
                  m = m >>> i;
                  j = m >>> 1 & 2;
                  m = m >>> j;
                  d2 = m >>> 1 & 1;
                  a2 = 0;
                  d2 = b[23732 + ((g2 | h | i | j | d2) + (m >>> d2) << 2) >> 2] | 0;
                }
                if (!d2) {
                  i = a2;
                  h = f2;
                } else {
                  q2 = 65;
                }
              }
              if ((q2 | 0) == 65) {
                g2 = d2;
                while (1) {
                  m = (b[g2 + 4 >> 2] & -8) - k | 0;
                  d2 = m >>> 0 < f2 >>> 0;
                  f2 = d2 ? m : f2;
                  a2 = d2 ? g2 : a2;
                  d2 = b[g2 + 16 >> 2] | 0;
                  if (!d2) {
                    d2 = b[g2 + 20 >> 2] | 0;
                  }
                  if (!d2) {
                    i = a2;
                    h = f2;
                    break;
                  } else {
                    g2 = d2;
                  }
                }
              }
              if (((i | 0) != 0 ? h >>> 0 < ((b[5859] | 0) - k | 0) >>> 0 : 0) ? (l = i + k | 0, l >>> 0 > i >>> 0) : 0) {
                g2 = b[i + 24 >> 2] | 0;
                c4 = b[i + 12 >> 2] | 0;
                do {
                  if ((c4 | 0) == (i | 0)) {
                    a2 = i + 20 | 0;
                    c4 = b[a2 >> 2] | 0;
                    if (!c4) {
                      a2 = i + 16 | 0;
                      c4 = b[a2 >> 2] | 0;
                      if (!c4) {
                        c4 = 0;
                        break;
                      }
                    }
                    while (1) {
                      f2 = c4 + 20 | 0;
                      d2 = b[f2 >> 2] | 0;
                      if (!d2) {
                        f2 = c4 + 16 | 0;
                        d2 = b[f2 >> 2] | 0;
                        if (!d2) {
                          break;
                        } else {
                          c4 = d2;
                          a2 = f2;
                        }
                      } else {
                        c4 = d2;
                        a2 = f2;
                      }
                    }
                    b[a2 >> 2] = 0;
                  } else {
                    v3 = b[i + 8 >> 2] | 0;
                    b[v3 + 12 >> 2] = c4;
                    b[c4 + 8 >> 2] = v3;
                  }
                } while (0);
                do {
                  if (g2) {
                    a2 = b[i + 28 >> 2] | 0;
                    d2 = 23732 + (a2 << 2) | 0;
                    if ((i | 0) == (b[d2 >> 2] | 0)) {
                      b[d2 >> 2] = c4;
                      if (!c4) {
                        e3 = e3 & ~(1 << a2);
                        b[5858] = e3;
                        break;
                      }
                    } else {
                      v3 = g2 + 16 | 0;
                      b[((b[v3 >> 2] | 0) == (i | 0) ? v3 : g2 + 20 | 0) >> 2] = c4;
                      if (!c4) {
                        break;
                      }
                    }
                    b[c4 + 24 >> 2] = g2;
                    a2 = b[i + 16 >> 2] | 0;
                    if (a2 | 0) {
                      b[c4 + 16 >> 2] = a2;
                      b[a2 + 24 >> 2] = c4;
                    }
                    a2 = b[i + 20 >> 2] | 0;
                    if (a2) {
                      b[c4 + 20 >> 2] = a2;
                      b[a2 + 24 >> 2] = c4;
                    }
                  }
                } while (0);
                b: do {
                  if (h >>> 0 < 16) {
                    v3 = h + k | 0;
                    b[i + 4 >> 2] = v3 | 3;
                    v3 = i + v3 + 4 | 0;
                    b[v3 >> 2] = b[v3 >> 2] | 1;
                  } else {
                    b[i + 4 >> 2] = k | 3;
                    b[l + 4 >> 2] = h | 1;
                    b[l + h >> 2] = h;
                    c4 = h >>> 3;
                    if (h >>> 0 < 256) {
                      d2 = 23468 + (c4 << 1 << 2) | 0;
                      a2 = b[5857] | 0;
                      c4 = 1 << c4;
                      if (!(a2 & c4)) {
                        b[5857] = a2 | c4;
                        c4 = d2;
                        a2 = d2 + 8 | 0;
                      } else {
                        a2 = d2 + 8 | 0;
                        c4 = b[a2 >> 2] | 0;
                      }
                      b[a2 >> 2] = l;
                      b[c4 + 12 >> 2] = l;
                      b[l + 8 >> 2] = c4;
                      b[l + 12 >> 2] = d2;
                      break;
                    }
                    c4 = h >>> 8;
                    if (c4) {
                      if (h >>> 0 > 16777215) {
                        d2 = 31;
                      } else {
                        u5 = (c4 + 1048320 | 0) >>> 16 & 8;
                        v3 = c4 << u5;
                        t4 = (v3 + 520192 | 0) >>> 16 & 4;
                        v3 = v3 << t4;
                        d2 = (v3 + 245760 | 0) >>> 16 & 2;
                        d2 = 14 - (t4 | u5 | d2) + (v3 << d2 >>> 15) | 0;
                        d2 = h >>> (d2 + 7 | 0) & 1 | d2 << 1;
                      }
                    } else {
                      d2 = 0;
                    }
                    c4 = 23732 + (d2 << 2) | 0;
                    b[l + 28 >> 2] = d2;
                    a2 = l + 16 | 0;
                    b[a2 + 4 >> 2] = 0;
                    b[a2 >> 2] = 0;
                    a2 = 1 << d2;
                    if (!(e3 & a2)) {
                      b[5858] = e3 | a2;
                      b[c4 >> 2] = l;
                      b[l + 24 >> 2] = c4;
                      b[l + 12 >> 2] = l;
                      b[l + 8 >> 2] = l;
                      break;
                    }
                    c4 = b[c4 >> 2] | 0;
                    c: do {
                      if ((b[c4 + 4 >> 2] & -8 | 0) != (h | 0)) {
                        e3 = h << ((d2 | 0) == 31 ? 0 : 25 - (d2 >>> 1) | 0);
                        while (1) {
                          d2 = c4 + 16 + (e3 >>> 31 << 2) | 0;
                          a2 = b[d2 >> 2] | 0;
                          if (!a2) {
                            break;
                          }
                          if ((b[a2 + 4 >> 2] & -8 | 0) == (h | 0)) {
                            c4 = a2;
                            break c;
                          } else {
                            e3 = e3 << 1;
                            c4 = a2;
                          }
                        }
                        b[d2 >> 2] = l;
                        b[l + 24 >> 2] = c4;
                        b[l + 12 >> 2] = l;
                        b[l + 8 >> 2] = l;
                        break b;
                      }
                    } while (0);
                    u5 = c4 + 8 | 0;
                    v3 = b[u5 >> 2] | 0;
                    b[v3 + 12 >> 2] = l;
                    b[u5 >> 2] = l;
                    b[l + 8 >> 2] = v3;
                    b[l + 12 >> 2] = c4;
                    b[l + 24 >> 2] = 0;
                  }
                } while (0);
                v3 = i + 8 | 0;
                T = w2;
                return v3 | 0;
              } else {
                m = k;
              }
            } else {
              m = k;
            }
          } else {
            m = -1;
          }
        } while (0);
        d2 = b[5859] | 0;
        if (d2 >>> 0 >= m >>> 0) {
          c4 = d2 - m | 0;
          a2 = b[5862] | 0;
          if (c4 >>> 0 > 15) {
            v3 = a2 + m | 0;
            b[5862] = v3;
            b[5859] = c4;
            b[v3 + 4 >> 2] = c4 | 1;
            b[a2 + d2 >> 2] = c4;
            b[a2 + 4 >> 2] = m | 3;
          } else {
            b[5859] = 0;
            b[5862] = 0;
            b[a2 + 4 >> 2] = d2 | 3;
            v3 = a2 + d2 + 4 | 0;
            b[v3 >> 2] = b[v3 >> 2] | 1;
          }
          v3 = a2 + 8 | 0;
          T = w2;
          return v3 | 0;
        }
        h = b[5860] | 0;
        if (h >>> 0 > m >>> 0) {
          t4 = h - m | 0;
          b[5860] = t4;
          v3 = b[5863] | 0;
          u5 = v3 + m | 0;
          b[5863] = u5;
          b[u5 + 4 >> 2] = t4 | 1;
          b[v3 + 4 >> 2] = m | 3;
          v3 = v3 + 8 | 0;
          T = w2;
          return v3 | 0;
        }
        if (!(b[5975] | 0)) {
          b[5977] = 4096;
          b[5976] = 4096;
          b[5978] = -1;
          b[5979] = -1;
          b[5980] = 0;
          b[5968] = 0;
          b[5975] = n & -16 ^ 1431655768;
          a2 = 4096;
        } else {
          a2 = b[5977] | 0;
        }
        i = m + 48 | 0;
        j = m + 47 | 0;
        g2 = a2 + j | 0;
        f2 = 0 - a2 | 0;
        k = g2 & f2;
        if (k >>> 0 <= m >>> 0) {
          v3 = 0;
          T = w2;
          return v3 | 0;
        }
        a2 = b[5967] | 0;
        if (a2 | 0 ? (l = b[5965] | 0, n = l + k | 0, n >>> 0 <= l >>> 0 | n >>> 0 > a2 >>> 0) : 0) {
          v3 = 0;
          T = w2;
          return v3 | 0;
        }
        d: do {
          if (!(b[5968] & 4)) {
            d2 = b[5863] | 0;
            e: do {
              if (d2) {
                e3 = 23876;
                while (1) {
                  n = b[e3 >> 2] | 0;
                  if (n >>> 0 <= d2 >>> 0 ? (n + (b[e3 + 4 >> 2] | 0) | 0) >>> 0 > d2 >>> 0 : 0) {
                    break;
                  }
                  a2 = b[e3 + 8 >> 2] | 0;
                  if (!a2) {
                    q2 = 128;
                    break e;
                  } else {
                    e3 = a2;
                  }
                }
                c4 = g2 - h & f2;
                if (c4 >>> 0 < 2147483647) {
                  a2 = Dd(c4 | 0) | 0;
                  if ((a2 | 0) == ((b[e3 >> 2] | 0) + (b[e3 + 4 >> 2] | 0) | 0)) {
                    if ((a2 | 0) != (-1 | 0)) {
                      h = c4;
                      g2 = a2;
                      q2 = 145;
                      break d;
                    }
                  } else {
                    e3 = a2;
                    q2 = 136;
                  }
                } else {
                  c4 = 0;
                }
              } else {
                q2 = 128;
              }
            } while (0);
            do {
              if ((q2 | 0) == 128) {
                d2 = Dd(0) | 0;
                if ((d2 | 0) != (-1 | 0) ? (c4 = d2, o = b[5976] | 0, p2 = o + -1 | 0, c4 = ((p2 & c4 | 0) == 0 ? 0 : (p2 + c4 & 0 - o) - c4 | 0) + k | 0, o = b[5965] | 0, p2 = c4 + o | 0, c4 >>> 0 > m >>> 0 & c4 >>> 0 < 2147483647) : 0) {
                  n = b[5967] | 0;
                  if (n | 0 ? p2 >>> 0 <= o >>> 0 | p2 >>> 0 > n >>> 0 : 0) {
                    c4 = 0;
                    break;
                  }
                  a2 = Dd(c4 | 0) | 0;
                  if ((a2 | 0) == (d2 | 0)) {
                    h = c4;
                    g2 = d2;
                    q2 = 145;
                    break d;
                  } else {
                    e3 = a2;
                    q2 = 136;
                  }
                } else {
                  c4 = 0;
                }
              }
            } while (0);
            do {
              if ((q2 | 0) == 136) {
                d2 = 0 - c4 | 0;
                if (!(i >>> 0 > c4 >>> 0 & (c4 >>> 0 < 2147483647 & (e3 | 0) != (-1 | 0)))) {
                  if ((e3 | 0) == (-1 | 0)) {
                    c4 = 0;
                    break;
                  } else {
                    h = c4;
                    g2 = e3;
                    q2 = 145;
                    break d;
                  }
                }
                a2 = b[5977] | 0;
                a2 = j - c4 + a2 & 0 - a2;
                if (a2 >>> 0 >= 2147483647) {
                  h = c4;
                  g2 = e3;
                  q2 = 145;
                  break d;
                }
                if ((Dd(a2 | 0) | 0) == (-1 | 0)) {
                  Dd(d2 | 0) | 0;
                  c4 = 0;
                  break;
                } else {
                  h = a2 + c4 | 0;
                  g2 = e3;
                  q2 = 145;
                  break d;
                }
              }
            } while (0);
            b[5968] = b[5968] | 4;
            q2 = 143;
          } else {
            c4 = 0;
            q2 = 143;
          }
        } while (0);
        if (((q2 | 0) == 143 ? k >>> 0 < 2147483647 : 0) ? (t4 = Dd(k | 0) | 0, p2 = Dd(0) | 0, r2 = p2 - t4 | 0, s2 = r2 >>> 0 > (m + 40 | 0) >>> 0, !((t4 | 0) == (-1 | 0) | s2 ^ 1 | t4 >>> 0 < p2 >>> 0 & ((t4 | 0) != (-1 | 0) & (p2 | 0) != (-1 | 0)) ^ 1)) : 0) {
          h = s2 ? r2 : c4;
          g2 = t4;
          q2 = 145;
        }
        if ((q2 | 0) == 145) {
          c4 = (b[5965] | 0) + h | 0;
          b[5965] = c4;
          if (c4 >>> 0 > (b[5966] | 0) >>> 0) {
            b[5966] = c4;
          }
          j = b[5863] | 0;
          f: do {
            if (j) {
              c4 = 23876;
              while (1) {
                a2 = b[c4 >> 2] | 0;
                d2 = b[c4 + 4 >> 2] | 0;
                if ((g2 | 0) == (a2 + d2 | 0)) {
                  q2 = 154;
                  break;
                }
                e3 = b[c4 + 8 >> 2] | 0;
                if (!e3) {
                  break;
                } else {
                  c4 = e3;
                }
              }
              if (((q2 | 0) == 154 ? (u5 = c4 + 4 | 0, (b[c4 + 12 >> 2] & 8 | 0) == 0) : 0) ? g2 >>> 0 > j >>> 0 & a2 >>> 0 <= j >>> 0 : 0) {
                b[u5 >> 2] = d2 + h;
                v3 = (b[5860] | 0) + h | 0;
                t4 = j + 8 | 0;
                t4 = (t4 & 7 | 0) == 0 ? 0 : 0 - t4 & 7;
                u5 = j + t4 | 0;
                t4 = v3 - t4 | 0;
                b[5863] = u5;
                b[5860] = t4;
                b[u5 + 4 >> 2] = t4 | 1;
                b[j + v3 + 4 >> 2] = 40;
                b[5864] = b[5979];
                break;
              }
              if (g2 >>> 0 < (b[5861] | 0) >>> 0) {
                b[5861] = g2;
              }
              d2 = g2 + h | 0;
              c4 = 23876;
              while (1) {
                if ((b[c4 >> 2] | 0) == (d2 | 0)) {
                  q2 = 162;
                  break;
                }
                a2 = b[c4 + 8 >> 2] | 0;
                if (!a2) {
                  break;
                } else {
                  c4 = a2;
                }
              }
              if ((q2 | 0) == 162 ? (b[c4 + 12 >> 2] & 8 | 0) == 0 : 0) {
                b[c4 >> 2] = g2;
                l = c4 + 4 | 0;
                b[l >> 2] = (b[l >> 2] | 0) + h;
                l = g2 + 8 | 0;
                l = g2 + ((l & 7 | 0) == 0 ? 0 : 0 - l & 7) | 0;
                c4 = d2 + 8 | 0;
                c4 = d2 + ((c4 & 7 | 0) == 0 ? 0 : 0 - c4 & 7) | 0;
                k = l + m | 0;
                i = c4 - l - m | 0;
                b[l + 4 >> 2] = m | 3;
                g: do {
                  if ((j | 0) == (c4 | 0)) {
                    v3 = (b[5860] | 0) + i | 0;
                    b[5860] = v3;
                    b[5863] = k;
                    b[k + 4 >> 2] = v3 | 1;
                  } else {
                    if ((b[5862] | 0) == (c4 | 0)) {
                      v3 = (b[5859] | 0) + i | 0;
                      b[5859] = v3;
                      b[5862] = k;
                      b[k + 4 >> 2] = v3 | 1;
                      b[k + v3 >> 2] = v3;
                      break;
                    }
                    a2 = b[c4 + 4 >> 2] | 0;
                    if ((a2 & 3 | 0) == 1) {
                      h = a2 & -8;
                      e3 = a2 >>> 3;
                      h: do {
                        if (a2 >>> 0 < 256) {
                          a2 = b[c4 + 8 >> 2] | 0;
                          d2 = b[c4 + 12 >> 2] | 0;
                          if ((d2 | 0) == (a2 | 0)) {
                            b[5857] = b[5857] & ~(1 << e3);
                            break;
                          } else {
                            b[a2 + 12 >> 2] = d2;
                            b[d2 + 8 >> 2] = a2;
                            break;
                          }
                        } else {
                          g2 = b[c4 + 24 >> 2] | 0;
                          a2 = b[c4 + 12 >> 2] | 0;
                          do {
                            if ((a2 | 0) == (c4 | 0)) {
                              d2 = c4 + 16 | 0;
                              e3 = d2 + 4 | 0;
                              a2 = b[e3 >> 2] | 0;
                              if (!a2) {
                                a2 = b[d2 >> 2] | 0;
                                if (!a2) {
                                  a2 = 0;
                                  break;
                                }
                              } else {
                                d2 = e3;
                              }
                              while (1) {
                                f2 = a2 + 20 | 0;
                                e3 = b[f2 >> 2] | 0;
                                if (!e3) {
                                  f2 = a2 + 16 | 0;
                                  e3 = b[f2 >> 2] | 0;
                                  if (!e3) {
                                    break;
                                  } else {
                                    a2 = e3;
                                    d2 = f2;
                                  }
                                } else {
                                  a2 = e3;
                                  d2 = f2;
                                }
                              }
                              b[d2 >> 2] = 0;
                            } else {
                              v3 = b[c4 + 8 >> 2] | 0;
                              b[v3 + 12 >> 2] = a2;
                              b[a2 + 8 >> 2] = v3;
                            }
                          } while (0);
                          if (!g2) {
                            break;
                          }
                          d2 = b[c4 + 28 >> 2] | 0;
                          e3 = 23732 + (d2 << 2) | 0;
                          do {
                            if ((b[e3 >> 2] | 0) != (c4 | 0)) {
                              v3 = g2 + 16 | 0;
                              b[((b[v3 >> 2] | 0) == (c4 | 0) ? v3 : g2 + 20 | 0) >> 2] = a2;
                              if (!a2) {
                                break h;
                              }
                            } else {
                              b[e3 >> 2] = a2;
                              if (a2 | 0) {
                                break;
                              }
                              b[5858] = b[5858] & ~(1 << d2);
                              break h;
                            }
                          } while (0);
                          b[a2 + 24 >> 2] = g2;
                          d2 = c4 + 16 | 0;
                          e3 = b[d2 >> 2] | 0;
                          if (e3 | 0) {
                            b[a2 + 16 >> 2] = e3;
                            b[e3 + 24 >> 2] = a2;
                          }
                          d2 = b[d2 + 4 >> 2] | 0;
                          if (!d2) {
                            break;
                          }
                          b[a2 + 20 >> 2] = d2;
                          b[d2 + 24 >> 2] = a2;
                        }
                      } while (0);
                      c4 = c4 + h | 0;
                      f2 = h + i | 0;
                    } else {
                      f2 = i;
                    }
                    c4 = c4 + 4 | 0;
                    b[c4 >> 2] = b[c4 >> 2] & -2;
                    b[k + 4 >> 2] = f2 | 1;
                    b[k + f2 >> 2] = f2;
                    c4 = f2 >>> 3;
                    if (f2 >>> 0 < 256) {
                      d2 = 23468 + (c4 << 1 << 2) | 0;
                      a2 = b[5857] | 0;
                      c4 = 1 << c4;
                      if (!(a2 & c4)) {
                        b[5857] = a2 | c4;
                        c4 = d2;
                        a2 = d2 + 8 | 0;
                      } else {
                        a2 = d2 + 8 | 0;
                        c4 = b[a2 >> 2] | 0;
                      }
                      b[a2 >> 2] = k;
                      b[c4 + 12 >> 2] = k;
                      b[k + 8 >> 2] = c4;
                      b[k + 12 >> 2] = d2;
                      break;
                    }
                    c4 = f2 >>> 8;
                    do {
                      if (!c4) {
                        e3 = 0;
                      } else {
                        if (f2 >>> 0 > 16777215) {
                          e3 = 31;
                          break;
                        }
                        u5 = (c4 + 1048320 | 0) >>> 16 & 8;
                        v3 = c4 << u5;
                        t4 = (v3 + 520192 | 0) >>> 16 & 4;
                        v3 = v3 << t4;
                        e3 = (v3 + 245760 | 0) >>> 16 & 2;
                        e3 = 14 - (t4 | u5 | e3) + (v3 << e3 >>> 15) | 0;
                        e3 = f2 >>> (e3 + 7 | 0) & 1 | e3 << 1;
                      }
                    } while (0);
                    c4 = 23732 + (e3 << 2) | 0;
                    b[k + 28 >> 2] = e3;
                    a2 = k + 16 | 0;
                    b[a2 + 4 >> 2] = 0;
                    b[a2 >> 2] = 0;
                    a2 = b[5858] | 0;
                    d2 = 1 << e3;
                    if (!(a2 & d2)) {
                      b[5858] = a2 | d2;
                      b[c4 >> 2] = k;
                      b[k + 24 >> 2] = c4;
                      b[k + 12 >> 2] = k;
                      b[k + 8 >> 2] = k;
                      break;
                    }
                    c4 = b[c4 >> 2] | 0;
                    i: do {
                      if ((b[c4 + 4 >> 2] & -8 | 0) != (f2 | 0)) {
                        e3 = f2 << ((e3 | 0) == 31 ? 0 : 25 - (e3 >>> 1) | 0);
                        while (1) {
                          d2 = c4 + 16 + (e3 >>> 31 << 2) | 0;
                          a2 = b[d2 >> 2] | 0;
                          if (!a2) {
                            break;
                          }
                          if ((b[a2 + 4 >> 2] & -8 | 0) == (f2 | 0)) {
                            c4 = a2;
                            break i;
                          } else {
                            e3 = e3 << 1;
                            c4 = a2;
                          }
                        }
                        b[d2 >> 2] = k;
                        b[k + 24 >> 2] = c4;
                        b[k + 12 >> 2] = k;
                        b[k + 8 >> 2] = k;
                        break g;
                      }
                    } while (0);
                    u5 = c4 + 8 | 0;
                    v3 = b[u5 >> 2] | 0;
                    b[v3 + 12 >> 2] = k;
                    b[u5 >> 2] = k;
                    b[k + 8 >> 2] = v3;
                    b[k + 12 >> 2] = c4;
                    b[k + 24 >> 2] = 0;
                  }
                } while (0);
                v3 = l + 8 | 0;
                T = w2;
                return v3 | 0;
              }
              c4 = 23876;
              while (1) {
                a2 = b[c4 >> 2] | 0;
                if (a2 >>> 0 <= j >>> 0 ? (v3 = a2 + (b[c4 + 4 >> 2] | 0) | 0, v3 >>> 0 > j >>> 0) : 0) {
                  break;
                }
                c4 = b[c4 + 8 >> 2] | 0;
              }
              f2 = v3 + -47 | 0;
              a2 = f2 + 8 | 0;
              a2 = f2 + ((a2 & 7 | 0) == 0 ? 0 : 0 - a2 & 7) | 0;
              f2 = j + 16 | 0;
              a2 = a2 >>> 0 < f2 >>> 0 ? j : a2;
              c4 = a2 + 8 | 0;
              d2 = h + -40 | 0;
              t4 = g2 + 8 | 0;
              t4 = (t4 & 7 | 0) == 0 ? 0 : 0 - t4 & 7;
              u5 = g2 + t4 | 0;
              t4 = d2 - t4 | 0;
              b[5863] = u5;
              b[5860] = t4;
              b[u5 + 4 >> 2] = t4 | 1;
              b[g2 + d2 + 4 >> 2] = 40;
              b[5864] = b[5979];
              d2 = a2 + 4 | 0;
              b[d2 >> 2] = 27;
              b[c4 >> 2] = b[5969];
              b[c4 + 4 >> 2] = b[5970];
              b[c4 + 8 >> 2] = b[5971];
              b[c4 + 12 >> 2] = b[5972];
              b[5969] = g2;
              b[5970] = h;
              b[5972] = 0;
              b[5971] = c4;
              c4 = a2 + 24 | 0;
              do {
                u5 = c4;
                c4 = c4 + 4 | 0;
                b[c4 >> 2] = 7;
              } while ((u5 + 8 | 0) >>> 0 < v3 >>> 0);
              if ((a2 | 0) != (j | 0)) {
                g2 = a2 - j | 0;
                b[d2 >> 2] = b[d2 >> 2] & -2;
                b[j + 4 >> 2] = g2 | 1;
                b[a2 >> 2] = g2;
                c4 = g2 >>> 3;
                if (g2 >>> 0 < 256) {
                  d2 = 23468 + (c4 << 1 << 2) | 0;
                  a2 = b[5857] | 0;
                  c4 = 1 << c4;
                  if (!(a2 & c4)) {
                    b[5857] = a2 | c4;
                    c4 = d2;
                    a2 = d2 + 8 | 0;
                  } else {
                    a2 = d2 + 8 | 0;
                    c4 = b[a2 >> 2] | 0;
                  }
                  b[a2 >> 2] = j;
                  b[c4 + 12 >> 2] = j;
                  b[j + 8 >> 2] = c4;
                  b[j + 12 >> 2] = d2;
                  break;
                }
                c4 = g2 >>> 8;
                if (c4) {
                  if (g2 >>> 0 > 16777215) {
                    e3 = 31;
                  } else {
                    u5 = (c4 + 1048320 | 0) >>> 16 & 8;
                    v3 = c4 << u5;
                    t4 = (v3 + 520192 | 0) >>> 16 & 4;
                    v3 = v3 << t4;
                    e3 = (v3 + 245760 | 0) >>> 16 & 2;
                    e3 = 14 - (t4 | u5 | e3) + (v3 << e3 >>> 15) | 0;
                    e3 = g2 >>> (e3 + 7 | 0) & 1 | e3 << 1;
                  }
                } else {
                  e3 = 0;
                }
                d2 = 23732 + (e3 << 2) | 0;
                b[j + 28 >> 2] = e3;
                b[j + 20 >> 2] = 0;
                b[f2 >> 2] = 0;
                c4 = b[5858] | 0;
                a2 = 1 << e3;
                if (!(c4 & a2)) {
                  b[5858] = c4 | a2;
                  b[d2 >> 2] = j;
                  b[j + 24 >> 2] = d2;
                  b[j + 12 >> 2] = j;
                  b[j + 8 >> 2] = j;
                  break;
                }
                c4 = b[d2 >> 2] | 0;
                j: do {
                  if ((b[c4 + 4 >> 2] & -8 | 0) != (g2 | 0)) {
                    e3 = g2 << ((e3 | 0) == 31 ? 0 : 25 - (e3 >>> 1) | 0);
                    while (1) {
                      d2 = c4 + 16 + (e3 >>> 31 << 2) | 0;
                      a2 = b[d2 >> 2] | 0;
                      if (!a2) {
                        break;
                      }
                      if ((b[a2 + 4 >> 2] & -8 | 0) == (g2 | 0)) {
                        c4 = a2;
                        break j;
                      } else {
                        e3 = e3 << 1;
                        c4 = a2;
                      }
                    }
                    b[d2 >> 2] = j;
                    b[j + 24 >> 2] = c4;
                    b[j + 12 >> 2] = j;
                    b[j + 8 >> 2] = j;
                    break f;
                  }
                } while (0);
                u5 = c4 + 8 | 0;
                v3 = b[u5 >> 2] | 0;
                b[v3 + 12 >> 2] = j;
                b[u5 >> 2] = j;
                b[j + 8 >> 2] = v3;
                b[j + 12 >> 2] = c4;
                b[j + 24 >> 2] = 0;
              }
            } else {
              v3 = b[5861] | 0;
              if ((v3 | 0) == 0 | g2 >>> 0 < v3 >>> 0) {
                b[5861] = g2;
              }
              b[5969] = g2;
              b[5970] = h;
              b[5972] = 0;
              b[5866] = b[5975];
              b[5865] = -1;
              b[5870] = 23468;
              b[5869] = 23468;
              b[5872] = 23476;
              b[5871] = 23476;
              b[5874] = 23484;
              b[5873] = 23484;
              b[5876] = 23492;
              b[5875] = 23492;
              b[5878] = 23500;
              b[5877] = 23500;
              b[5880] = 23508;
              b[5879] = 23508;
              b[5882] = 23516;
              b[5881] = 23516;
              b[5884] = 23524;
              b[5883] = 23524;
              b[5886] = 23532;
              b[5885] = 23532;
              b[5888] = 23540;
              b[5887] = 23540;
              b[5890] = 23548;
              b[5889] = 23548;
              b[5892] = 23556;
              b[5891] = 23556;
              b[5894] = 23564;
              b[5893] = 23564;
              b[5896] = 23572;
              b[5895] = 23572;
              b[5898] = 23580;
              b[5897] = 23580;
              b[5900] = 23588;
              b[5899] = 23588;
              b[5902] = 23596;
              b[5901] = 23596;
              b[5904] = 23604;
              b[5903] = 23604;
              b[5906] = 23612;
              b[5905] = 23612;
              b[5908] = 23620;
              b[5907] = 23620;
              b[5910] = 23628;
              b[5909] = 23628;
              b[5912] = 23636;
              b[5911] = 23636;
              b[5914] = 23644;
              b[5913] = 23644;
              b[5916] = 23652;
              b[5915] = 23652;
              b[5918] = 23660;
              b[5917] = 23660;
              b[5920] = 23668;
              b[5919] = 23668;
              b[5922] = 23676;
              b[5921] = 23676;
              b[5924] = 23684;
              b[5923] = 23684;
              b[5926] = 23692;
              b[5925] = 23692;
              b[5928] = 23700;
              b[5927] = 23700;
              b[5930] = 23708;
              b[5929] = 23708;
              b[5932] = 23716;
              b[5931] = 23716;
              v3 = h + -40 | 0;
              t4 = g2 + 8 | 0;
              t4 = (t4 & 7 | 0) == 0 ? 0 : 0 - t4 & 7;
              u5 = g2 + t4 | 0;
              t4 = v3 - t4 | 0;
              b[5863] = u5;
              b[5860] = t4;
              b[u5 + 4 >> 2] = t4 | 1;
              b[g2 + v3 + 4 >> 2] = 40;
              b[5864] = b[5979];
            }
          } while (0);
          c4 = b[5860] | 0;
          if (c4 >>> 0 > m >>> 0) {
            t4 = c4 - m | 0;
            b[5860] = t4;
            v3 = b[5863] | 0;
            u5 = v3 + m | 0;
            b[5863] = u5;
            b[u5 + 4 >> 2] = t4 | 1;
            b[v3 + 4 >> 2] = m | 3;
            v3 = v3 + 8 | 0;
            T = w2;
            return v3 | 0;
          }
        }
        v3 = fd() | 0;
        b[v3 >> 2] = 12;
        v3 = 0;
        T = w2;
        return v3 | 0;
      }
      function jd(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
        if (!a2) {
          return;
        }
        d2 = a2 + -8 | 0;
        f2 = b[5861] | 0;
        a2 = b[a2 + -4 >> 2] | 0;
        c4 = a2 & -8;
        j = d2 + c4 | 0;
        do {
          if (!(a2 & 1)) {
            e3 = b[d2 >> 2] | 0;
            if (!(a2 & 3)) {
              return;
            }
            h = d2 + (0 - e3) | 0;
            g2 = e3 + c4 | 0;
            if (h >>> 0 < f2 >>> 0) {
              return;
            }
            if ((b[5862] | 0) == (h | 0)) {
              a2 = j + 4 | 0;
              c4 = b[a2 >> 2] | 0;
              if ((c4 & 3 | 0) != 3) {
                i = h;
                c4 = g2;
                break;
              }
              b[5859] = g2;
              b[a2 >> 2] = c4 & -2;
              b[h + 4 >> 2] = g2 | 1;
              b[h + g2 >> 2] = g2;
              return;
            }
            d2 = e3 >>> 3;
            if (e3 >>> 0 < 256) {
              a2 = b[h + 8 >> 2] | 0;
              c4 = b[h + 12 >> 2] | 0;
              if ((c4 | 0) == (a2 | 0)) {
                b[5857] = b[5857] & ~(1 << d2);
                i = h;
                c4 = g2;
                break;
              } else {
                b[a2 + 12 >> 2] = c4;
                b[c4 + 8 >> 2] = a2;
                i = h;
                c4 = g2;
                break;
              }
            }
            f2 = b[h + 24 >> 2] | 0;
            a2 = b[h + 12 >> 2] | 0;
            do {
              if ((a2 | 0) == (h | 0)) {
                c4 = h + 16 | 0;
                d2 = c4 + 4 | 0;
                a2 = b[d2 >> 2] | 0;
                if (!a2) {
                  a2 = b[c4 >> 2] | 0;
                  if (!a2) {
                    a2 = 0;
                    break;
                  }
                } else {
                  c4 = d2;
                }
                while (1) {
                  e3 = a2 + 20 | 0;
                  d2 = b[e3 >> 2] | 0;
                  if (!d2) {
                    e3 = a2 + 16 | 0;
                    d2 = b[e3 >> 2] | 0;
                    if (!d2) {
                      break;
                    } else {
                      a2 = d2;
                      c4 = e3;
                    }
                  } else {
                    a2 = d2;
                    c4 = e3;
                  }
                }
                b[c4 >> 2] = 0;
              } else {
                i = b[h + 8 >> 2] | 0;
                b[i + 12 >> 2] = a2;
                b[a2 + 8 >> 2] = i;
              }
            } while (0);
            if (f2) {
              c4 = b[h + 28 >> 2] | 0;
              d2 = 23732 + (c4 << 2) | 0;
              if ((b[d2 >> 2] | 0) == (h | 0)) {
                b[d2 >> 2] = a2;
                if (!a2) {
                  b[5858] = b[5858] & ~(1 << c4);
                  i = h;
                  c4 = g2;
                  break;
                }
              } else {
                i = f2 + 16 | 0;
                b[((b[i >> 2] | 0) == (h | 0) ? i : f2 + 20 | 0) >> 2] = a2;
                if (!a2) {
                  i = h;
                  c4 = g2;
                  break;
                }
              }
              b[a2 + 24 >> 2] = f2;
              c4 = h + 16 | 0;
              d2 = b[c4 >> 2] | 0;
              if (d2 | 0) {
                b[a2 + 16 >> 2] = d2;
                b[d2 + 24 >> 2] = a2;
              }
              c4 = b[c4 + 4 >> 2] | 0;
              if (c4) {
                b[a2 + 20 >> 2] = c4;
                b[c4 + 24 >> 2] = a2;
                i = h;
                c4 = g2;
              } else {
                i = h;
                c4 = g2;
              }
            } else {
              i = h;
              c4 = g2;
            }
          } else {
            i = d2;
            h = d2;
          }
        } while (0);
        if (h >>> 0 >= j >>> 0) {
          return;
        }
        a2 = j + 4 | 0;
        e3 = b[a2 >> 2] | 0;
        if (!(e3 & 1)) {
          return;
        }
        if (!(e3 & 2)) {
          if ((b[5863] | 0) == (j | 0)) {
            j = (b[5860] | 0) + c4 | 0;
            b[5860] = j;
            b[5863] = i;
            b[i + 4 >> 2] = j | 1;
            if ((i | 0) != (b[5862] | 0)) {
              return;
            }
            b[5862] = 0;
            b[5859] = 0;
            return;
          }
          if ((b[5862] | 0) == (j | 0)) {
            j = (b[5859] | 0) + c4 | 0;
            b[5859] = j;
            b[5862] = h;
            b[i + 4 >> 2] = j | 1;
            b[h + j >> 2] = j;
            return;
          }
          f2 = (e3 & -8) + c4 | 0;
          d2 = e3 >>> 3;
          do {
            if (e3 >>> 0 < 256) {
              c4 = b[j + 8 >> 2] | 0;
              a2 = b[j + 12 >> 2] | 0;
              if ((a2 | 0) == (c4 | 0)) {
                b[5857] = b[5857] & ~(1 << d2);
                break;
              } else {
                b[c4 + 12 >> 2] = a2;
                b[a2 + 8 >> 2] = c4;
                break;
              }
            } else {
              g2 = b[j + 24 >> 2] | 0;
              a2 = b[j + 12 >> 2] | 0;
              do {
                if ((a2 | 0) == (j | 0)) {
                  c4 = j + 16 | 0;
                  d2 = c4 + 4 | 0;
                  a2 = b[d2 >> 2] | 0;
                  if (!a2) {
                    a2 = b[c4 >> 2] | 0;
                    if (!a2) {
                      d2 = 0;
                      break;
                    }
                  } else {
                    c4 = d2;
                  }
                  while (1) {
                    e3 = a2 + 20 | 0;
                    d2 = b[e3 >> 2] | 0;
                    if (!d2) {
                      e3 = a2 + 16 | 0;
                      d2 = b[e3 >> 2] | 0;
                      if (!d2) {
                        break;
                      } else {
                        a2 = d2;
                        c4 = e3;
                      }
                    } else {
                      a2 = d2;
                      c4 = e3;
                    }
                  }
                  b[c4 >> 2] = 0;
                  d2 = a2;
                } else {
                  d2 = b[j + 8 >> 2] | 0;
                  b[d2 + 12 >> 2] = a2;
                  b[a2 + 8 >> 2] = d2;
                  d2 = a2;
                }
              } while (0);
              if (g2 | 0) {
                a2 = b[j + 28 >> 2] | 0;
                c4 = 23732 + (a2 << 2) | 0;
                if ((b[c4 >> 2] | 0) == (j | 0)) {
                  b[c4 >> 2] = d2;
                  if (!d2) {
                    b[5858] = b[5858] & ~(1 << a2);
                    break;
                  }
                } else {
                  e3 = g2 + 16 | 0;
                  b[((b[e3 >> 2] | 0) == (j | 0) ? e3 : g2 + 20 | 0) >> 2] = d2;
                  if (!d2) {
                    break;
                  }
                }
                b[d2 + 24 >> 2] = g2;
                a2 = j + 16 | 0;
                c4 = b[a2 >> 2] | 0;
                if (c4 | 0) {
                  b[d2 + 16 >> 2] = c4;
                  b[c4 + 24 >> 2] = d2;
                }
                a2 = b[a2 + 4 >> 2] | 0;
                if (a2 | 0) {
                  b[d2 + 20 >> 2] = a2;
                  b[a2 + 24 >> 2] = d2;
                }
              }
            }
          } while (0);
          b[i + 4 >> 2] = f2 | 1;
          b[h + f2 >> 2] = f2;
          if ((i | 0) == (b[5862] | 0)) {
            b[5859] = f2;
            return;
          }
        } else {
          b[a2 >> 2] = e3 & -2;
          b[i + 4 >> 2] = c4 | 1;
          b[h + c4 >> 2] = c4;
          f2 = c4;
        }
        a2 = f2 >>> 3;
        if (f2 >>> 0 < 256) {
          d2 = 23468 + (a2 << 1 << 2) | 0;
          c4 = b[5857] | 0;
          a2 = 1 << a2;
          if (!(c4 & a2)) {
            b[5857] = c4 | a2;
            a2 = d2;
            c4 = d2 + 8 | 0;
          } else {
            c4 = d2 + 8 | 0;
            a2 = b[c4 >> 2] | 0;
          }
          b[c4 >> 2] = i;
          b[a2 + 12 >> 2] = i;
          b[i + 8 >> 2] = a2;
          b[i + 12 >> 2] = d2;
          return;
        }
        a2 = f2 >>> 8;
        if (a2) {
          if (f2 >>> 0 > 16777215) {
            e3 = 31;
          } else {
            h = (a2 + 1048320 | 0) >>> 16 & 8;
            j = a2 << h;
            g2 = (j + 520192 | 0) >>> 16 & 4;
            j = j << g2;
            e3 = (j + 245760 | 0) >>> 16 & 2;
            e3 = 14 - (g2 | h | e3) + (j << e3 >>> 15) | 0;
            e3 = f2 >>> (e3 + 7 | 0) & 1 | e3 << 1;
          }
        } else {
          e3 = 0;
        }
        a2 = 23732 + (e3 << 2) | 0;
        b[i + 28 >> 2] = e3;
        b[i + 20 >> 2] = 0;
        b[i + 16 >> 2] = 0;
        c4 = b[5858] | 0;
        d2 = 1 << e3;
        a: do {
          if (!(c4 & d2)) {
            b[5858] = c4 | d2;
            b[a2 >> 2] = i;
            b[i + 24 >> 2] = a2;
            b[i + 12 >> 2] = i;
            b[i + 8 >> 2] = i;
          } else {
            a2 = b[a2 >> 2] | 0;
            b: do {
              if ((b[a2 + 4 >> 2] & -8 | 0) != (f2 | 0)) {
                e3 = f2 << ((e3 | 0) == 31 ? 0 : 25 - (e3 >>> 1) | 0);
                while (1) {
                  d2 = a2 + 16 + (e3 >>> 31 << 2) | 0;
                  c4 = b[d2 >> 2] | 0;
                  if (!c4) {
                    break;
                  }
                  if ((b[c4 + 4 >> 2] & -8 | 0) == (f2 | 0)) {
                    a2 = c4;
                    break b;
                  } else {
                    e3 = e3 << 1;
                    a2 = c4;
                  }
                }
                b[d2 >> 2] = i;
                b[i + 24 >> 2] = a2;
                b[i + 12 >> 2] = i;
                b[i + 8 >> 2] = i;
                break a;
              }
            } while (0);
            h = a2 + 8 | 0;
            j = b[h >> 2] | 0;
            b[j + 12 >> 2] = i;
            b[h >> 2] = i;
            b[i + 8 >> 2] = j;
            b[i + 12 >> 2] = a2;
            b[i + 24 >> 2] = 0;
          }
        } while (0);
        j = (b[5865] | 0) + -1 | 0;
        b[5865] = j;
        if (j | 0) {
          return;
        }
        a2 = 23884;
        while (1) {
          a2 = b[a2 >> 2] | 0;
          if (!a2) {
            break;
          } else {
            a2 = a2 + 8 | 0;
          }
        }
        b[5865] = -1;
        return;
      }
      function kd(a2, c4) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        var d2 = 0;
        if (a2) {
          d2 = B3(c4, a2) | 0;
          if ((c4 | a2) >>> 0 > 65535) {
            d2 = ((d2 >>> 0) / (a2 >>> 0) | 0 | 0) == (c4 | 0) ? d2 : -1;
          }
        } else {
          d2 = 0;
        }
        a2 = id(d2) | 0;
        if (!a2) {
          return a2 | 0;
        }
        if (!(b[a2 + -4 >> 2] & 3)) {
          return a2 | 0;
        }
        Bd(a2 | 0, 0, d2 | 0) | 0;
        return a2 | 0;
      }
      function ld(a2, b2, c4, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        c4 = a2 + c4 >>> 0;
        return (G(b2 + d2 + (c4 >>> 0 < a2 >>> 0 | 0) >>> 0 | 0), c4 | 0) | 0;
      }
      function md(a2, b2, c4, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        d2 = b2 - d2 - (c4 >>> 0 > a2 >>> 0 | 0) >>> 0;
        return (G(d2 | 0), a2 - c4 >>> 0 | 0) | 0;
      }
      function nd(a2) {
        a2 = a2 | 0;
        return (a2 ? 31 - (E2(a2 ^ a2 - 1) | 0) | 0 : 32) | 0;
      }
      function od(a2, c4, d2, e3, f2) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        f2 = f2 | 0;
        var g2 = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p2 = 0;
        l = a2;
        j = c4;
        k = j;
        h = d2;
        n = e3;
        i = n;
        if (!k) {
          g2 = (f2 | 0) != 0;
          if (!i) {
            if (g2) {
              b[f2 >> 2] = (l >>> 0) % (h >>> 0);
              b[f2 + 4 >> 2] = 0;
            }
            n = 0;
            f2 = (l >>> 0) / (h >>> 0) >>> 0;
            return (G(n | 0), f2) | 0;
          } else {
            if (!g2) {
              n = 0;
              f2 = 0;
              return (G(n | 0), f2) | 0;
            }
            b[f2 >> 2] = a2 | 0;
            b[f2 + 4 >> 2] = c4 & 0;
            n = 0;
            f2 = 0;
            return (G(n | 0), f2) | 0;
          }
        }
        g2 = (i | 0) == 0;
        do {
          if (h) {
            if (!g2) {
              g2 = (E2(i | 0) | 0) - (E2(k | 0) | 0) | 0;
              if (g2 >>> 0 <= 31) {
                m = g2 + 1 | 0;
                i = 31 - g2 | 0;
                c4 = g2 - 31 >> 31;
                h = m;
                a2 = l >>> (m >>> 0) & c4 | k << i;
                c4 = k >>> (m >>> 0) & c4;
                g2 = 0;
                i = l << i;
                break;
              }
              if (!f2) {
                n = 0;
                f2 = 0;
                return (G(n | 0), f2) | 0;
              }
              b[f2 >> 2] = a2 | 0;
              b[f2 + 4 >> 2] = j | c4 & 0;
              n = 0;
              f2 = 0;
              return (G(n | 0), f2) | 0;
            }
            g2 = h - 1 | 0;
            if (g2 & h | 0) {
              i = (E2(h | 0) | 0) + 33 - (E2(k | 0) | 0) | 0;
              p2 = 64 - i | 0;
              m = 32 - i | 0;
              j = m >> 31;
              o = i - 32 | 0;
              c4 = o >> 31;
              h = i;
              a2 = m - 1 >> 31 & k >>> (o >>> 0) | (k << m | l >>> (i >>> 0)) & c4;
              c4 = c4 & k >>> (i >>> 0);
              g2 = l << p2 & j;
              i = (k << p2 | l >>> (o >>> 0)) & j | l << m & i - 33 >> 31;
              break;
            }
            if (f2 | 0) {
              b[f2 >> 2] = g2 & l;
              b[f2 + 4 >> 2] = 0;
            }
            if ((h | 0) == 1) {
              o = j | c4 & 0;
              p2 = a2 | 0 | 0;
              return (G(o | 0), p2) | 0;
            } else {
              p2 = nd(h | 0) | 0;
              o = k >>> (p2 >>> 0) | 0;
              p2 = k << 32 - p2 | l >>> (p2 >>> 0) | 0;
              return (G(o | 0), p2) | 0;
            }
          } else {
            if (g2) {
              if (f2 | 0) {
                b[f2 >> 2] = (k >>> 0) % (h >>> 0);
                b[f2 + 4 >> 2] = 0;
              }
              o = 0;
              p2 = (k >>> 0) / (h >>> 0) >>> 0;
              return (G(o | 0), p2) | 0;
            }
            if (!l) {
              if (f2 | 0) {
                b[f2 >> 2] = 0;
                b[f2 + 4 >> 2] = (k >>> 0) % (i >>> 0);
              }
              o = 0;
              p2 = (k >>> 0) / (i >>> 0) >>> 0;
              return (G(o | 0), p2) | 0;
            }
            g2 = i - 1 | 0;
            if (!(g2 & i)) {
              if (f2 | 0) {
                b[f2 >> 2] = a2 | 0;
                b[f2 + 4 >> 2] = g2 & k | c4 & 0;
              }
              o = 0;
              p2 = k >>> ((nd(i | 0) | 0) >>> 0);
              return (G(o | 0), p2) | 0;
            }
            g2 = (E2(i | 0) | 0) - (E2(k | 0) | 0) | 0;
            if (g2 >>> 0 <= 30) {
              c4 = g2 + 1 | 0;
              i = 31 - g2 | 0;
              h = c4;
              a2 = k << i | l >>> (c4 >>> 0);
              c4 = k >>> (c4 >>> 0);
              g2 = 0;
              i = l << i;
              break;
            }
            if (!f2) {
              o = 0;
              p2 = 0;
              return (G(o | 0), p2) | 0;
            }
            b[f2 >> 2] = a2 | 0;
            b[f2 + 4 >> 2] = j | c4 & 0;
            o = 0;
            p2 = 0;
            return (G(o | 0), p2) | 0;
          }
        } while (0);
        if (!h) {
          k = i;
          j = 0;
          i = 0;
        } else {
          m = d2 | 0 | 0;
          l = n | e3 & 0;
          k = ld(m | 0, l | 0, -1, -1) | 0;
          d2 = H() | 0;
          j = i;
          i = 0;
          do {
            e3 = j;
            j = g2 >>> 31 | j << 1;
            g2 = i | g2 << 1;
            e3 = a2 << 1 | e3 >>> 31 | 0;
            n = a2 >>> 31 | c4 << 1 | 0;
            md(k | 0, d2 | 0, e3 | 0, n | 0) | 0;
            p2 = H() | 0;
            o = p2 >> 31 | ((p2 | 0) < 0 ? -1 : 0) << 1;
            i = o & 1;
            a2 = md(e3 | 0, n | 0, o & m | 0, (((p2 | 0) < 0 ? -1 : 0) >> 31 | ((p2 | 0) < 0 ? -1 : 0) << 1) & l | 0) | 0;
            c4 = H() | 0;
            h = h - 1 | 0;
          } while ((h | 0) != 0);
          k = j;
          j = 0;
        }
        h = 0;
        if (f2 | 0) {
          b[f2 >> 2] = a2;
          b[f2 + 4 >> 2] = c4;
        }
        o = (g2 | 0) >>> 31 | (k | h) << 1 | (h << 1 | g2 >>> 31) & 0 | j;
        p2 = (g2 << 1 | 0 >>> 31) & -2 | i;
        return (G(o | 0), p2) | 0;
      }
      function pd(a2, b2, c4, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0, g2 = 0, h = 0, i = 0, j = 0;
        j = b2 >> 31 | ((b2 | 0) < 0 ? -1 : 0) << 1;
        i = ((b2 | 0) < 0 ? -1 : 0) >> 31 | ((b2 | 0) < 0 ? -1 : 0) << 1;
        f2 = d2 >> 31 | ((d2 | 0) < 0 ? -1 : 0) << 1;
        e3 = ((d2 | 0) < 0 ? -1 : 0) >> 31 | ((d2 | 0) < 0 ? -1 : 0) << 1;
        h = md(j ^ a2 | 0, i ^ b2 | 0, j | 0, i | 0) | 0;
        g2 = H() | 0;
        a2 = f2 ^ j;
        b2 = e3 ^ i;
        return md((od(h, g2, md(f2 ^ c4 | 0, e3 ^ d2 | 0, f2 | 0, e3 | 0) | 0, H() | 0, 0) | 0) ^ a2 | 0, (H() | 0) ^ b2 | 0, a2 | 0, b2 | 0) | 0;
      }
      function qd(a2, b2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        var c4 = 0, d2 = 0, e3 = 0, f2 = 0;
        f2 = a2 & 65535;
        e3 = b2 & 65535;
        c4 = B3(e3, f2) | 0;
        d2 = a2 >>> 16;
        a2 = (c4 >>> 16) + (B3(e3, d2) | 0) | 0;
        e3 = b2 >>> 16;
        b2 = B3(e3, f2) | 0;
        return (G((a2 >>> 16) + (B3(e3, d2) | 0) + (((a2 & 65535) + b2 | 0) >>> 16) | 0), a2 + b2 << 16 | c4 & 65535 | 0) | 0;
      }
      function rd(a2, b2, c4, d2) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        var e3 = 0, f2 = 0;
        e3 = a2;
        f2 = c4;
        c4 = qd(e3, f2) | 0;
        a2 = H() | 0;
        return (G((B3(b2, f2) | 0) + (B3(d2, e3) | 0) + a2 | a2 & 0 | 0), c4 | 0 | 0) | 0;
      }
      function sd(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0, j = 0, k = 0;
        f2 = T;
        T = T + 16 | 0;
        i = f2 | 0;
        h = c4 >> 31 | ((c4 | 0) < 0 ? -1 : 0) << 1;
        g2 = ((c4 | 0) < 0 ? -1 : 0) >> 31 | ((c4 | 0) < 0 ? -1 : 0) << 1;
        k = e3 >> 31 | ((e3 | 0) < 0 ? -1 : 0) << 1;
        j = ((e3 | 0) < 0 ? -1 : 0) >> 31 | ((e3 | 0) < 0 ? -1 : 0) << 1;
        a2 = md(h ^ a2 | 0, g2 ^ c4 | 0, h | 0, g2 | 0) | 0;
        c4 = H() | 0;
        od(a2, c4, md(k ^ d2 | 0, j ^ e3 | 0, k | 0, j | 0) | 0, H() | 0, i) | 0;
        e3 = md(b[i >> 2] ^ h | 0, b[i + 4 >> 2] ^ g2 | 0, h | 0, g2 | 0) | 0;
        d2 = H() | 0;
        T = f2;
        return (G(d2 | 0), e3) | 0;
      }
      function td(a2, c4, d2, e3) {
        a2 = a2 | 0;
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0;
        g2 = T;
        T = T + 16 | 0;
        f2 = g2 | 0;
        od(a2, c4, d2, e3, f2) | 0;
        T = g2;
        return (G(b[f2 + 4 >> 2] | 0), b[f2 >> 2] | 0) | 0;
      }
      function ud(a2, b2, c4) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        if ((c4 | 0) < 32) {
          G(b2 >> c4 | 0);
          return a2 >>> c4 | (b2 & (1 << c4) - 1) << 32 - c4;
        }
        G(((b2 | 0) < 0 ? -1 : 0) | 0);
        return b2 >> c4 - 32 | 0;
      }
      function vd(a2, b2, c4) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        if ((c4 | 0) < 32) {
          G(b2 >>> c4 | 0);
          return a2 >>> c4 | (b2 & (1 << c4) - 1) << 32 - c4;
        }
        G(0);
        return b2 >>> c4 - 32 | 0;
      }
      function wd(a2, b2, c4) {
        a2 = a2 | 0;
        b2 = b2 | 0;
        c4 = c4 | 0;
        if ((c4 | 0) < 32) {
          G(b2 << c4 | (a2 & (1 << c4) - 1 << 32 - c4) >>> 32 - c4 | 0);
          return a2 << c4;
        }
        G(a2 << c4 - 32 | 0);
        return 0;
      }
      function xd(a2, b2) {
        a2 = +a2;
        b2 = +b2;
        if (a2 != a2) {
          return +b2;
        }
        if (b2 != b2) {
          return +a2;
        }
        return +D3(+a2, +b2);
      }
      function yd(a2, b2) {
        a2 = +a2;
        b2 = +b2;
        if (a2 != a2) {
          return +b2;
        }
        if (b2 != b2) {
          return +a2;
        }
        return +C3(+a2, +b2);
      }
      function zd(a2) {
        a2 = +a2;
        return a2 >= 0 ? +p(a2 + 0.5) : +A5(a2 - 0.5);
      }
      function Ad(c4, d2, e3) {
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0;
        if ((e3 | 0) >= 8192) {
          L(c4 | 0, d2 | 0, e3 | 0) | 0;
          return c4 | 0;
        }
        h = c4 | 0;
        g2 = c4 + e3 | 0;
        if ((c4 & 3) == (d2 & 3)) {
          while (c4 & 3) {
            if (!e3) {
              return h | 0;
            }
            a[c4 >> 0] = a[d2 >> 0] | 0;
            c4 = c4 + 1 | 0;
            d2 = d2 + 1 | 0;
            e3 = e3 - 1 | 0;
          }
          e3 = g2 & -4 | 0;
          f2 = e3 - 64 | 0;
          while ((c4 | 0) <= (f2 | 0)) {
            b[c4 >> 2] = b[d2 >> 2];
            b[c4 + 4 >> 2] = b[d2 + 4 >> 2];
            b[c4 + 8 >> 2] = b[d2 + 8 >> 2];
            b[c4 + 12 >> 2] = b[d2 + 12 >> 2];
            b[c4 + 16 >> 2] = b[d2 + 16 >> 2];
            b[c4 + 20 >> 2] = b[d2 + 20 >> 2];
            b[c4 + 24 >> 2] = b[d2 + 24 >> 2];
            b[c4 + 28 >> 2] = b[d2 + 28 >> 2];
            b[c4 + 32 >> 2] = b[d2 + 32 >> 2];
            b[c4 + 36 >> 2] = b[d2 + 36 >> 2];
            b[c4 + 40 >> 2] = b[d2 + 40 >> 2];
            b[c4 + 44 >> 2] = b[d2 + 44 >> 2];
            b[c4 + 48 >> 2] = b[d2 + 48 >> 2];
            b[c4 + 52 >> 2] = b[d2 + 52 >> 2];
            b[c4 + 56 >> 2] = b[d2 + 56 >> 2];
            b[c4 + 60 >> 2] = b[d2 + 60 >> 2];
            c4 = c4 + 64 | 0;
            d2 = d2 + 64 | 0;
          }
          while ((c4 | 0) < (e3 | 0)) {
            b[c4 >> 2] = b[d2 >> 2];
            c4 = c4 + 4 | 0;
            d2 = d2 + 4 | 0;
          }
        } else {
          e3 = g2 - 4 | 0;
          while ((c4 | 0) < (e3 | 0)) {
            a[c4 >> 0] = a[d2 >> 0] | 0;
            a[c4 + 1 >> 0] = a[d2 + 1 >> 0] | 0;
            a[c4 + 2 >> 0] = a[d2 + 2 >> 0] | 0;
            a[c4 + 3 >> 0] = a[d2 + 3 >> 0] | 0;
            c4 = c4 + 4 | 0;
            d2 = d2 + 4 | 0;
          }
        }
        while ((c4 | 0) < (g2 | 0)) {
          a[c4 >> 0] = a[d2 >> 0] | 0;
          c4 = c4 + 1 | 0;
          d2 = d2 + 1 | 0;
        }
        return h | 0;
      }
      function Bd(c4, d2, e3) {
        c4 = c4 | 0;
        d2 = d2 | 0;
        e3 = e3 | 0;
        var f2 = 0, g2 = 0, h = 0, i = 0;
        h = c4 + e3 | 0;
        d2 = d2 & 255;
        if ((e3 | 0) >= 67) {
          while (c4 & 3) {
            a[c4 >> 0] = d2;
            c4 = c4 + 1 | 0;
          }
          f2 = h & -4 | 0;
          i = d2 | d2 << 8 | d2 << 16 | d2 << 24;
          g2 = f2 - 64 | 0;
          while ((c4 | 0) <= (g2 | 0)) {
            b[c4 >> 2] = i;
            b[c4 + 4 >> 2] = i;
            b[c4 + 8 >> 2] = i;
            b[c4 + 12 >> 2] = i;
            b[c4 + 16 >> 2] = i;
            b[c4 + 20 >> 2] = i;
            b[c4 + 24 >> 2] = i;
            b[c4 + 28 >> 2] = i;
            b[c4 + 32 >> 2] = i;
            b[c4 + 36 >> 2] = i;
            b[c4 + 40 >> 2] = i;
            b[c4 + 44 >> 2] = i;
            b[c4 + 48 >> 2] = i;
            b[c4 + 52 >> 2] = i;
            b[c4 + 56 >> 2] = i;
            b[c4 + 60 >> 2] = i;
            c4 = c4 + 64 | 0;
          }
          while ((c4 | 0) < (f2 | 0)) {
            b[c4 >> 2] = i;
            c4 = c4 + 4 | 0;
          }
        }
        while ((c4 | 0) < (h | 0)) {
          a[c4 >> 0] = d2;
          c4 = c4 + 1 | 0;
        }
        return h - e3 | 0;
      }
      function Cd(a2) {
        a2 = +a2;
        return a2 >= 0 ? +p(a2 + 0.5) : +A5(a2 - 0.5);
      }
      function Dd(a2) {
        a2 = a2 | 0;
        var c4 = 0, d2 = 0, e3 = 0;
        e3 = K2() | 0;
        d2 = b[g >> 2] | 0;
        c4 = d2 + a2 | 0;
        if ((a2 | 0) > 0 & (c4 | 0) < (d2 | 0) | (c4 | 0) < 0) {
          N(c4 | 0) | 0;
          J(12);
          return -1;
        }
        if ((c4 | 0) > (e3 | 0)) {
          if (!(M2(c4 | 0) | 0)) {
            J(12);
            return -1;
          }
        }
        b[g >> 2] = c4;
        return d2 | 0;
      }
      return {
        ___divdi3: pd,
        ___muldi3: rd,
        ___remdi3: sd,
        ___uremdi3: td,
        _areNeighborCells: $a,
        _bitshift64Ashr: ud,
        _bitshift64Lshr: vd,
        _bitshift64Shl: wd,
        _calloc: kd,
        _cellAreaKm2: lc,
        _cellAreaM2: mc,
        _cellAreaRads2: kc,
        _cellToBoundary: Qb,
        _cellToCenterChild: Ab,
        _cellToChildPos: Vb,
        _cellToChildren: yb,
        _cellToChildrenSize: wb,
        _cellToLatLng: Pb,
        _cellToLocalIj: xc,
        _cellToParent: vb,
        _cellToVertex: Wc,
        _cellToVertexes: Xc,
        _cellsToDirectedEdge: ab4,
        _cellsToLinkedMultiPolygon: la,
        _childPosToCell: Wb,
        _compactCells: Bb,
        _destroyLinkedMultiPolygon: sc,
        _directedEdgeToBoundary: gb,
        _directedEdgeToCells: eb2,
        _edgeLengthKm: oc,
        _edgeLengthM: pc,
        _edgeLengthRads: nc,
        _emscripten_replace_memory: W,
        _free: jd,
        _getBaseCellNumber: tb,
        _getDirectedEdgeDestination: cb,
        _getDirectedEdgeOrigin: bb2,
        _getHexagonAreaAvgKm2: ec,
        _getHexagonAreaAvgM2: fc,
        _getHexagonEdgeLengthAvgKm: gc,
        _getHexagonEdgeLengthAvgM: hc,
        _getIcosahedronFaces: Sb,
        _getNumCells: ic,
        _getPentagons: Ub,
        _getRes0Cells: wa,
        _getResolution: sb,
        _greatCircleDistanceKm: ac2,
        _greatCircleDistanceM: bc4,
        _greatCircleDistanceRads: $b,
        _gridDisk: aa2,
        _gridDiskDistances: ba,
        _gridDistance: zc,
        _gridPathCells: Bc,
        _gridPathCellsSize: Ac,
        _gridRingUnsafe: ga,
        _i64Add: ld,
        _i64Subtract: md,
        _isPentagon: xb,
        _isResClassIII: Eb,
        _isValidCell: ub,
        _isValidDirectedEdge: db,
        _isValidVertex: Zc,
        _latLngToCell: Mb,
        _llvm_maxnum_f64: xd,
        _llvm_minnum_f64: yd,
        _llvm_round_f64: zd,
        _localIjToCell: yc,
        _malloc: id,
        _maxFaceCount: Rb,
        _maxGridDiskSize: $,
        _maxPolygonToCellsSize: ha,
        _memcpy: Ad,
        _memset: Bd,
        _originToDirectedEdges: fb,
        _pentagonCount: Tb,
        _polygonToCells: ja,
        _readInt64AsDoubleFromPointer: Oc,
        _res0CellCount: va,
        _round: Cd,
        _sbrk: Dd,
        _sizeOfCellBoundary: Jc,
        _sizeOfCoordIJ: Nc,
        _sizeOfGeoLoop: Kc,
        _sizeOfGeoPolygon: Lc,
        _sizeOfH3Index: Hc,
        _sizeOfLatLng: Ic,
        _sizeOfLinkedGeoPolygon: Mc,
        _uncompactCells: Cb,
        _uncompactCellsSize: Db,
        _vertexToLatLng: Yc,
        establishStackSpace: _,
        stackAlloc: X,
        stackRestore: Z,
        stackSave: Y
      };
    }(
      // EMSCRIPTEN_END_ASM
      asmGlobalArg,
      asmLibraryArg,
      buffer
    )
  );
  var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
  var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
  var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
  var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
  var _areNeighborCells = Module["_areNeighborCells"] = asm["_areNeighborCells"];
  var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
  var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
  var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
  var _calloc = Module["_calloc"] = asm["_calloc"];
  var _cellAreaKm2 = Module["_cellAreaKm2"] = asm["_cellAreaKm2"];
  var _cellAreaM2 = Module["_cellAreaM2"] = asm["_cellAreaM2"];
  var _cellAreaRads2 = Module["_cellAreaRads2"] = asm["_cellAreaRads2"];
  var _cellToBoundary = Module["_cellToBoundary"] = asm["_cellToBoundary"];
  var _cellToCenterChild = Module["_cellToCenterChild"] = asm["_cellToCenterChild"];
  var _cellToChildPos = Module["_cellToChildPos"] = asm["_cellToChildPos"];
  var _cellToChildren = Module["_cellToChildren"] = asm["_cellToChildren"];
  var _cellToChildrenSize = Module["_cellToChildrenSize"] = asm["_cellToChildrenSize"];
  var _cellToLatLng = Module["_cellToLatLng"] = asm["_cellToLatLng"];
  var _cellToLocalIj = Module["_cellToLocalIj"] = asm["_cellToLocalIj"];
  var _cellToParent = Module["_cellToParent"] = asm["_cellToParent"];
  var _cellToVertex = Module["_cellToVertex"] = asm["_cellToVertex"];
  var _cellToVertexes = Module["_cellToVertexes"] = asm["_cellToVertexes"];
  var _cellsToDirectedEdge = Module["_cellsToDirectedEdge"] = asm["_cellsToDirectedEdge"];
  var _cellsToLinkedMultiPolygon = Module["_cellsToLinkedMultiPolygon"] = asm["_cellsToLinkedMultiPolygon"];
  var _childPosToCell = Module["_childPosToCell"] = asm["_childPosToCell"];
  var _compactCells = Module["_compactCells"] = asm["_compactCells"];
  var _destroyLinkedMultiPolygon = Module["_destroyLinkedMultiPolygon"] = asm["_destroyLinkedMultiPolygon"];
  var _directedEdgeToBoundary = Module["_directedEdgeToBoundary"] = asm["_directedEdgeToBoundary"];
  var _directedEdgeToCells = Module["_directedEdgeToCells"] = asm["_directedEdgeToCells"];
  var _edgeLengthKm = Module["_edgeLengthKm"] = asm["_edgeLengthKm"];
  var _edgeLengthM = Module["_edgeLengthM"] = asm["_edgeLengthM"];
  var _edgeLengthRads = Module["_edgeLengthRads"] = asm["_edgeLengthRads"];
  var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
  var _free = Module["_free"] = asm["_free"];
  var _getBaseCellNumber = Module["_getBaseCellNumber"] = asm["_getBaseCellNumber"];
  var _getDirectedEdgeDestination = Module["_getDirectedEdgeDestination"] = asm["_getDirectedEdgeDestination"];
  var _getDirectedEdgeOrigin = Module["_getDirectedEdgeOrigin"] = asm["_getDirectedEdgeOrigin"];
  var _getHexagonAreaAvgKm2 = Module["_getHexagonAreaAvgKm2"] = asm["_getHexagonAreaAvgKm2"];
  var _getHexagonAreaAvgM2 = Module["_getHexagonAreaAvgM2"] = asm["_getHexagonAreaAvgM2"];
  var _getHexagonEdgeLengthAvgKm = Module["_getHexagonEdgeLengthAvgKm"] = asm["_getHexagonEdgeLengthAvgKm"];
  var _getHexagonEdgeLengthAvgM = Module["_getHexagonEdgeLengthAvgM"] = asm["_getHexagonEdgeLengthAvgM"];
  var _getIcosahedronFaces = Module["_getIcosahedronFaces"] = asm["_getIcosahedronFaces"];
  var _getNumCells = Module["_getNumCells"] = asm["_getNumCells"];
  var _getPentagons = Module["_getPentagons"] = asm["_getPentagons"];
  var _getRes0Cells = Module["_getRes0Cells"] = asm["_getRes0Cells"];
  var _getResolution = Module["_getResolution"] = asm["_getResolution"];
  var _greatCircleDistanceKm = Module["_greatCircleDistanceKm"] = asm["_greatCircleDistanceKm"];
  var _greatCircleDistanceM = Module["_greatCircleDistanceM"] = asm["_greatCircleDistanceM"];
  var _greatCircleDistanceRads = Module["_greatCircleDistanceRads"] = asm["_greatCircleDistanceRads"];
  var _gridDisk = Module["_gridDisk"] = asm["_gridDisk"];
  var _gridDiskDistances = Module["_gridDiskDistances"] = asm["_gridDiskDistances"];
  var _gridDistance = Module["_gridDistance"] = asm["_gridDistance"];
  var _gridPathCells = Module["_gridPathCells"] = asm["_gridPathCells"];
  var _gridPathCellsSize = Module["_gridPathCellsSize"] = asm["_gridPathCellsSize"];
  var _gridRingUnsafe = Module["_gridRingUnsafe"] = asm["_gridRingUnsafe"];
  var _i64Add = Module["_i64Add"] = asm["_i64Add"];
  var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
  var _isPentagon = Module["_isPentagon"] = asm["_isPentagon"];
  var _isResClassIII = Module["_isResClassIII"] = asm["_isResClassIII"];
  var _isValidCell = Module["_isValidCell"] = asm["_isValidCell"];
  var _isValidDirectedEdge = Module["_isValidDirectedEdge"] = asm["_isValidDirectedEdge"];
  var _isValidVertex = Module["_isValidVertex"] = asm["_isValidVertex"];
  var _latLngToCell = Module["_latLngToCell"] = asm["_latLngToCell"];
  var _llvm_maxnum_f64 = Module["_llvm_maxnum_f64"] = asm["_llvm_maxnum_f64"];
  var _llvm_minnum_f64 = Module["_llvm_minnum_f64"] = asm["_llvm_minnum_f64"];
  var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
  var _localIjToCell = Module["_localIjToCell"] = asm["_localIjToCell"];
  var _malloc = Module["_malloc"] = asm["_malloc"];
  var _maxFaceCount = Module["_maxFaceCount"] = asm["_maxFaceCount"];
  var _maxGridDiskSize = Module["_maxGridDiskSize"] = asm["_maxGridDiskSize"];
  var _maxPolygonToCellsSize = Module["_maxPolygonToCellsSize"] = asm["_maxPolygonToCellsSize"];
  var _memcpy = Module["_memcpy"] = asm["_memcpy"];
  var _memset = Module["_memset"] = asm["_memset"];
  var _originToDirectedEdges = Module["_originToDirectedEdges"] = asm["_originToDirectedEdges"];
  var _pentagonCount = Module["_pentagonCount"] = asm["_pentagonCount"];
  var _polygonToCells = Module["_polygonToCells"] = asm["_polygonToCells"];
  var _readInt64AsDoubleFromPointer = Module["_readInt64AsDoubleFromPointer"] = asm["_readInt64AsDoubleFromPointer"];
  var _res0CellCount = Module["_res0CellCount"] = asm["_res0CellCount"];
  var _round = Module["_round"] = asm["_round"];
  var _sbrk = Module["_sbrk"] = asm["_sbrk"];
  var _sizeOfCellBoundary = Module["_sizeOfCellBoundary"] = asm["_sizeOfCellBoundary"];
  var _sizeOfCoordIJ = Module["_sizeOfCoordIJ"] = asm["_sizeOfCoordIJ"];
  var _sizeOfGeoLoop = Module["_sizeOfGeoLoop"] = asm["_sizeOfGeoLoop"];
  var _sizeOfGeoPolygon = Module["_sizeOfGeoPolygon"] = asm["_sizeOfGeoPolygon"];
  var _sizeOfH3Index = Module["_sizeOfH3Index"] = asm["_sizeOfH3Index"];
  var _sizeOfLatLng = Module["_sizeOfLatLng"] = asm["_sizeOfLatLng"];
  var _sizeOfLinkedGeoPolygon = Module["_sizeOfLinkedGeoPolygon"] = asm["_sizeOfLinkedGeoPolygon"];
  var _uncompactCells = Module["_uncompactCells"] = asm["_uncompactCells"];
  var _uncompactCellsSize = Module["_uncompactCellsSize"] = asm["_uncompactCellsSize"];
  var _vertexToLatLng = Module["_vertexToLatLng"] = asm["_vertexToLatLng"];
  var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
  var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
  var stackRestore = Module["stackRestore"] = asm["stackRestore"];
  var stackSave = Module["stackSave"] = asm["stackSave"];
  Module["asm"] = asm;
  Module["cwrap"] = cwrap;
  Module["setValue"] = setValue;
  Module["getValue"] = getValue;
  if (memoryInitializer) {
    if (!isDataURI(memoryInitializer)) {
      memoryInitializer = locateFile(memoryInitializer);
    }
    {
      addRunDependency("memory initializer");
      var applyMemoryInitializer = function(data) {
        if (data.byteLength) {
          data = new Uint8Array(data);
        }
        HEAPU8.set(data, GLOBAL_BASE);
        if (Module["memoryInitializerRequest"]) {
          delete Module["memoryInitializerRequest"].response;
        }
        removeRunDependency("memory initializer");
      };
      var doBrowserLoad = function() {
        readAsync(memoryInitializer, applyMemoryInitializer, function() {
          throw "could not load memory initializer " + memoryInitializer;
        });
      };
      var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
      if (memoryInitializerBytes) {
        applyMemoryInitializer(memoryInitializerBytes.buffer);
      } else if (Module["memoryInitializerRequest"]) {
        var useRequest = function() {
          var request = Module["memoryInitializerRequest"];
          var response = request.response;
          if (request.status !== 200 && request.status !== 0) {
            var data = tryParseAsDataURI(Module["memoryInitializerRequestURL"]);
            if (data) {
              response = data.buffer;
            } else {
              console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
              doBrowserLoad();
              return;
            }
          }
          applyMemoryInitializer(response);
        };
        if (Module["memoryInitializerRequest"].response) {
          setTimeout(useRequest, 0);
        } else {
          Module["memoryInitializerRequest"].addEventListener("load", useRequest);
        }
      } else {
        doBrowserLoad();
      }
    }
  }
  var calledRun;
  dependenciesFulfilled = function runCaller() {
    if (!calledRun) {
      run();
    }
    if (!calledRun) {
      dependenciesFulfilled = runCaller;
    }
  };
  function run(args) {
    args = args || arguments_;
    if (runDependencies > 0) {
      return;
    }
    preRun();
    if (runDependencies > 0) {
      return;
    }
    function doRun() {
      if (calledRun) {
        return;
      }
      calledRun = true;
      if (ABORT) {
        return;
      }
      initRuntime();
      preMain();
      if (Module["onRuntimeInitialized"]) {
        Module["onRuntimeInitialized"]();
      }
      postRun();
    }
    if (Module["setStatus"]) {
      Module["setStatus"]("Running...");
      setTimeout(function() {
        setTimeout(function() {
          Module["setStatus"]("");
        }, 1);
        doRun();
      }, 1);
    } else {
      doRun();
    }
  }
  Module["run"] = run;
  function abort(what) {
    if (Module["onAbort"]) {
      Module["onAbort"](what);
    }
    what += "";
    out(what);
    err(what);
    ABORT = true;
    throw "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
  }
  Module["abort"] = abort;
  if (Module["preInit"]) {
    if (typeof Module["preInit"] == "function") {
      Module["preInit"] = [Module["preInit"]];
    }
    while (Module["preInit"].length > 0) {
      Module["preInit"].pop()();
    }
  }
  run();
  return libh32;
}(typeof libh3 === "object" ? libh3 : {});
var NUMBER = "number";
var H3_ERROR = NUMBER;
var BOOLEAN = NUMBER;
var H3_LOWER = NUMBER;
var H3_UPPER = NUMBER;
var RESOLUTION = NUMBER;
var POINTER = NUMBER;
var BINDINGS = [
  // The size functions are inserted via build/sizes.h
  ["sizeOfH3Index", NUMBER],
  ["sizeOfLatLng", NUMBER],
  ["sizeOfCellBoundary", NUMBER],
  ["sizeOfGeoLoop", NUMBER],
  ["sizeOfGeoPolygon", NUMBER],
  ["sizeOfLinkedGeoPolygon", NUMBER],
  ["sizeOfCoordIJ", NUMBER],
  ["readInt64AsDoubleFromPointer", NUMBER],
  // The remaining functions are defined in the core lib in h3Api.h
  ["isValidCell", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["latLngToCell", H3_ERROR, [NUMBER, NUMBER, RESOLUTION, POINTER]],
  ["cellToLatLng", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellToBoundary", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["maxGridDiskSize", H3_ERROR, [NUMBER, POINTER]],
  ["gridDisk", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["gridDiskDistances", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER, POINTER]],
  ["gridRingUnsafe", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["maxPolygonToCellsSize", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
  ["polygonToCells", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
  ["cellsToLinkedMultiPolygon", H3_ERROR, [POINTER, NUMBER, POINTER]],
  ["destroyLinkedMultiPolygon", null, [POINTER]],
  ["compactCells", H3_ERROR, [POINTER, POINTER, NUMBER, NUMBER]],
  ["uncompactCells", H3_ERROR, [POINTER, NUMBER, NUMBER, POINTER, NUMBER, RESOLUTION]],
  ["uncompactCellsSize", H3_ERROR, [POINTER, NUMBER, NUMBER, RESOLUTION, POINTER]],
  ["isPentagon", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["isResClassIII", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["getBaseCellNumber", NUMBER, [H3_LOWER, H3_UPPER]],
  ["getResolution", NUMBER, [H3_LOWER, H3_UPPER]],
  ["maxFaceCount", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["getIcosahedronFaces", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellToParent", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToChildren", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToCenterChild", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToChildrenSize", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToChildPos", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["childPosToCell", H3_ERROR, [NUMBER, NUMBER, H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["areNeighborCells", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["cellsToDirectedEdge", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["getDirectedEdgeOrigin", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["getDirectedEdgeDestination", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["isValidDirectedEdge", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["directedEdgeToCells", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["originToDirectedEdges", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["directedEdgeToBoundary", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["gridDistance", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["gridPathCells", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["gridPathCellsSize", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["cellToLocalIj", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["localIjToCell", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER, NUMBER, POINTER]],
  ["getHexagonAreaAvgM2", H3_ERROR, [RESOLUTION, POINTER]],
  ["getHexagonAreaAvgKm2", H3_ERROR, [RESOLUTION, POINTER]],
  ["getHexagonEdgeLengthAvgM", H3_ERROR, [RESOLUTION, POINTER]],
  ["getHexagonEdgeLengthAvgKm", H3_ERROR, [RESOLUTION, POINTER]],
  ["greatCircleDistanceM", NUMBER, [POINTER, POINTER]],
  ["greatCircleDistanceKm", NUMBER, [POINTER, POINTER]],
  ["greatCircleDistanceRads", NUMBER, [POINTER, POINTER]],
  ["cellAreaM2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellAreaKm2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellAreaRads2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["edgeLengthM", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["edgeLengthKm", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["edgeLengthRads", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["getNumCells", H3_ERROR, [RESOLUTION, POINTER]],
  ["getRes0Cells", H3_ERROR, [POINTER]],
  ["res0CellCount", NUMBER],
  ["getPentagons", H3_ERROR, [NUMBER, POINTER]],
  ["pentagonCount", NUMBER],
  ["cellToVertex", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["cellToVertexes", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["vertexToLatLng", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["isValidVertex", BOOLEAN, [H3_LOWER, H3_UPPER]]
];
var E_SUCCESS = 0;
var E_FAILED = 1;
var E_DOMAIN = 2;
var E_LATLNG_DOMAIN = 3;
var E_RES_DOMAIN = 4;
var E_CELL_INVALID = 5;
var E_DIR_EDGE_INVALID = 6;
var E_UNDIR_EDGE_INVALID = 7;
var E_VERTEX_INVALID = 8;
var E_PENTAGON = 9;
var E_DUPLICATE_INPUT = 10;
var E_NOT_NEIGHBORS = 11;
var E_RES_MISMATCH = 12;
var E_MEMORY_ALLOC = 13;
var E_MEMORY_BOUNDS = 14;
var E_OPTION_INVALID = 15;
var H3_ERROR_MSGS = {};
H3_ERROR_MSGS[E_SUCCESS] = "Success";
H3_ERROR_MSGS[E_FAILED] = "The operation failed but a more specific error is not available";
H3_ERROR_MSGS[E_DOMAIN] = "Argument was outside of acceptable range";
H3_ERROR_MSGS[E_LATLNG_DOMAIN] = "Latitude or longitude arguments were outside of acceptable range";
H3_ERROR_MSGS[E_RES_DOMAIN] = "Resolution argument was outside of acceptable range";
H3_ERROR_MSGS[E_CELL_INVALID] = "Cell argument was not valid";
H3_ERROR_MSGS[E_DIR_EDGE_INVALID] = "Directed edge argument was not valid";
H3_ERROR_MSGS[E_UNDIR_EDGE_INVALID] = "Undirected edge argument was not valid";
H3_ERROR_MSGS[E_VERTEX_INVALID] = "Vertex argument was not valid";
H3_ERROR_MSGS[E_PENTAGON] = "Pentagon distortion was encountered";
H3_ERROR_MSGS[E_DUPLICATE_INPUT] = "Duplicate input";
H3_ERROR_MSGS[E_NOT_NEIGHBORS] = "Cell arguments were not neighbors";
H3_ERROR_MSGS[E_RES_MISMATCH] = "Cell arguments had incompatible resolutions";
H3_ERROR_MSGS[E_MEMORY_ALLOC] = "Memory allocation failed";
H3_ERROR_MSGS[E_MEMORY_BOUNDS] = "Bounds of provided memory were insufficient";
H3_ERROR_MSGS[E_OPTION_INVALID] = "Mode or flags argument was not valid";
var E_UNKNOWN_UNIT = 1e3;
var E_ARRAY_LENGTH = 1001;
var E_NULL_INDEX = 1002;
var JS_ERROR_MESSAGES = {};
JS_ERROR_MESSAGES[E_UNKNOWN_UNIT] = "Unknown unit";
JS_ERROR_MESSAGES[E_ARRAY_LENGTH] = "Array length out of bounds";
JS_ERROR_MESSAGES[E_NULL_INDEX] = "Got unexpected null value for H3 index";
var UNKNOWN_ERROR_MSG = "Unknown error";
function createError(messages, errCode, meta) {
  var hasValue = meta && "value" in meta;
  var err = new Error((messages[errCode] || UNKNOWN_ERROR_MSG) + " (code: " + errCode + (hasValue ? ", value: " + meta.value : "") + ")");
  err.code = errCode;
  return err;
}
function H3LibraryError(errCode, value) {
  var meta = arguments.length === 2 ? {
    value
  } : {};
  return createError(H3_ERROR_MSGS, errCode, meta);
}
function JSBindingError(errCode, value) {
  var meta = arguments.length === 2 ? {
    value
  } : {};
  return createError(JS_ERROR_MESSAGES, errCode, meta);
}
function throwIfError(errCode) {
  if (errCode !== 0) {
    throw H3LibraryError(errCode);
  }
}
var H3 = {};
BINDINGS.forEach(function bind(def) {
  H3[def[0]] = libh3.cwrap.apply(libh3, def);
});
var BASE_16 = 16;
var SZ_INT = 4;
var SZ_DBL = 8;
var SZ_INT64 = 8;
var SZ_H3INDEX = H3.sizeOfH3Index();
var SZ_LATLNG = H3.sizeOfLatLng();
var SZ_CELLBOUNDARY = H3.sizeOfCellBoundary();
var SZ_GEOPOLYGON = H3.sizeOfGeoPolygon();
var SZ_GEOLOOP = H3.sizeOfGeoLoop();
var SZ_LINKED_GEOPOLYGON = H3.sizeOfLinkedGeoPolygon();
var SZ_COORDIJ = H3.sizeOfCoordIJ();
function validateRes(res) {
  if (typeof res !== "number" || res < 0 || res > 15 || Math.floor(res) !== res) {
    throw H3LibraryError(E_RES_DOMAIN, res);
  }
  return res;
}
function validateH3Index(h3Index) {
  if (!h3Index) {
    throw JSBindingError(E_NULL_INDEX);
  }
  return h3Index;
}
var MAX_JS_ARRAY_LENGTH = Math.pow(2, 32) - 1;
function validateArrayLength(length) {
  if (length > MAX_JS_ARRAY_LENGTH) {
    throw JSBindingError(E_ARRAY_LENGTH, length);
  }
  return length;
}
var INVALID_HEXIDECIMAL_CHAR = /[^0-9a-fA-F]/;
function h3IndexToSplitLong(h3Index) {
  if (Array.isArray(h3Index) && h3Index.length === 2 && Number.isInteger(h3Index[0]) && Number.isInteger(h3Index[1])) {
    return h3Index;
  }
  if (typeof h3Index !== "string" || INVALID_HEXIDECIMAL_CHAR.test(h3Index)) {
    return [0, 0];
  }
  var upper = parseInt(h3Index.substring(0, h3Index.length - 8), BASE_16);
  var lower = parseInt(h3Index.substring(h3Index.length - 8), BASE_16);
  return [lower, upper];
}
function hexFrom32Bit(num) {
  if (num >= 0) {
    return num.toString(BASE_16);
  }
  num = num & 2147483647;
  var tempStr = zeroPad(8, num.toString(BASE_16));
  var topNum = (parseInt(tempStr[0], BASE_16) + 8).toString(BASE_16);
  tempStr = topNum + tempStr.substring(1);
  return tempStr;
}
function splitLongToH3Index(lower, upper) {
  return hexFrom32Bit(upper) + zeroPad(8, hexFrom32Bit(lower));
}
function zeroPad(fullLen, numStr) {
  var numZeroes = fullLen - numStr.length;
  var outStr = "";
  for (var i = 0; i < numZeroes; i++) {
    outStr += "0";
  }
  outStr = outStr + numStr;
  return outStr;
}
var UPPER_BIT_DIVISOR = Math.pow(2, 32);
function polygonArrayToGeoLoop(polygonArray, geoLoop, isGeoJson) {
  var numVerts = polygonArray.length;
  var geoCoordArray = libh3._calloc(numVerts, SZ_LATLNG);
  var latIndex = isGeoJson ? 1 : 0;
  var lngIndex = isGeoJson ? 0 : 1;
  for (var i = 0; i < numVerts * 2; i += 2) {
    libh3.HEAPF64.set([polygonArray[i / 2][latIndex], polygonArray[i / 2][lngIndex]].map(degsToRads), geoCoordArray / SZ_DBL + i);
  }
  libh3.HEAPU32.set([numVerts, geoCoordArray], geoLoop / SZ_INT);
  return geoLoop;
}
function coordinatesToGeoPolygon(coordinates2, isGeoJson) {
  var numHoles = coordinates2.length - 1;
  var geoPolygon = libh3._calloc(SZ_GEOPOLYGON);
  var geoLoopOffset = 0;
  var numHolesOffset = geoLoopOffset + SZ_GEOLOOP;
  var holesOffset = numHolesOffset + SZ_INT;
  polygonArrayToGeoLoop(coordinates2[0], geoPolygon + geoLoopOffset, isGeoJson);
  var holes;
  if (numHoles > 0) {
    holes = libh3._calloc(numHoles, SZ_GEOLOOP);
    for (var i = 0; i < numHoles; i++) {
      polygonArrayToGeoLoop(coordinates2[i + 1], holes + SZ_GEOLOOP * i, isGeoJson);
    }
  }
  libh3.setValue(geoPolygon + numHolesOffset, numHoles, "i32");
  libh3.setValue(geoPolygon + holesOffset, holes, "i32");
  return geoPolygon;
}
function destroyGeoPolygon(geoPolygon) {
  var geoLoopOffset = 0;
  var numHolesOffset = geoLoopOffset + SZ_GEOLOOP;
  var holesOffset = numHolesOffset + SZ_INT;
  var geoLoopArrayOffset = SZ_INT;
  libh3._free(libh3.getValue(geoPolygon + geoLoopOffset + geoLoopArrayOffset, "i8*"));
  var numHoles = libh3.getValue(geoPolygon + numHolesOffset, "i32");
  if (numHoles > 0) {
    var holes = libh3.getValue(geoPolygon + holesOffset, "i32");
    for (var i = 0; i < numHoles; i++) {
      libh3._free(libh3.getValue(holes + SZ_GEOLOOP * i + geoLoopArrayOffset, "i8*"));
    }
    libh3._free(holes);
  }
  libh3._free(geoPolygon);
}
function readH3IndexFromPointer(cAddress, offset) {
  if (offset === void 0) offset = 0;
  var lower = libh3.getValue(cAddress + SZ_H3INDEX * offset, "i32");
  var upper = libh3.getValue(cAddress + SZ_H3INDEX * offset + SZ_INT, "i32");
  return upper ? splitLongToH3Index(lower, upper) : null;
}
function readInt64AsDoubleFromPointer(cAddress) {
  return H3.readInt64AsDoubleFromPointer(cAddress);
}
function readArrayOfH3Indexes(cAddress, maxCount) {
  var out = [];
  for (var i = 0; i < maxCount; i++) {
    var h3Index = readH3IndexFromPointer(cAddress, i);
    if (h3Index !== null) {
      out.push(h3Index);
    }
  }
  return out;
}
function readSingleCoord(cAddress) {
  return radsToDegs(libh3.getValue(cAddress, "double"));
}
function readLatLng(cAddress) {
  return [readSingleCoord(cAddress), readSingleCoord(cAddress + SZ_DBL)];
}
function readLatLngGeoJson(cAddress) {
  return [readSingleCoord(cAddress + SZ_DBL), readSingleCoord(cAddress)];
}
function readCellBoundary(cellBoundary, geoJsonCoords, closedLoop) {
  var numVerts = libh3.getValue(cellBoundary, "i32");
  var vertsPos = cellBoundary + SZ_DBL;
  var out = [];
  var readCoord = geoJsonCoords ? readLatLngGeoJson : readLatLng;
  for (var i = 0; i < numVerts * 2; i += 2) {
    out.push(readCoord(vertsPos + SZ_DBL * i));
  }
  if (closedLoop) {
    out.push(out[0]);
  }
  return out;
}
function latLngToCell(lat, lng, res) {
  var latLng = libh3._malloc(SZ_LATLNG);
  libh3.HEAPF64.set([lat, lng].map(degsToRads), latLng / SZ_DBL);
  var h3Index = libh3._malloc(SZ_H3INDEX);
  try {
    throwIfError(H3.latLngToCell(latLng, res, h3Index));
    return validateH3Index(readH3IndexFromPointer(h3Index));
  } finally {
    libh3._free(h3Index);
    libh3._free(latLng);
  }
}
function cellToLatLng(h3Index) {
  var latLng = libh3._malloc(SZ_LATLNG);
  var ref = h3IndexToSplitLong(h3Index);
  var lower = ref[0];
  var upper = ref[1];
  try {
    throwIfError(H3.cellToLatLng(lower, upper, latLng));
    return readLatLng(latLng);
  } finally {
    libh3._free(latLng);
  }
}
function cellToBoundary(h3Index, formatAsGeoJson) {
  var cellBoundary = libh3._malloc(SZ_CELLBOUNDARY);
  var ref = h3IndexToSplitLong(h3Index);
  var lower = ref[0];
  var upper = ref[1];
  try {
    throwIfError(H3.cellToBoundary(lower, upper, cellBoundary));
    return readCellBoundary(cellBoundary, formatAsGeoJson, formatAsGeoJson);
  } finally {
    libh3._free(cellBoundary);
  }
}
function polygonToCells(coordinates2, res, isGeoJson) {
  validateRes(res);
  isGeoJson = Boolean(isGeoJson);
  if (coordinates2.length === 0 || coordinates2[0].length === 0) {
    return [];
  }
  var polygon = typeof coordinates2[0][0] === "number" ? [coordinates2] : coordinates2;
  var geoPolygon = coordinatesToGeoPolygon(
    // @ts-expect-error - There's no way to convince TS that polygon is now number[][][]
    polygon,
    isGeoJson
  );
  var countPtr = libh3._malloc(SZ_INT64);
  try {
    throwIfError(H3.maxPolygonToCellsSize(geoPolygon, res, 0, countPtr));
    var count2 = validateArrayLength(readInt64AsDoubleFromPointer(countPtr));
    var hexagons = libh3._calloc(count2, SZ_H3INDEX);
    try {
      throwIfError(H3.polygonToCells(geoPolygon, res, 0, hexagons));
      return readArrayOfH3Indexes(hexagons, count2);
    } finally {
      libh3._free(hexagons);
    }
  } finally {
    libh3._free(countPtr);
    destroyGeoPolygon(geoPolygon);
  }
}
function degsToRads(deg) {
  return deg * Math.PI / 180;
}
function radsToDegs(rad) {
  return rad * 180 / Math.PI;
}

// node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
  return colors;
}

// node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

// node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

// node_modules/d3-scale-chromatic/src/categorical/observable10.js
var observable10_default = colors_default("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0");

// node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

// node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

// node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

// node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

// node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

// node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

// node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

// node_modules/d3-scale-chromatic/src/ramp.js
var ramp_default = (scheme28) => rgbBasis(scheme28[scheme28.length - 1]);

// node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors_default);
var BrBG_default = ramp_default(scheme);

// node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors_default);
var PRGn_default = ramp_default(scheme2);

// node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors_default);
var PiYG_default = ramp_default(scheme3);

// node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors_default);
var PuOr_default = ramp_default(scheme4);

// node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors_default);
var RdBu_default = ramp_default(scheme5);

// node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors_default);
var RdGy_default = ramp_default(scheme6);

// node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors_default);
var RdYlBu_default = ramp_default(scheme7);

// node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors_default);
var RdYlGn_default = ramp_default(scheme8);

// node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors_default);
var Spectral_default = ramp_default(scheme9);

// node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors_default);
var BuGn_default = ramp_default(scheme10);

// node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11 = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors_default);
var BuPu_default = ramp_default(scheme11);

// node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12 = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors_default);
var GnBu_default = ramp_default(scheme12);

// node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13 = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors_default);
var OrRd_default = ramp_default(scheme13);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14 = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors_default);
var PuBuGn_default = ramp_default(scheme14);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15 = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors_default);
var PuBu_default = ramp_default(scheme15);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16 = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors_default);
var PuRd_default = ramp_default(scheme16);

// node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17 = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors_default);
var RdPu_default = ramp_default(scheme17);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18 = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors_default);
var YlGnBu_default = ramp_default(scheme18);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19 = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors_default);
var YlGn_default = ramp_default(scheme19);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20 = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors_default);
var YlOrBr_default = ramp_default(scheme20);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21 = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors_default);
var YlOrRd_default = ramp_default(scheme21);

// node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22 = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors_default);
var Blues_default = ramp_default(scheme22);

// node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23 = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors_default);
var Greens_default = ramp_default(scheme23);

// node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24 = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors_default);
var Greys_default = ramp_default(scheme24);

// node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25 = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors_default);
var Purples_default = ramp_default(scheme25);

// node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26 = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors_default);
var Reds_default = ramp_default(scheme26);

// node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27 = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors_default);
var Oranges_default = ramp_default(scheme27);

// node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default2 = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));

// node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var c = cubehelix();

// node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
var c2 = rgb();
var pi_1_3 = Math.PI / 3;
var pi_2_3 = Math.PI * 2 / 3;

// node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
function turbo_default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range3) {
  var n = range3.length;
  return function(t) {
    return range3[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// node_modules/three-globe/dist/three-globe.mjs
var import_yaot = __toESM(require_yaot(), 1);

// node_modules/three/examples/jsm/lines/LineSegmentsGeometry.js
var _box = new Box3();
var _vector2 = new Vector3();
var LineSegmentsGeometry = class extends InstancedBufferGeometry {
  constructor() {
    super();
    this.isLineSegmentsGeometry = true;
    this.type = "LineSegmentsGeometry";
    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];
    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];
    const index5 = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];
    this.setIndex(index5);
    this.setAttribute("position", new Float32BufferAttribute(positions, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  applyMatrix4(matrix) {
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0) {
      start.applyMatrix4(matrix);
      end.applyMatrix4(matrix);
      start.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  }
  setPositions(array2) {
    let lineSegments;
    if (array2 instanceof Float32Array) {
      lineSegments = array2;
    } else if (Array.isArray(array2)) {
      lineSegments = new Float32Array(array2);
    }
    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);
    this.setAttribute("instanceStart", new InterleavedBufferAttribute(instanceBuffer, 3, 0));
    this.setAttribute("instanceEnd", new InterleavedBufferAttribute(instanceBuffer, 3, 3));
    this.computeBoundingBox();
    this.computeBoundingSphere();
    return this;
  }
  setColors(array2) {
    let colors;
    if (array2 instanceof Float32Array) {
      colors = array2;
    } else if (Array.isArray(array2)) {
      colors = new Float32Array(array2);
    }
    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1);
    this.setAttribute("instanceColorStart", new InterleavedBufferAttribute(instanceColorBuffer, 3, 0));
    this.setAttribute("instanceColorEnd", new InterleavedBufferAttribute(instanceColorBuffer, 3, 3));
    return this;
  }
  fromWireframeGeometry(geometry) {
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  fromEdgesGeometry(geometry) {
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  fromMesh(mesh) {
    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));
    return this;
  }
  fromLineSegments(lineSegments) {
    const geometry = lineSegments.geometry;
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  computeBoundingBox() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0 && end !== void 0) {
      this.boundingBox.setFromBufferAttribute(start);
      _box.setFromBufferAttribute(end);
      this.boundingBox.union(_box);
    }
  }
  computeBoundingSphere() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    if (this.boundingBox === null) {
      this.computeBoundingBox();
    }
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0 && end !== void 0) {
      const center = this.boundingSphere.center;
      this.boundingBox.getCenter(center);
      let maxRadiusSq = 0;
      for (let i = 0, il = start.count; i < il; i++) {
        _vector2.fromBufferAttribute(start, i);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector2));
        _vector2.fromBufferAttribute(end, i);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector2));
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error("THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.", this);
      }
    }
  }
  toJSON() {
  }
  applyMatrix(matrix) {
    console.warn("THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().");
    return this.applyMatrix4(matrix);
  }
};

// node_modules/three/examples/jsm/lines/LineMaterial.js
UniformsLib.line = {
  worldUnits: { value: 1 },
  linewidth: { value: 1 },
  resolution: { value: new Vector2(1, 1) },
  dashOffset: { value: 0 },
  dashScale: { value: 1 },
  dashSize: { value: 1 },
  gapSize: { value: 1 }
  // todo FIX - maybe change to totalSize
};
ShaderLib["line"] = {
  uniforms: UniformsUtils.merge([
    UniformsLib.common,
    UniformsLib.fog,
    UniformsLib.line
  ]),
  vertexShader: (
    /* glsl */
    `
		#include <common>
		#include <color_pars_vertex>
		#include <fog_pars_vertex>
		#include <logdepthbuf_pars_vertex>
		#include <clipping_planes_pars_vertex>

		uniform float linewidth;
		uniform vec2 resolution;

		attribute vec3 instanceStart;
		attribute vec3 instanceEnd;

		attribute vec3 instanceColorStart;
		attribute vec3 instanceColorEnd;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#ifdef USE_DASH

			uniform float dashScale;
			attribute float instanceDistanceStart;
			attribute float instanceDistanceEnd;
			varying float vLineDistance;

		#endif

		void trimSegment( const in vec4 start, inout vec4 end ) {

			// trim end segment so it terminates between the camera plane and the near plane

			// conservative estimate of the near plane
			float a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column
			float b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column
			float nearEstimate = - 0.5 * b / a;

			float alpha = ( nearEstimate - start.z ) / ( end.z - start.z );

			end.xyz = mix( start.xyz, end.xyz, alpha );

		}

		void main() {

			#ifdef USE_COLOR

				vColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;

			#endif

			#ifdef USE_DASH

				vLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;
				vUv = uv;

			#endif

			float aspect = resolution.x / resolution.y;

			// camera space
			vec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );
			vec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );

			#ifdef WORLD_UNITS

				worldStart = start.xyz;
				worldEnd = end.xyz;

			#else

				vUv = uv;

			#endif

			// special case for perspective projection, and segments that terminate either in, or behind, the camera plane
			// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space
			// but we need to perform ndc-space calculations in the shader, so we must address this issue directly
			// perhaps there is a more elegant solution -- WestLangley

			bool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column

			if ( perspective ) {

				if ( start.z < 0.0 && end.z >= 0.0 ) {

					trimSegment( start, end );

				} else if ( end.z < 0.0 && start.z >= 0.0 ) {

					trimSegment( end, start );

				}

			}

			// clip space
			vec4 clipStart = projectionMatrix * start;
			vec4 clipEnd = projectionMatrix * end;

			// ndc space
			vec3 ndcStart = clipStart.xyz / clipStart.w;
			vec3 ndcEnd = clipEnd.xyz / clipEnd.w;

			// direction
			vec2 dir = ndcEnd.xy - ndcStart.xy;

			// account for clip-space aspect ratio
			dir.x *= aspect;
			dir = normalize( dir );

			#ifdef WORLD_UNITS

				vec3 worldDir = normalize( end.xyz - start.xyz );
				vec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );
				vec3 worldUp = normalize( cross( worldDir, tmpFwd ) );
				vec3 worldFwd = cross( worldDir, worldUp );
				worldPos = position.y < 0.5 ? start: end;

				// height offset
				float hw = linewidth * 0.5;
				worldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;

				// don't extend the line if we're rendering dashes because we
				// won't be rendering the endcaps
				#ifndef USE_DASH

					// cap extension
					worldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;

					// add width to the box
					worldPos.xyz += worldFwd * hw;

					// endcaps
					if ( position.y > 1.0 || position.y < 0.0 ) {

						worldPos.xyz -= worldFwd * 2.0 * hw;

					}

				#endif

				// project the worldpos
				vec4 clip = projectionMatrix * worldPos;

				// shift the depth of the projected points so the line
				// segments overlap neatly
				vec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;
				clip.z = clipPose.z * clip.w;

			#else

				vec2 offset = vec2( dir.y, - dir.x );
				// undo aspect ratio adjustment
				dir.x /= aspect;
				offset.x /= aspect;

				// sign flip
				if ( position.x < 0.0 ) offset *= - 1.0;

				// endcaps
				if ( position.y < 0.0 ) {

					offset += - dir;

				} else if ( position.y > 1.0 ) {

					offset += dir;

				}

				// adjust for linewidth
				offset *= linewidth;

				// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...
				offset /= resolution.y;

				// select end
				vec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;

				// back to clip space
				offset *= clip.w;

				clip.xy += offset;

			#endif

			gl_Position = clip;

			vec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation

			#include <logdepthbuf_vertex>
			#include <clipping_planes_vertex>
			#include <fog_vertex>

		}
		`
  ),
  fragmentShader: (
    /* glsl */
    `
		uniform vec3 diffuse;
		uniform float opacity;
		uniform float linewidth;

		#ifdef USE_DASH

			uniform float dashOffset;
			uniform float dashSize;
			uniform float gapSize;

		#endif

		varying float vLineDistance;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#include <common>
		#include <color_pars_fragment>
		#include <fog_pars_fragment>
		#include <logdepthbuf_pars_fragment>
		#include <clipping_planes_pars_fragment>

		vec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {

			float mua;
			float mub;

			vec3 p13 = p1 - p3;
			vec3 p43 = p4 - p3;

			vec3 p21 = p2 - p1;

			float d1343 = dot( p13, p43 );
			float d4321 = dot( p43, p21 );
			float d1321 = dot( p13, p21 );
			float d4343 = dot( p43, p43 );
			float d2121 = dot( p21, p21 );

			float denom = d2121 * d4343 - d4321 * d4321;

			float numer = d1343 * d4321 - d1321 * d4343;

			mua = numer / denom;
			mua = clamp( mua, 0.0, 1.0 );
			mub = ( d1343 + d4321 * ( mua ) ) / d4343;
			mub = clamp( mub, 0.0, 1.0 );

			return vec2( mua, mub );

		}

		void main() {

			#include <clipping_planes_fragment>

			#ifdef USE_DASH

				if ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps

				if ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX

			#endif

			float alpha = opacity;

			#ifdef WORLD_UNITS

				// Find the closest points on the view ray and the line segment
				vec3 rayEnd = normalize( worldPos.xyz ) * 1e5;
				vec3 lineDir = worldEnd - worldStart;
				vec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );

				vec3 p1 = worldStart + lineDir * params.x;
				vec3 p2 = rayEnd * params.y;
				vec3 delta = p1 - p2;
				float len = length( delta );
				float norm = len / linewidth;

				#ifndef USE_DASH

					#ifdef USE_ALPHA_TO_COVERAGE

						float dnorm = fwidth( norm );
						alpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );

					#else

						if ( norm > 0.5 ) {

							discard;

						}

					#endif

				#endif

			#else

				#ifdef USE_ALPHA_TO_COVERAGE

					// artifacts appear on some hardware if a derivative is taken within a conditional
					float a = vUv.x;
					float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
					float len2 = a * a + b * b;
					float dlen = fwidth( len2 );

					if ( abs( vUv.y ) > 1.0 ) {

						alpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );

					}

				#else

					if ( abs( vUv.y ) > 1.0 ) {

						float a = vUv.x;
						float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
						float len2 = a * a + b * b;

						if ( len2 > 1.0 ) discard;

					}

				#endif

			#endif

			vec4 diffuseColor = vec4( diffuse, alpha );

			#include <logdepthbuf_fragment>
			#include <color_fragment>

			gl_FragColor = vec4( diffuseColor.rgb, alpha );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>
			#include <fog_fragment>
			#include <premultiplied_alpha_fragment>

		}
		`
  )
};
var LineMaterial = class extends ShaderMaterial {
  constructor(parameters) {
    super({
      type: "LineMaterial",
      uniforms: UniformsUtils.clone(ShaderLib["line"].uniforms),
      vertexShader: ShaderLib["line"].vertexShader,
      fragmentShader: ShaderLib["line"].fragmentShader,
      clipping: true
      // required for clipping support
    });
    this.isLineMaterial = true;
    this.setValues(parameters);
  }
  get color() {
    return this.uniforms.diffuse.value;
  }
  set color(value) {
    this.uniforms.diffuse.value = value;
  }
  get worldUnits() {
    return "WORLD_UNITS" in this.defines;
  }
  set worldUnits(value) {
    if (value === true) {
      this.defines.WORLD_UNITS = "";
    } else {
      delete this.defines.WORLD_UNITS;
    }
  }
  get linewidth() {
    return this.uniforms.linewidth.value;
  }
  set linewidth(value) {
    if (!this.uniforms.linewidth) return;
    this.uniforms.linewidth.value = value;
  }
  get dashed() {
    return "USE_DASH" in this.defines;
  }
  set dashed(value) {
    if (value === true !== this.dashed) {
      this.needsUpdate = true;
    }
    if (value === true) {
      this.defines.USE_DASH = "";
    } else {
      delete this.defines.USE_DASH;
    }
  }
  get dashScale() {
    return this.uniforms.dashScale.value;
  }
  set dashScale(value) {
    this.uniforms.dashScale.value = value;
  }
  get dashSize() {
    return this.uniforms.dashSize.value;
  }
  set dashSize(value) {
    this.uniforms.dashSize.value = value;
  }
  get dashOffset() {
    return this.uniforms.dashOffset.value;
  }
  set dashOffset(value) {
    this.uniforms.dashOffset.value = value;
  }
  get gapSize() {
    return this.uniforms.gapSize.value;
  }
  set gapSize(value) {
    this.uniforms.gapSize.value = value;
  }
  get opacity() {
    return this.uniforms.opacity.value;
  }
  set opacity(value) {
    if (!this.uniforms) return;
    this.uniforms.opacity.value = value;
  }
  get resolution() {
    return this.uniforms.resolution.value;
  }
  set resolution(value) {
    this.uniforms.resolution.value.copy(value);
  }
  get alphaToCoverage() {
    return "USE_ALPHA_TO_COVERAGE" in this.defines;
  }
  set alphaToCoverage(value) {
    if (!this.defines) return;
    if (value === true !== this.alphaToCoverage) {
      this.needsUpdate = true;
    }
    if (value === true) {
      this.defines.USE_ALPHA_TO_COVERAGE = "";
    } else {
      delete this.defines.USE_ALPHA_TO_COVERAGE;
    }
  }
};

// node_modules/three/examples/jsm/lines/LineSegments2.js
var _viewport = new Vector4();
var _start = new Vector3();
var _end = new Vector3();
var _start4 = new Vector4();
var _end4 = new Vector4();
var _ssOrigin = new Vector4();
var _ssOrigin3 = new Vector3();
var _mvMatrix = new Matrix4();
var _line = new Line3();
var _closestPoint = new Vector3();
var _box2 = new Box3();
var _sphere = new Sphere();
var _clipToWorldVector = new Vector4();
var _ray;
var _lineWidth;
function getWorldSpaceHalfWidth(camera3, distance, resolution2) {
  _clipToWorldVector.set(0, 0, -distance, 1).applyMatrix4(camera3.projectionMatrix);
  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);
  _clipToWorldVector.x = _lineWidth / resolution2.width;
  _clipToWorldVector.y = _lineWidth / resolution2.height;
  _clipToWorldVector.applyMatrix4(camera3.projectionMatrixInverse);
  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);
  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));
}
function raycastWorldUnits(lineSegments, intersects2) {
  const matrixWorld = lineSegments.matrixWorld;
  const geometry = lineSegments.geometry;
  const instanceStart = geometry.attributes.instanceStart;
  const instanceEnd = geometry.attributes.instanceEnd;
  const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);
  for (let i = 0, l = segmentCount; i < l; i++) {
    _line.start.fromBufferAttribute(instanceStart, i);
    _line.end.fromBufferAttribute(instanceEnd, i);
    _line.applyMatrix4(matrixWorld);
    const pointOnLine = new Vector3();
    const point2 = new Vector3();
    _ray.distanceSqToSegment(_line.start, _line.end, point2, pointOnLine);
    const isInside = point2.distanceTo(pointOnLine) < _lineWidth * 0.5;
    if (isInside) {
      intersects2.push({
        point: point2,
        pointOnLine,
        distance: _ray.origin.distanceTo(point2),
        object: lineSegments,
        face: null,
        faceIndex: i,
        uv: null,
        uv1: null
      });
    }
  }
}
function raycastScreenSpace(lineSegments, camera3, intersects2) {
  const projectionMatrix = camera3.projectionMatrix;
  const material = lineSegments.material;
  const resolution2 = material.resolution;
  const matrixWorld = lineSegments.matrixWorld;
  const geometry = lineSegments.geometry;
  const instanceStart = geometry.attributes.instanceStart;
  const instanceEnd = geometry.attributes.instanceEnd;
  const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);
  const near = -camera3.near;
  _ray.at(1, _ssOrigin);
  _ssOrigin.w = 1;
  _ssOrigin.applyMatrix4(camera3.matrixWorldInverse);
  _ssOrigin.applyMatrix4(projectionMatrix);
  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);
  _ssOrigin.x *= resolution2.x / 2;
  _ssOrigin.y *= resolution2.y / 2;
  _ssOrigin.z = 0;
  _ssOrigin3.copy(_ssOrigin);
  _mvMatrix.multiplyMatrices(camera3.matrixWorldInverse, matrixWorld);
  for (let i = 0, l = segmentCount; i < l; i++) {
    _start4.fromBufferAttribute(instanceStart, i);
    _end4.fromBufferAttribute(instanceEnd, i);
    _start4.w = 1;
    _end4.w = 1;
    _start4.applyMatrix4(_mvMatrix);
    _end4.applyMatrix4(_mvMatrix);
    const isBehindCameraNear = _start4.z > near && _end4.z > near;
    if (isBehindCameraNear) {
      continue;
    }
    if (_start4.z > near) {
      const deltaDist = _start4.z - _end4.z;
      const t = (_start4.z - near) / deltaDist;
      _start4.lerp(_end4, t);
    } else if (_end4.z > near) {
      const deltaDist = _end4.z - _start4.z;
      const t = (_end4.z - near) / deltaDist;
      _end4.lerp(_start4, t);
    }
    _start4.applyMatrix4(projectionMatrix);
    _end4.applyMatrix4(projectionMatrix);
    _start4.multiplyScalar(1 / _start4.w);
    _end4.multiplyScalar(1 / _end4.w);
    _start4.x *= resolution2.x / 2;
    _start4.y *= resolution2.y / 2;
    _end4.x *= resolution2.x / 2;
    _end4.y *= resolution2.y / 2;
    _line.start.copy(_start4);
    _line.start.z = 0;
    _line.end.copy(_end4);
    _line.end.z = 0;
    const param = _line.closestPointToPointParameter(_ssOrigin3, true);
    _line.at(param, _closestPoint);
    const zPos = MathUtils.lerp(_start4.z, _end4.z, param);
    const isInClipSpace = zPos >= -1 && zPos <= 1;
    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;
    if (isInClipSpace && isInside) {
      _line.start.fromBufferAttribute(instanceStart, i);
      _line.end.fromBufferAttribute(instanceEnd, i);
      _line.start.applyMatrix4(matrixWorld);
      _line.end.applyMatrix4(matrixWorld);
      const pointOnLine = new Vector3();
      const point2 = new Vector3();
      _ray.distanceSqToSegment(_line.start, _line.end, point2, pointOnLine);
      intersects2.push({
        point: point2,
        pointOnLine,
        distance: _ray.origin.distanceTo(point2),
        object: lineSegments,
        face: null,
        faceIndex: i,
        uv: null,
        uv1: null
      });
    }
  }
}
var LineSegments2 = class extends Mesh {
  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {
    super(geometry, material);
    this.isLineSegments2 = true;
    this.type = "LineSegments2";
  }
  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...
  computeLineDistances() {
    const geometry = this.geometry;
    const instanceStart = geometry.attributes.instanceStart;
    const instanceEnd = geometry.attributes.instanceEnd;
    const lineDistances = new Float32Array(2 * instanceStart.count);
    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {
      _start.fromBufferAttribute(instanceStart, i);
      _end.fromBufferAttribute(instanceEnd, i);
      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];
      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);
    }
    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);
    geometry.setAttribute("instanceDistanceStart", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));
    geometry.setAttribute("instanceDistanceEnd", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));
    return this;
  }
  raycast(raycaster, intersects2) {
    const worldUnits = this.material.worldUnits;
    const camera3 = raycaster.camera;
    if (camera3 === null && !worldUnits) {
      console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');
    }
    const threshold2 = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;
    _ray = raycaster.ray;
    const matrixWorld = this.matrixWorld;
    const geometry = this.geometry;
    const material = this.material;
    _lineWidth = material.linewidth + threshold2;
    if (geometry.boundingSphere === null) {
      geometry.computeBoundingSphere();
    }
    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);
    let sphereMargin;
    if (worldUnits) {
      sphereMargin = _lineWidth * 0.5;
    } else {
      const distanceToSphere = Math.max(camera3.near, _sphere.distanceToPoint(_ray.origin));
      sphereMargin = getWorldSpaceHalfWidth(camera3, distanceToSphere, material.resolution);
    }
    _sphere.radius += sphereMargin;
    if (_ray.intersectsSphere(_sphere) === false) {
      return;
    }
    if (geometry.boundingBox === null) {
      geometry.computeBoundingBox();
    }
    _box2.copy(geometry.boundingBox).applyMatrix4(matrixWorld);
    let boxMargin;
    if (worldUnits) {
      boxMargin = _lineWidth * 0.5;
    } else {
      const distanceToBox = Math.max(camera3.near, _box2.distanceToPoint(_ray.origin));
      boxMargin = getWorldSpaceHalfWidth(camera3, distanceToBox, material.resolution);
    }
    _box2.expandByScalar(boxMargin);
    if (_ray.intersectsBox(_box2) === false) {
      return;
    }
    if (worldUnits) {
      raycastWorldUnits(this, intersects2);
    } else {
      raycastScreenSpace(this, camera3, intersects2);
    }
  }
  onBeforeRender(renderer3) {
    const uniforms = this.material.uniforms;
    if (uniforms && uniforms.resolution) {
      renderer3.getViewport(_viewport);
      this.material.uniforms.resolution.value.set(_viewport.z, _viewport.w);
    }
  }
};

// node_modules/three/examples/jsm/lines/LineGeometry.js
var LineGeometry = class extends LineSegmentsGeometry {
  constructor() {
    super();
    this.isLineGeometry = true;
    this.type = "LineGeometry";
  }
  setPositions(array2) {
    const length = array2.length - 3;
    const points = new Float32Array(2 * length);
    for (let i = 0; i < length; i += 3) {
      points[2 * i] = array2[i];
      points[2 * i + 1] = array2[i + 1];
      points[2 * i + 2] = array2[i + 2];
      points[2 * i + 3] = array2[i + 3];
      points[2 * i + 4] = array2[i + 4];
      points[2 * i + 5] = array2[i + 5];
    }
    super.setPositions(points);
    return this;
  }
  setColors(array2) {
    const length = array2.length - 3;
    const colors = new Float32Array(2 * length);
    for (let i = 0; i < length; i += 3) {
      colors[2 * i] = array2[i];
      colors[2 * i + 1] = array2[i + 1];
      colors[2 * i + 2] = array2[i + 2];
      colors[2 * i + 3] = array2[i + 3];
      colors[2 * i + 4] = array2[i + 4];
      colors[2 * i + 5] = array2[i + 5];
    }
    super.setColors(colors);
    return this;
  }
  fromLine(line) {
    const geometry = line.geometry;
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
};

// node_modules/three/examples/jsm/lines/Line2.js
var Line2 = class extends LineSegments2 {
  constructor(geometry = new LineGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {
    super(geometry, material);
    this.isLine2 = true;
    this.type = "Line2";
  }
};

// node_modules/three/examples/jsm/geometries/TextGeometry.js
var TextGeometry = class extends ExtrudeGeometry {
  constructor(text, parameters = {}) {
    const font = parameters.font;
    if (font === void 0) {
      super();
    } else {
      const shapes = font.generateShapes(text, parameters.size);
      if (parameters.depth === void 0 && parameters.height !== void 0) {
        console.warn("THREE.TextGeometry: .height is now depreciated. Please use .depth instead");
      }
      parameters.depth = parameters.depth !== void 0 ? parameters.depth : parameters.height !== void 0 ? parameters.height : 50;
      if (parameters.bevelThickness === void 0) parameters.bevelThickness = 10;
      if (parameters.bevelSize === void 0) parameters.bevelSize = 8;
      if (parameters.bevelEnabled === void 0) parameters.bevelEnabled = false;
      super(shapes, parameters);
    }
    this.type = "TextGeometry";
  }
};

// node_modules/three/examples/jsm/loaders/FontLoader.js
var Font = class {
  constructor(data) {
    this.isFont = true;
    this.type = "Font";
    this.data = data;
  }
  generateShapes(text, size = 100) {
    const shapes = [];
    const paths = createPaths(text, size, this.data);
    for (let p = 0, pl = paths.length; p < pl; p++) {
      shapes.push(...paths[p].toShapes());
    }
    return shapes;
  }
};
function createPaths(text, size, data) {
  const chars = Array.from(text);
  const scale2 = size / data.resolution;
  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale2;
  const paths = [];
  let offsetX = 0, offsetY = 0;
  for (let i = 0; i < chars.length; i++) {
    const char = chars[i];
    if (char === "\n") {
      offsetX = 0;
      offsetY -= line_height;
    } else {
      const ret = createPath(char, scale2, offsetX, offsetY, data);
      offsetX += ret.offsetX;
      paths.push(ret.path);
    }
  }
  return paths;
}
function createPath(char, scale2, offsetX, offsetY, data) {
  const glyph = data.glyphs[char] || data.glyphs["?"];
  if (!glyph) {
    console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + ".");
    return;
  }
  const path = new ShapePath();
  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
  if (glyph.o) {
    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(" "));
    for (let i = 0, l = outline.length; i < l; ) {
      const action = outline[i++];
      switch (action) {
        case "m":
          x = outline[i++] * scale2 + offsetX;
          y = outline[i++] * scale2 + offsetY;
          path.moveTo(x, y);
          break;
        case "l":
          x = outline[i++] * scale2 + offsetX;
          y = outline[i++] * scale2 + offsetY;
          path.lineTo(x, y);
          break;
        case "q":
          cpx = outline[i++] * scale2 + offsetX;
          cpy = outline[i++] * scale2 + offsetY;
          cpx1 = outline[i++] * scale2 + offsetX;
          cpy1 = outline[i++] * scale2 + offsetY;
          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
          break;
        case "b":
          cpx = outline[i++] * scale2 + offsetX;
          cpy = outline[i++] * scale2 + offsetY;
          cpx1 = outline[i++] * scale2 + offsetX;
          cpy1 = outline[i++] * scale2 + offsetY;
          cpx2 = outline[i++] * scale2 + offsetX;
          cpy2 = outline[i++] * scale2 + offsetY;
          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
          break;
      }
    }
  }
  return { offsetX: glyph.ha * scale2, path };
}

// node_modules/three-globe/dist/three-globe.mjs
function _arrayLikeToArray6(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithHoles6(r) {
  if (Array.isArray(r)) return r;
}
function _arrayWithoutHoles4(r) {
  if (Array.isArray(r)) return _arrayLikeToArray6(r);
}
function _assertClassBrand(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
function _assertThisInitialized3(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _callSuper3(t, o, e) {
  return o = _getPrototypeOf3(o), _possibleConstructorReturn3(t, _isNativeReflectConstruct3() ? Reflect.construct(o, e || [], _getPrototypeOf3(t).constructor) : o.apply(t, e));
}
function _checkPrivateRedeclaration(e, t) {
  if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classCallCheck4(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _classPrivateFieldGet2(s, a) {
  return s.get(_assertClassBrand(s, a));
}
function _classPrivateFieldInitSpec(e, t, a) {
  _checkPrivateRedeclaration(e, t), t.set(e, a);
}
function _classPrivateFieldSet2(s, a, r) {
  return s.set(_assertClassBrand(s, a), r), r;
}
function _classPrivateMethodInitSpec(e, a) {
  _checkPrivateRedeclaration(e, a), a.add(e);
}
function _construct(t, e, r) {
  if (_isNativeReflectConstruct3()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return p;
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey3(o.key), o);
  }
}
function _createClass4(e, r, t) {
  return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", {
    writable: false
  }), e;
}
function _defineProperty2(e, r, t) {
  return (r = _toPropertyKey3(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}
function _getPrototypeOf3(t) {
  return _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
    return t4.__proto__ || Object.getPrototypeOf(t4);
  }, _getPrototypeOf3(t);
}
function _inherits3(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t, "prototype", {
    writable: false
  }), e && _setPrototypeOf3(t, e);
}
function _isNativeReflectConstruct3() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t4) {
  }
  return (_isNativeReflectConstruct3 = function() {
    return !!t;
  })();
}
function _iterableToArray4(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _iterableToArrayLimit6(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u4, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = false;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t.return && (u4 = t.return(), Object(u4) !== u4)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest6() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread22(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty2(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _objectWithoutProperties3(e, t) {
  if (null == e) return {};
  var o, r, i = _objectWithoutPropertiesLoose3(e, t);
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(e);
    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}
function _objectWithoutPropertiesLoose3(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (e.includes(n)) continue;
    t[n] = r[n];
  }
  return t;
}
function _possibleConstructorReturn3(t, e) {
  if (e && ("object" == typeof e || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized3(t);
}
function _setPrototypeOf3(t, e) {
  return _setPrototypeOf3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e3) {
    return t4.__proto__ = e3, t4;
  }, _setPrototypeOf3(t, e);
}
function _slicedToArray6(r, e) {
  return _arrayWithHoles6(r) || _iterableToArrayLimit6(r, e) || _unsupportedIterableToArray6(r, e) || _nonIterableRest6();
}
function _toConsumableArray4(r) {
  return _arrayWithoutHoles4(r) || _iterableToArray4(r) || _unsupportedIterableToArray6(r) || _nonIterableSpread4();
}
function _toPrimitive3(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey3(t) {
  var i = _toPrimitive3(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _unsupportedIterableToArray6(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray6(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray6(r, a) : void 0;
  }
}
var _materialDispose = function materialDispose(material) {
  if (material instanceof Array) {
    material.forEach(_materialDispose);
  } else {
    if (material.map) {
      material.map.dispose();
    }
    material.dispose();
  }
};
var _deallocate = function deallocate(obj) {
  if (obj.geometry) {
    obj.geometry.dispose();
  }
  if (obj.material) {
    _materialDispose(obj.material);
  }
  if (obj.texture) {
    obj.texture.dispose();
  }
  if (obj.children) {
    obj.children.forEach(_deallocate);
  }
};
var emptyObject = function emptyObject2(obj) {
  if (obj && obj.children) while (obj.children.length) {
    var childObj = obj.children[0];
    obj.remove(childObj);
    _deallocate(childObj);
  }
};
function linkKapsule(kapsulePropName, kapsuleType) {
  var dummyK = new kapsuleType();
  return {
    linkProp: function linkProp(prop) {
      return {
        "default": dummyK[prop](),
        onChange: function onChange12(v2, state) {
          state[kapsulePropName][prop](v2);
        },
        triggerUpdate: false
      };
    },
    linkMethod: function linkMethod(method) {
      return function(state) {
        var kapsuleInstance = state[kapsulePropName];
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);
        return returnVal === kapsuleInstance ? this : returnVal;
      };
    }
  };
}
var GLOBE_RADIUS = 100;
function getGlobeRadius() {
  return GLOBE_RADIUS;
}
function polar2Cartesian3(lat, lng) {
  var relAltitude = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  var r = GLOBE_RADIUS * (1 + relAltitude);
  return {
    x: r * Math.sin(phi) * Math.cos(theta),
    y: r * Math.cos(phi),
    z: r * Math.sin(phi) * Math.sin(theta)
  };
}
function cartesian2Polar(_ref) {
  var x = _ref.x, y = _ref.y, z = _ref.z;
  var r = Math.sqrt(x * x + y * y + z * z);
  var phi = Math.acos(y / r);
  var theta = Math.atan2(z, x);
  return {
    lat: 90 - phi * 180 / Math.PI,
    lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),
    // keep within [-180, 180] boundaries
    altitude: r / GLOBE_RADIUS - 1
  };
}
function deg2Rad$1(deg) {
  return deg * Math.PI / 180;
}
var THREE$h = window.THREE ? window.THREE : {
  BackSide,
  BufferAttribute,
  Color,
  Mesh,
  ShaderMaterial
};
var fragmentShader = "\nuniform vec3 color;\nuniform float coefficient;\nuniform float power;\nvarying vec3 vVertexNormal;\nvarying vec3 vVertexWorldPosition;\nvoid main() {\n  vec3 worldCameraToVertex = vVertexWorldPosition - cameraPosition;\n  vec3 viewCameraToVertex	= (viewMatrix * vec4(worldCameraToVertex, 0.0)).xyz;\n  viewCameraToVertex = normalize(viewCameraToVertex);\n  float intensity	= pow(\n    coefficient + dot(vVertexNormal, viewCameraToVertex),\n    power\n  );\n  gl_FragColor = vec4(color, intensity);\n}";
var vertexShader = "\nvarying vec3 vVertexWorldPosition;\nvarying vec3 vVertexNormal;\nvoid main() {\n  vVertexNormal	= normalize(normalMatrix * normal);\n  vVertexWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n  gl_Position	= projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n";
var defaultOptions = {
  backside: true,
  coefficient: 0.5,
  color: "gold",
  size: 2,
  power: 1
};
function createGlowMaterial(coefficient, color2, power) {
  return new THREE$h.ShaderMaterial({
    depthWrite: false,
    fragmentShader,
    transparent: true,
    uniforms: {
      coefficient: {
        value: coefficient
      },
      color: {
        value: new THREE$h.Color(color2)
      },
      power: {
        value: power
      }
    },
    vertexShader
  });
}
function createGlowGeometry(geometry, size) {
  var glowGeometry = geometry.clone();
  var position = new Float32Array(geometry.attributes.position.count * 3);
  for (var idx = 0, len = position.length; idx < len; idx++) {
    var normal = geometry.attributes.normal.array[idx];
    var curPos = geometry.attributes.position.array[idx];
    position[idx] = curPos + normal * size;
  }
  glowGeometry.setAttribute("position", new THREE$h.BufferAttribute(position, 3));
  return glowGeometry;
}
function createGlowMesh(geometry) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOptions;
  var backside = options.backside, coefficient = options.coefficient, color2 = options.color, size = options.size, power = options.power;
  var glowGeometry = createGlowGeometry(geometry, size);
  var glowMaterial = createGlowMaterial(coefficient, color2, power);
  if (backside) {
    glowMaterial.side = THREE$h.BackSide;
  }
  return new THREE$h.Mesh(glowGeometry, glowMaterial);
}
var THREE$g = window.THREE ? window.THREE : {
  Color,
  LineBasicMaterial,
  LineSegments,
  Mesh,
  MeshPhongMaterial,
  SphereGeometry,
  SRGBColorSpace,
  TextureLoader
};
var GlobeLayerKapsule = index({
  props: {
    globeImageUrl: {},
    bumpImageUrl: {},
    showGlobe: {
      "default": true,
      onChange: function onChange(showGlobe, state) {
        state.globeObj.visible = !!showGlobe;
      },
      triggerUpdate: false
    },
    showGraticules: {
      "default": false,
      onChange: function onChange2(showGraticules, state) {
        state.graticulesObj.visible = !!showGraticules;
      },
      triggerUpdate: false
    },
    showAtmosphere: {
      "default": true,
      onChange: function onChange3(showAtmosphere, state) {
        state.atmosphereObj && (state.atmosphereObj.visible = !!showAtmosphere);
      },
      triggerUpdate: false
    },
    atmosphereColor: {
      "default": "lightskyblue"
    },
    atmosphereAltitude: {
      "default": 0.15
    },
    onReady: {
      "default": function _default() {
      },
      triggerUpdate: false
    }
  },
  methods: {
    globeMaterial: function globeMaterial(state, _globeMaterial) {
      if (_globeMaterial !== void 0) {
        state.globeObj.material = _globeMaterial || state.defaultGlobeMaterial;
        return this;
      }
      return state.globeObj.material;
    },
    _destructor: function _destructor(state) {
      emptyObject(state.globeObj);
      emptyObject(state.graticulesObj);
    }
  },
  stateInit: function stateInit() {
    var globeGeometry = new THREE$g.SphereGeometry(GLOBE_RADIUS, 75, 75);
    var defaultGlobeMaterial = new THREE$g.MeshPhongMaterial({
      color: 0
    });
    var globeObj = new THREE$g.Mesh(globeGeometry, defaultGlobeMaterial);
    globeObj.rotation.y = -Math.PI / 2;
    globeObj.__globeObjType = "globe";
    var graticulesObj = new THREE$g.LineSegments(new GeoJsonGeometry(graticule10(), GLOBE_RADIUS, 2), new THREE$g.LineBasicMaterial({
      color: "lightgrey",
      transparent: true,
      opacity: 0.1
    }));
    return {
      globeObj,
      graticulesObj,
      defaultGlobeMaterial
    };
  },
  init: function init(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
    state.scene.add(state.globeObj);
    state.scene.add(state.graticulesObj);
    state.ready = false;
  },
  update: function update2(state, changedProps) {
    var globeMaterial2 = state.globeObj.material;
    if (changedProps.hasOwnProperty("globeImageUrl")) {
      if (!state.globeImageUrl) {
        !globeMaterial2.color && (globeMaterial2.color = new THREE$g.Color(0));
      } else {
        new THREE$g.TextureLoader().load(state.globeImageUrl, function(texture) {
          texture.colorSpace = THREE$g.SRGBColorSpace;
          globeMaterial2.map = texture;
          globeMaterial2.color = null;
          globeMaterial2.needsUpdate = true;
          !state.ready && (state.ready = true) && setTimeout(state.onReady);
        });
      }
    }
    if (changedProps.hasOwnProperty("bumpImageUrl")) {
      if (!state.bumpImageUrl) {
        globeMaterial2.bumpMap = null;
        globeMaterial2.needsUpdate = true;
      } else {
        state.bumpImageUrl && new THREE$g.TextureLoader().load(state.bumpImageUrl, function(texture) {
          globeMaterial2.bumpMap = texture;
          globeMaterial2.needsUpdate = true;
        });
      }
    }
    if (changedProps.hasOwnProperty("atmosphereColor") || changedProps.hasOwnProperty("atmosphereAltitude")) {
      if (state.atmosphereObj) {
        state.scene.remove(state.atmosphereObj);
        emptyObject(state.atmosphereObj);
      }
      if (state.atmosphereColor && state.atmosphereAltitude) {
        var obj = state.atmosphereObj = createGlowMesh(state.globeObj.geometry, {
          backside: true,
          color: state.atmosphereColor,
          size: GLOBE_RADIUS * state.atmosphereAltitude,
          power: 3.5,
          // dispersion
          coefficient: 0.1
        });
        obj.visible = !!state.showAtmosphere;
        obj.__globeObjType = "atmosphere";
        state.scene.add(obj);
      }
    }
    if (!state.ready && !state.globeImageUrl) {
      state.ready = true;
      state.onReady();
    }
  }
});
var colorStr2Hex = function colorStr2Hex2(str) {
  return isNaN(str) ? parseInt(tinycolor(str).toHex(), 16) : str;
};
var colorAlpha = function colorAlpha2(str) {
  return str && isNaN(str) ? color(str).opacity : 1;
};
var color2ShaderArr = function color2ShaderArr2(str) {
  var includeAlpha = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var sRGBColorSpace = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var color2;
  var alpha = 1;
  var rgbaMatch = /^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.eE+-]+)\s*\)$/.exec(str.trim().toLowerCase());
  if (rgbaMatch) {
    var _rgbaMatch$slice = rgbaMatch.slice(1), _rgbaMatch$slice2 = _slicedToArray6(_rgbaMatch$slice, 4), r = _rgbaMatch$slice2[0], g = _rgbaMatch$slice2[1], b = _rgbaMatch$slice2[2], a = _rgbaMatch$slice2[3];
    color2 = new Color("rgb(".concat(+r, ",").concat(+g, ",").concat(+b, ")"));
    alpha = Math.min(+a, 1);
  } else {
    color2 = new Color(str);
  }
  sRGBColorSpace && color2.convertLinearToSRGB();
  var rgbArr = color2.toArray();
  return includeAlpha ? [].concat(_toConsumableArray4(rgbArr), [alpha]) : rgbArr;
};
function setMaterialOpacity(material, opacity, depthWrite) {
  material.opacity = opacity;
  material.transparent = opacity < 1;
  material.depthWrite = opacity >= 1;
  return material;
}
var THREE$f = window.THREE ? window.THREE : {
  Float32BufferAttribute
};
function array2BufferAttr(data, itemSize) {
  var BufferAttributeClass = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : THREE$f.Float32BufferAttribute;
  var ba = new BufferAttributeClass(data.length * itemSize, itemSize);
  itemSize === 1 ? data.forEach(function(val, idx) {
    return ba.setX(idx, val);
  }) : data.forEach(function(val, idx) {
    return ba.set(val, idx * itemSize);
  });
  return ba;
}
function bufferAttr2Array(ba) {
  var itemSize = ba.itemSize;
  var res = [];
  for (var i = 0; i < ba.count; i++) {
    res.push(ba.array.slice(i * itemSize, (i + 1) * itemSize));
  }
  return res;
}
function threeDigest(data, scene3) {
  var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, _ref$removeDelay = _ref.removeDelay, removeDelay = _ref$removeDelay === void 0 ? 0 : _ref$removeDelay;
  return viewDigest(data, scene3.children, function(obj) {
    return scene3.add(obj);
  }, function(obj) {
    var removeFn = function removeFn2() {
      scene3.remove(obj);
      emptyObject(obj);
      obj && obj.hasOwnProperty("__data") && delete obj.__data.__currentTargetD;
    };
    removeDelay ? setTimeout(removeFn, removeDelay) : removeFn();
  }, _objectSpread22({
    objBindAttr: "__threeObj"
  }, options));
}
var THREE$e = window.THREE ? window.THREE : {
  BufferGeometry,
  Color,
  CylinderGeometry,
  Matrix4,
  Mesh,
  MeshLambertMaterial,
  Object3D,
  Vector3
};
var bfg$2 = Object.assign({}, BufferGeometryUtils_exports);
var BufferGeometryUtils$2 = bfg$2.BufferGeometryUtils || bfg$2;
var PointsLayerKapsule = index({
  props: {
    pointsData: {
      "default": []
    },
    pointLat: {
      "default": "lat"
    },
    pointLng: {
      "default": "lng"
    },
    pointColor: {
      "default": function _default2() {
        return "#ffffaa";
      }
    },
    pointAltitude: {
      "default": 0.1
    },
    // in units of globe radius
    pointRadius: {
      "default": 0.25
    },
    // in deg
    pointResolution: {
      "default": 12,
      triggerUpdate: false
    },
    // how many slice segments in the cylinder's circumference
    pointsMerge: {
      "default": false
    },
    // boolean. Whether to merge all points into a single mesh for rendering performance
    pointsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init2(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
  },
  update: function update3(state) {
    var latAccessor = index3(state.pointLat);
    var lngAccessor = index3(state.pointLng);
    var altitudeAccessor = index3(state.pointAltitude);
    var radiusAccessor = index3(state.pointRadius);
    var colorAccessor = index3(state.pointColor);
    var pointGeometry = new THREE$e.CylinderGeometry(1, 1, 1, state.pointResolution);
    pointGeometry.applyMatrix4(new THREE$e.Matrix4().makeRotationX(Math.PI / 2));
    pointGeometry.applyMatrix4(new THREE$e.Matrix4().makeTranslation(0, 0, -0.5));
    var pxPerDeg = 2 * Math.PI * GLOBE_RADIUS / 360;
    var pointMaterials = {};
    var scene3 = state.pointsMerge ? new THREE$e.Object3D() : state.scene;
    threeDigest(state.pointsData, scene3, {
      createObj,
      updateObj
    });
    if (state.pointsMerge) {
      var pointsGeometry = !state.pointsData.length ? new THREE$e.BufferGeometry() : (BufferGeometryUtils$2.mergeGeometries || BufferGeometryUtils$2.mergeBufferGeometries)(state.pointsData.map(function(d) {
        var obj = d.__threeObj;
        d.__threeObj = void 0;
        var geom = obj.geometry.clone();
        obj.updateMatrix();
        geom.applyMatrix4(obj.matrix);
        var color2 = color2ShaderArr(colorAccessor(d));
        geom.setAttribute("color", array2BufferAttr(_toConsumableArray4(new Array(geom.getAttribute("position").count)).map(function() {
          return color2;
        }), 4));
        return geom;
      }));
      var points = new THREE$e.Mesh(pointsGeometry, new THREE$e.MeshLambertMaterial({
        color: 16777215,
        transparent: true,
        vertexColors: true
      }));
      points.__globeObjType = "points";
      points.__data = state.pointsData;
      emptyObject(state.scene);
      state.scene.add(points);
    }
    function createObj() {
      var obj = new THREE$e.Mesh(pointGeometry);
      obj.__globeObjType = "point";
      return obj;
    }
    function updateObj(obj, d) {
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, r = _obj$__currentTargetD.r, alt = _obj$__currentTargetD.alt, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng;
        Object.assign(obj.position, polar2Cartesian3(lat, lng));
        var globeCenter = state.pointsMerge ? new THREE$e.Vector3(0, 0, 0) : state.scene.localToWorld(new THREE$e.Vector3(0, 0, 0));
        obj.lookAt(globeCenter);
        obj.scale.x = obj.scale.y = Math.min(30, r) * pxPerDeg;
        obj.scale.z = Math.max(alt * GLOBE_RADIUS, 0.1);
      };
      var targetD = {
        alt: +altitudeAccessor(d),
        r: +radiusAccessor(d),
        lat: +latAccessor(d),
        lng: +lngAccessor(d)
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      if (Object.keys(targetD).some(function(k) {
        return currentTargetD[k] !== targetD[k];
      })) {
        if (state.pointsMerge || !state.pointsTransitionDuration || state.pointsTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.pointsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
      if (!state.pointsMerge) {
        var color2 = colorAccessor(d);
        var opacity = color2 ? colorAlpha(color2) : 0;
        var showCyl = !!opacity;
        obj.visible = showCyl;
        if (showCyl) {
          if (!pointMaterials.hasOwnProperty(color2)) {
            pointMaterials[color2] = new THREE$e.MeshLambertMaterial({
              color: colorStr2Hex(color2),
              transparent: opacity < 1,
              opacity
            });
          }
          obj.material = pointMaterials[color2];
        }
      }
    }
  }
});
var _excluded2 = ["stroke"];
var THREE$d = window.THREE ? window.THREE : {
  BufferGeometry,
  CubicBezierCurve3,
  Curve,
  Group,
  Line,
  Mesh,
  NormalBlending,
  QuadraticBezierCurve3,
  ShaderMaterial,
  TubeGeometry,
  Vector3
};
var FrameTicker$2 = import_frame_ticker.default["default"] || import_frame_ticker.default;
var gradientShaders$1 = {
  uniforms: {
    // dash param defaults, all relative to full length
    dashOffset: {
      value: 0
    },
    dashSize: {
      value: 1
    },
    gapSize: {
      value: 0
    },
    dashTranslate: {
      value: 0
    }
    // used for animating the dash
  },
  vertexShader: "\n    uniform float dashTranslate; \n\n    attribute vec4 vertexColor;\n    varying vec4 vColor;\n    \n    attribute float vertexRelDistance;\n    varying float vRelDistance;\n\n    void main() {\n      // pass through colors and distances\n      vColor = vertexColor;\n      vRelDistance = vertexRelDistance + dashTranslate;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",
  fragmentShader: "\n    uniform float dashOffset; \n    uniform float dashSize;\n    uniform float gapSize; \n    \n    varying vec4 vColor;\n    varying float vRelDistance;\n    \n    void main() {\n      // ignore pixels in the gap\n      if (vRelDistance < dashOffset) discard;\n      if (mod(vRelDistance - dashOffset, dashSize + gapSize) > dashSize) discard;\n    \n      // set px color: [r, g, b, a], interpolated between vertices \n      gl_FragColor = vColor; \n    }\n  "
};
var ArcsLayerKapsule = index({
  props: {
    arcsData: {
      "default": []
    },
    arcStartLat: {
      "default": "startLat"
    },
    arcStartLng: {
      "default": "startLng"
    },
    arcEndLat: {
      "default": "endLat"
    },
    arcEndLng: {
      "default": "endLng"
    },
    arcColor: {
      "default": function _default3() {
        return "#ffffaa";
      }
    },
    // single color, array of colors or color interpolation fn
    arcAltitude: {},
    // in units of globe radius
    arcAltitudeAutoScale: {
      "default": 0.5
    },
    // scale altitude proportional to great-arc distance between the two points
    arcStroke: {},
    // in deg
    arcCurveResolution: {
      "default": 64,
      triggerUpdate: false
    },
    // how many straight segments in the curve
    arcCircularResolution: {
      "default": 6,
      triggerUpdate: false
    },
    // how many slice segments in the tube's circumference
    arcDashLength: {
      "default": 1
    },
    // in units of line length
    arcDashGap: {
      "default": 0
    },
    arcDashInitialGap: {
      "default": 0
    },
    arcDashAnimateTime: {
      "default": 0
    },
    // ms
    arcsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  methods: {
    pauseAnimation: function pauseAnimation(state) {
      var _state$ticker;
      (_state$ticker = state.ticker) === null || _state$ticker === void 0 || _state$ticker.pause();
    },
    resumeAnimation: function resumeAnimation(state) {
      var _state$ticker2;
      (_state$ticker2 = state.ticker) === null || _state$ticker2 === void 0 || _state$ticker2.resume();
    },
    _destructor: function _destructor2(state) {
      var _state$ticker3;
      (_state$ticker3 = state.ticker) === null || _state$ticker3 === void 0 || _state$ticker3.dispose();
    }
  },
  init: function init3(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.ticker = new FrameTicker$2();
    state.ticker.onTick.add(function(_, timeDelta) {
      state.arcsData.filter(function(d) {
        return d.__threeObj && d.__threeObj.children.length && d.__threeObj.children[0].material && d.__threeObj.children[0].__dashAnimateStep;
      }).forEach(function(d) {
        var obj = d.__threeObj.children[0];
        var step = obj.__dashAnimateStep * timeDelta;
        var curTranslate = obj.material.uniforms.dashTranslate.value % 1e9;
        obj.material.uniforms.dashTranslate.value = curTranslate + step;
      });
    });
  },
  update: function update4(state) {
    var startLatAccessor = index3(state.arcStartLat);
    var startLngAccessor = index3(state.arcStartLng);
    var endLatAccessor = index3(state.arcEndLat);
    var endLngAccessor = index3(state.arcEndLng);
    var altitudeAccessor = index3(state.arcAltitude);
    var altitudeAutoScaleAccessor = index3(state.arcAltitudeAutoScale);
    var strokeAccessor = index3(state.arcStroke);
    var colorAccessor = index3(state.arcColor);
    var dashLengthAccessor = index3(state.arcDashLength);
    var dashGapAccessor = index3(state.arcDashGap);
    var dashInitialGapAccessor = index3(state.arcDashInitialGap);
    var dashAnimateTimeAccessor = index3(state.arcDashAnimateTime);
    var sharedMaterial = new THREE$d.ShaderMaterial(_objectSpread22(_objectSpread22({}, gradientShaders$1), {}, {
      transparent: true,
      blending: THREE$d.NormalBlending
    }));
    threeDigest(state.arcsData, state.scene, {
      createObj: function createObj() {
        var obj = new THREE$d.Group();
        obj.__globeObjType = "arc";
        return obj;
      },
      updateObj: function updateObj(group2, arc) {
        var stroke = strokeAccessor(arc);
        var useTube = stroke !== null && stroke !== void 0;
        if (!group2.children.length || useTube !== (group2.children[0].type === "Mesh")) {
          emptyObject(group2);
          var _obj = useTube ? new THREE$d.Mesh() : new THREE$d.Line(new THREE$d.BufferGeometry());
          _obj.material = sharedMaterial.clone();
          group2.add(_obj);
        }
        var obj = group2.children[0];
        Object.assign(obj.material.uniforms, {
          dashSize: {
            value: dashLengthAccessor(arc)
          },
          gapSize: {
            value: dashGapAccessor(arc)
          },
          dashOffset: {
            value: dashInitialGapAccessor(arc)
          }
        });
        var dashAnimateTime = dashAnimateTimeAccessor(arc);
        obj.__dashAnimateStep = dashAnimateTime > 0 ? 1e3 / dashAnimateTime : 0;
        var vertexColorArray = calcColorVertexArray(
          colorAccessor(arc),
          // single, array of colors or interpolator
          state.arcCurveResolution,
          // numSegments
          useTube ? state.arcCircularResolution + 1 : 1
          // num vertices per segment
        );
        var vertexRelDistanceArray = calcVertexRelDistances(
          state.arcCurveResolution,
          // numSegments
          useTube ? state.arcCircularResolution + 1 : 1,
          // num vertices per segment
          true
          // run from end to start, to animate in the correct direction
        );
        obj.geometry.setAttribute("vertexColor", vertexColorArray);
        obj.geometry.setAttribute("vertexRelDistance", vertexRelDistanceArray);
        var applyUpdate = function applyUpdate2(td) {
          var _arc$__currentTargetD = arc.__currentTargetD = td, stroke2 = _arc$__currentTargetD.stroke, curveD = _objectWithoutProperties3(_arc$__currentTargetD, _excluded2);
          var curve = calcCurve(curveD);
          if (useTube) {
            obj.geometry && obj.geometry.dispose();
            obj.geometry = new THREE$d.TubeGeometry(curve, state.arcCurveResolution, stroke2 / 2, state.arcCircularResolution);
            obj.geometry.setAttribute("vertexColor", vertexColorArray);
            obj.geometry.setAttribute("vertexRelDistance", vertexRelDistanceArray);
          } else {
            obj.geometry.setFromPoints(curve.getPoints(state.arcCurveResolution));
          }
        };
        var targetD = {
          stroke,
          alt: altitudeAccessor(arc),
          altAutoScale: +altitudeAutoScaleAccessor(arc),
          startLat: +startLatAccessor(arc),
          startLng: +startLngAccessor(arc),
          endLat: +endLatAccessor(arc),
          endLng: +endLngAccessor(arc)
        };
        var currentTargetD = arc.__currentTargetD || Object.assign({}, targetD, {
          altAutoScale: -1e-3
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.arcsTransitionDuration || state.arcsTransitionDuration < 0) {
            applyUpdate(targetD);
          } else {
            state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.arcsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
          }
        }
      }
    });
    function calcCurve(_ref2) {
      var alt = _ref2.alt, altAutoScale = _ref2.altAutoScale, startLat = _ref2.startLat, startLng = _ref2.startLng, endLat = _ref2.endLat, endLng = _ref2.endLng;
      var getVec = function getVec2(_ref3) {
        var _ref4 = _slicedToArray6(_ref3, 3), lng = _ref4[0], lat = _ref4[1], alt2 = _ref4[2];
        var _polar2Cartesian = polar2Cartesian3(lat, lng, alt2), x = _polar2Cartesian.x, y = _polar2Cartesian.y, z = _polar2Cartesian.z;
        return new THREE$d.Vector3(x, y, z);
      };
      var startPnt = [startLng, startLat];
      var endPnt = [endLng, endLat];
      var altitude = alt;
      (altitude === null || altitude === void 0) && // by default set altitude proportional to the great-arc distance
      (altitude = distance_default(startPnt, endPnt) / 2 * altAutoScale);
      if (altitude) {
        var interpolate = interpolate_default(startPnt, endPnt);
        var _map = [0.25, 0.75].map(function(t) {
          return [].concat(_toConsumableArray4(interpolate(t)), [altitude * 1.5]);
        }), _map2 = _slicedToArray6(_map, 2), m1Pnt = _map2[0], m2Pnt = _map2[1];
        var curve = _construct(THREE$d.CubicBezierCurve3, _toConsumableArray4([startPnt, m1Pnt, m2Pnt, endPnt].map(getVec)));
        return curve;
      } else {
        var _alt = 1e-3;
        return calcSphereArc.apply(void 0, _toConsumableArray4([[].concat(startPnt, [_alt]), [].concat(endPnt, [_alt])].map(getVec)));
      }
      function calcSphereArc(startVec, endVec) {
        var angle2 = startVec.angleTo(endVec);
        var getGreatCirclePoint = angle2 === 0 ? function() {
          return startVec.clone();
        } : function(t) {
          return new THREE$d.Vector3().addVectors(startVec.clone().multiplyScalar(Math.sin((1 - t) * angle2)), endVec.clone().multiplyScalar(Math.sin(t * angle2))).divideScalar(Math.sin(angle2));
        };
        var sphereArc = new THREE$d.Curve();
        sphereArc.getPoint = getGreatCirclePoint;
        return sphereArc;
      }
    }
    function calcColorVertexArray(colors, numSegments) {
      var numVerticesPerSegment = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var numVerticesGroup = numSegments + 1;
      var getVertexColor;
      if (colors instanceof Array || colors instanceof Function) {
        var colorInterpolator = colors instanceof Array ? linear2().domain(colors.map(function(_, idx) {
          return idx / (colors.length - 1);
        })).range(colors) : colors;
        getVertexColor = function getVertexColor2(t) {
          return color2ShaderArr(colorInterpolator(t), true, true);
        };
      } else {
        var vertexColor = color2ShaderArr(colors, true, true);
        getVertexColor = function getVertexColor2() {
          return vertexColor;
        };
      }
      var vertexColors = [];
      for (var v2 = 0, l = numVerticesGroup; v2 < l; v2++) {
        var _vertexColor = getVertexColor(v2 / (l - 1));
        for (var s = 0; s < numVerticesPerSegment; s++) {
          vertexColors.push(_vertexColor);
        }
      }
      return array2BufferAttr(vertexColors, 4);
    }
    function calcVertexRelDistances(numSegments) {
      var numVerticesPerSegment = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var invert = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var numVerticesGroup = numSegments + 1;
      var vertexDistances = [];
      for (var v2 = 0, l = numVerticesGroup; v2 < l; v2++) {
        var relDistance = v2 / (l - 1);
        for (var s = 0; s < numVerticesPerSegment; s++) {
          vertexDistances.push(relDistance);
        }
      }
      invert && vertexDistances.reverse();
      return array2BufferAttr(vertexDistances, 1);
    }
  }
});
var THREE$c = window.THREE ? window.THREE : {
  BufferGeometry,
  Color,
  DoubleSide,
  Mesh,
  MeshLambertMaterial,
  Object3D
};
var bfg$1 = Object.assign({}, BufferGeometryUtils_exports);
var BufferGeometryUtils$1 = bfg$1.BufferGeometryUtils || bfg$1;
var HexBinLayerKapsule = index({
  props: {
    hexBinPointsData: {
      "default": []
    },
    hexBinPointLat: {
      "default": "lat"
    },
    hexBinPointLng: {
      "default": "lng"
    },
    hexBinPointWeight: {
      "default": 1
    },
    hexBinResolution: {
      "default": 4
    },
    // 0-15. Level 0 partitions the earth in 122 (mostly) hexagonal cells. Each subsequent level sub-divides the previous in roughly 7 hexagons.
    hexMargin: {
      "default": 0.2
    },
    // in fraction of diameter
    hexTopCurvatureResolution: {
      "default": 5
    },
    // in angular degrees
    hexTopColor: {
      "default": function _default4() {
        return "#ffffaa";
      }
    },
    hexSideColor: {
      "default": function _default5() {
        return "#ffffaa";
      }
    },
    hexAltitude: {
      "default": function _default6(_ref) {
        var sumWeight = _ref.sumWeight;
        return sumWeight * 0.01;
      }
    },
    // in units of globe radius
    hexBinMerge: {
      "default": false
    },
    // boolean. Whether to merge all hex geometries into a single mesh for rendering performance
    hexTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init4(threeObj, state, _ref2) {
    var tweenGroup = _ref2.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
  },
  update: function update5(state) {
    var latAccessor = index3(state.hexBinPointLat);
    var lngAccessor = index3(state.hexBinPointLng);
    var weightAccessor = index3(state.hexBinPointWeight);
    var altitudeAccessor = index3(state.hexAltitude);
    var topColorAccessor = index3(state.hexTopColor);
    var sideColorAccessor = index3(state.hexSideColor);
    var marginAccessor = index3(state.hexMargin);
    var byH3Idx = index4(state.hexBinPointsData.map(function(d) {
      return _objectSpread22(_objectSpread22({}, d), {}, {
        h3Idx: latLngToCell(latAccessor(d), lngAccessor(d), state.hexBinResolution)
      });
    }), "h3Idx");
    var hexBins = Object.entries(byH3Idx).map(function(_ref3) {
      var _ref4 = _slicedToArray6(_ref3, 2), h3Idx = _ref4[0], points = _ref4[1];
      return {
        h3Idx,
        points,
        sumWeight: points.reduce(function(agg, d) {
          return agg + +weightAccessor(d);
        }, 0)
      };
    });
    var hexMaterials = {};
    var scene3 = state.hexBinMerge ? new THREE$c.Object3D() : state.scene;
    threeDigest(hexBins, scene3, {
      createObj,
      updateObj,
      idAccessor: function idAccessor(d) {
        return d.h3Idx;
      }
    });
    if (state.hexBinMerge) {
      var hexPointsGeometry = !hexBins.length ? new THREE$c.BufferGeometry() : (BufferGeometryUtils$1.mergeGeometries || BufferGeometryUtils$1.mergeBufferGeometries)(hexBins.map(function(d) {
        var obj = d.__threeObj;
        d.__threeObj = void 0;
        var geom = obj.geometry.toNonIndexed();
        obj.updateMatrix();
        geom.applyMatrix4(obj.matrix);
        var topColor = color2ShaderArr(topColorAccessor(d));
        var sideColor = color2ShaderArr(sideColorAccessor(d));
        var nVertices = geom.getAttribute("position").count;
        var topFaceIdx = geom.groups[0].count;
        geom.setAttribute("color", array2BufferAttr(_toConsumableArray4(new Array(nVertices)).map(function(_, idx) {
          return idx >= topFaceIdx ? topColor : sideColor;
        }), 4));
        return geom;
      }));
      var hexPoints = new THREE$c.Mesh(hexPointsGeometry, new THREE$c.MeshLambertMaterial({
        color: 16777215,
        transparent: true,
        vertexColors: true,
        side: THREE$c.DoubleSide
      }));
      hexPoints.__globeObjType = "hexBinPoints";
      hexPoints.__data = hexBins;
      emptyObject(state.scene);
      state.scene.add(hexPoints);
    }
    function createObj(d) {
      var obj = new THREE$c.Mesh();
      obj.__hexCenter = cellToLatLng(d.h3Idx);
      obj.__hexGeoJson = cellToBoundary(d.h3Idx, true).reverse();
      var centerLng = obj.__hexCenter[1];
      obj.__hexGeoJson.forEach(function(d2) {
        var edgeLng = d2[0];
        if (Math.abs(centerLng - edgeLng) > 170) {
          d2[0] += centerLng > edgeLng ? 360 : -360;
        }
      });
      obj.__globeObjType = "hexbin";
      return obj;
    }
    function updateObj(obj, d) {
      var relNum = function relNum2(st, end, rat) {
        return st - (st - end) * rat;
      };
      var margin = Math.max(0, Math.min(1, +marginAccessor(d)));
      var _obj$__hexCenter = _slicedToArray6(obj.__hexCenter, 2), clat = _obj$__hexCenter[0], clng = _obj$__hexCenter[1];
      var geoJson = margin === 0 ? obj.__hexGeoJson : obj.__hexGeoJson.map(function(_ref5) {
        var _ref6 = _slicedToArray6(_ref5, 2), elng = _ref6[0], elat = _ref6[1];
        return [[elng, clng], [elat, clat]].map(function(_ref7) {
          var _ref8 = _slicedToArray6(_ref7, 2), st = _ref8[0], end = _ref8[1];
          return relNum(st, end, margin);
        });
      });
      var topCurvatureResolution = state.hexTopCurvatureResolution;
      obj.geometry && obj.geometry.dispose();
      obj.geometry = new ConicPolygonBufferGeometry([geoJson], 0, GLOBE_RADIUS, false, true, true, topCurvatureResolution);
      var targetD = {
        alt: +altitudeAccessor(d)
      };
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt;
        obj.scale.x = obj.scale.y = obj.scale.z = 1 + alt;
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      if (Object.keys(targetD).some(function(k) {
        return currentTargetD[k] !== targetD[k];
      })) {
        if (state.hexBinMerge || !state.hexTransitionDuration || state.hexTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.hexTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
      if (!state.hexBinMerge) {
        var sideColor = sideColorAccessor(d);
        var topColor = topColorAccessor(d);
        [sideColor, topColor].forEach(function(color2) {
          if (!hexMaterials.hasOwnProperty(color2)) {
            var opacity = colorAlpha(color2);
            hexMaterials[color2] = new THREE$c.MeshLambertMaterial({
              color: colorStr2Hex(color2),
              transparent: opacity < 1,
              opacity,
              side: THREE$c.DoubleSide
            });
          }
        });
        obj.material = [sideColor, topColor].map(function(color2) {
          return hexMaterials[color2];
        });
      }
    }
  }
});
var sq = function sq2(x) {
  return x * x;
};
function geoDistance(a, b) {
  var sqrt4 = Math.sqrt;
  var cos3 = Math.cos;
  var toRad = function toRad2(x) {
    return x * Math.PI / 180;
  };
  var hav = function hav2(x) {
    return sq(Math.sin(x / 2));
  };
  var latA = toRad(a[1]);
  var latB = toRad(b[1]);
  var lngA = toRad(a[0]);
  var lngB = toRad(b[0]);
  return 2 * Math.asin(sqrt4(hav(latB - latA) + cos3(latA) * cos3(latB) * hav(lngB - lngA)));
}
var sqrt2PI = Math.sqrt(2 * Math.PI);
function gaussianKernel(x, bw) {
  return Math.exp(-sq(x / bw) / 2) / (bw * sqrt2PI);
}
var getGeoKDE = function getGeoKDE2(_ref) {
  var _ref2 = _slicedToArray6(_ref, 2), lng = _ref2[0], lat = _ref2[1];
  var data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref3$lngAccessor = _ref3.lngAccessor, lngAccessor = _ref3$lngAccessor === void 0 ? function(d) {
    return d[0];
  } : _ref3$lngAccessor, _ref3$latAccessor = _ref3.latAccessor, latAccessor = _ref3$latAccessor === void 0 ? function(d) {
    return d[1];
  } : _ref3$latAccessor, _ref3$weightAccessor = _ref3.weightAccessor, weightAccessor = _ref3$weightAccessor === void 0 ? function() {
    return 1;
  } : _ref3$weightAccessor, bandwidth = _ref3.bandwidth;
  var pnt = [lng, lat];
  var bwRad = bandwidth * Math.PI / 180;
  return sum(data.map(function(d) {
    var weight = weightAccessor(d);
    if (!weight) return 0;
    var dist2 = geoDistance(pnt, [lngAccessor(d), latAccessor(d)]);
    return gaussianKernel(dist2, bwRad) * weight;
  }));
};
var THREE$b = window.THREE ? window.THREE : {
  Mesh,
  MeshLambertMaterial,
  SphereGeometry
};
var RES_BW_FACTOR = 3.5;
var MIN_RESOLUTION = 0.1;
var BW_RADIUS_INFLUENCE = 3.5;
var _PointsOctree_brand = /* @__PURE__ */ new WeakSet();
var _points = /* @__PURE__ */ new WeakMap();
var _pntOctree = /* @__PURE__ */ new WeakMap();
var _distance = /* @__PURE__ */ new WeakMap();
var PointsOctree = function() {
  function PointsOctree2(points, neighborhoodAngularDistance) {
    _classCallCheck4(this, PointsOctree2);
    _classPrivateMethodInitSpec(this, _PointsOctree_brand);
    _classPrivateFieldInitSpec(this, _points, void 0);
    _classPrivateFieldInitSpec(this, _pntOctree, void 0);
    _classPrivateFieldInitSpec(this, _distance, void 0);
    _classPrivateFieldSet2(_points, this, points);
    _classPrivateFieldSet2(_pntOctree, this, (0, import_yaot.default)());
    _classPrivateFieldGet2(_pntOctree, this).init(points.map(function(d) {
      return [d.x, d.y, d.z];
    }).flat());
    _classPrivateFieldSet2(_distance, this, _assertClassBrand(_PointsOctree_brand, this, _getDistance).call(this, polar2Cartesian3(0, 0), polar2Cartesian3(0, Math.min(180, neighborhoodAngularDistance))));
  }
  return _createClass4(PointsOctree2, [{
    key: "getNearPoints",
    value: function getNearPoints(x, y, z) {
      var _this = this;
      return _classPrivateFieldGet2(_pntOctree, this).intersectSphere(x, y, z, _classPrivateFieldGet2(_distance, this)).map(function(idx) {
        return _classPrivateFieldGet2(_points, _this)[idx / 3];
      });
    }
  }]);
}();
function _getDistance(a, b) {
  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) + Math.pow(a.z - b.z, 2));
}
var defaultColorInterpolator = function defaultColorInterpolator2(t) {
  var c3 = color(turbo_default(t));
  c3.opacity = Math.cbrt(t);
  return c3.formatRgb();
};
var HeatmapsLayerKapsule = index({
  props: {
    heatmapsData: {
      "default": []
    },
    heatmapPoints: {
      "default": function _default7(pnts) {
        return pnts;
      }
    },
    heatmapPointLat: {
      "default": function _default8(d) {
        return d[0];
      }
    },
    heatmapPointLng: {
      "default": function _default9(d) {
        return d[1];
      }
    },
    heatmapPointWeight: {
      "default": 1
    },
    heatmapBandwidth: {
      "default": 4
    },
    // Gaussian kernel bandwidth, in angular degrees
    heatmapColorFn: {
      "default": function _default10() {
        return defaultColorInterpolator;
      }
    },
    heatmapColorSaturation: {
      "default": 1.5
    },
    // multiplier for color scale max
    heatmapBaseAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    heatmapTopAltitude: {},
    // in units of globe radius
    heatmapsTransitionDuration: {
      "default": 0,
      triggerUpdate: false
    }
    // ms
  },
  init: function init5(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
  },
  update: function update6(state) {
    var pointsAccessor = index3(state.heatmapPoints);
    var latPntAccessor = index3(state.heatmapPointLat);
    var lngPntAccessor = index3(state.heatmapPointLng);
    var weightPntAccessor = index3(state.heatmapPointWeight);
    var bandwidthAccessor = index3(state.heatmapBandwidth);
    var colorFnAccessor = index3(state.heatmapColorFn);
    var saturationAccessor = index3(state.heatmapColorSaturation);
    var baseAltitudeAccessor = index3(state.heatmapBaseAltitude);
    var topAltitudeAccessor = index3(state.heatmapTopAltitude);
    threeDigest(state.heatmapsData, state.scene, {
      createObj: function createObj(d) {
        var obj = new THREE$b.Mesh(new THREE$b.SphereGeometry(GLOBE_RADIUS), new THREE$b.MeshLambertMaterial({
          vertexColors: true,
          transparent: true
        }));
        obj.__globeObjType = "heatmap";
        return obj;
      },
      updateObj: function updateObj(obj, d) {
        var bandwidth = bandwidthAccessor(d);
        var colorFn = colorFnAccessor(d);
        var saturation = saturationAccessor(d);
        var baseAlt = baseAltitudeAccessor(d);
        var topAlt = topAltitudeAccessor(d);
        var pnts = pointsAccessor(d).map(function(pnt) {
          var lat = latPntAccessor(pnt);
          var lng = lngPntAccessor(pnt);
          var _polar2Cartesian = polar2Cartesian3(lat, lng), x = _polar2Cartesian.x, y = _polar2Cartesian.y, z = _polar2Cartesian.z;
          return {
            x,
            y,
            z,
            lat,
            lng,
            weight: weightPntAccessor(pnt)
          };
        });
        var resolution2 = Math.max(MIN_RESOLUTION, bandwidth / RES_BW_FACTOR);
        var equatorNumSegments = Math.ceil(360 / (resolution2 || -1));
        if (obj.geometry.parameters.widthSegments !== equatorNumSegments) {
          obj.geometry.dispose();
          obj.geometry = new THREE$b.SphereGeometry(GLOBE_RADIUS, equatorNumSegments, equatorNumSegments / 2);
        }
        var vertexCoords = bufferAttr2Array(obj.geometry.getAttribute("position"));
        var vertexGeoCoords = vertexCoords.map(function(_ref2) {
          var _ref3 = _slicedToArray6(_ref2, 3), x = _ref3[0], y = _ref3[1], z = _ref3[2];
          var _cartesian2Polar = cartesian2Polar({
            x,
            y,
            z
          }), lng = _cartesian2Polar.lng, lat = _cartesian2Polar.lat;
          return [lng, lat];
        });
        var pntsOctree = new PointsOctree(pnts, bandwidth * BW_RADIUS_INFLUENCE);
        var kdeVals = vertexGeoCoords.map(function(vxCoords, idx) {
          var _vertexCoords$idx = _slicedToArray6(vertexCoords[idx], 3), x = _vertexCoords$idx[0], y = _vertexCoords$idx[1], z = _vertexCoords$idx[2];
          return getGeoKDE(vxCoords, pntsOctree.getNearPoints(x, y, z), {
            latAccessor: function latAccessor(d2) {
              return d2.lat;
            },
            lngAccessor: function lngAccessor(d2) {
              return d2.lng;
            },
            weightAccessor: function weightAccessor(d2) {
              return d2.weight;
            },
            bandwidth
          });
        });
        var applyUpdate = function applyUpdate2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, kdeVals2 = _obj$__currentTargetD.kdeVals, topAlt2 = _obj$__currentTargetD.topAlt, saturation2 = _obj$__currentTargetD.saturation;
          var maxVal = max(kdeVals2.map(Math.abs)) || 1e-15;
          obj.geometry.setAttribute("color", array2BufferAttr(
            // normalization between [0, saturation]
            kdeVals2.map(function(val) {
              return color2ShaderArr(colorFn(val / maxVal * saturation2));
            }),
            4
          ));
          var altScale = linear2([0, maxVal], [baseAlt, topAlt2 || baseAlt]);
          obj.geometry.setAttribute("position", array2BufferAttr(kdeVals2.map(function(val, idx) {
            var _vertexGeoCoords$idx = _slicedToArray6(vertexGeoCoords[idx], 2), lng = _vertexGeoCoords$idx[0], lat = _vertexGeoCoords$idx[1];
            var alt = altScale(Math.abs(val));
            var p = polar2Cartesian3(lat, lng, alt);
            return [p.x, p.y, p.z];
          }), 3));
        };
        var targetD = {
          kdeVals,
          topAlt,
          saturation
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          kdeVals: kdeVals.map(function() {
            return 0;
          }),
          topAlt: !topAlt ? topAlt : baseAlt,
          saturation: 0.5
        });
        currentTargetD.kdeVals.length !== kdeVals.length && (currentTargetD.kdeVals = kdeVals.slice());
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.heatmapsTransitionDuration || state.heatmapsTransitionDuration < 0) {
            applyUpdate(targetD);
          } else {
            state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.heatmapsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
          }
        }
      }
    });
  }
});
var THREE$a = window.THREE ? window.THREE : {
  DoubleSide,
  Group,
  LineBasicMaterial,
  LineSegments,
  Mesh,
  MeshBasicMaterial
};
var PolygonsLayerKapsule = index({
  props: {
    polygonsData: {
      "default": []
    },
    polygonGeoJsonGeometry: {
      "default": "geometry"
    },
    polygonSideColor: {
      "default": function _default11() {
        return "#ffffaa";
      }
    },
    polygonSideMaterial: {},
    polygonCapColor: {
      "default": function _default12() {
        return "#ffffaa";
      }
    },
    polygonCapMaterial: {},
    polygonStrokeColor: {},
    polygonAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    polygonCapCurvatureResolution: {
      "default": 5
    },
    // in angular degrees
    polygonsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init6(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
  },
  update: function update7(state) {
    var geoJsonAccessor = index3(state.polygonGeoJsonGeometry);
    var altitudeAccessor = index3(state.polygonAltitude);
    var capCurvatureResolutionAccessor = index3(state.polygonCapCurvatureResolution);
    var capColorAccessor = index3(state.polygonCapColor);
    var capMaterialAccessor = index3(state.polygonCapMaterial);
    var sideColorAccessor = index3(state.polygonSideColor);
    var sideMaterialAccessor = index3(state.polygonSideMaterial);
    var strokeColorAccessor = index3(state.polygonStrokeColor);
    var singlePolygons = [];
    state.polygonsData.forEach(function(polygon) {
      var objAttrs = {
        data: polygon,
        capColor: capColorAccessor(polygon),
        capMaterial: capMaterialAccessor(polygon),
        sideColor: sideColorAccessor(polygon),
        sideMaterial: sideMaterialAccessor(polygon),
        strokeColor: strokeColorAccessor(polygon),
        altitude: +altitudeAccessor(polygon),
        capCurvatureResolution: +capCurvatureResolutionAccessor(polygon)
      };
      var geoJson = geoJsonAccessor(polygon);
      var geoId = polygon.__id || "".concat(Math.round(Math.random() * 1e9));
      polygon.__id = geoId;
      if (geoJson.type === "Polygon") {
        singlePolygons.push(_objectSpread22({
          id: "".concat(geoId, "_0"),
          coords: geoJson.coordinates
        }, objAttrs));
      } else if (geoJson.type === "MultiPolygon") {
        singlePolygons.push.apply(singlePolygons, _toConsumableArray4(geoJson.coordinates.map(function(coords, idx) {
          return _objectSpread22({
            id: "".concat(geoId, "_").concat(idx),
            coords
          }, objAttrs);
        })));
      } else {
        console.warn("Unsupported GeoJson geometry type: ".concat(geoJson.type, ". Skipping geometry..."));
      }
    });
    threeDigest(singlePolygons, state.scene, {
      idAccessor: function idAccessor(d) {
        return d.id;
      },
      createObj: function createObj() {
        var obj = new THREE$a.Group();
        obj.__defaultSideMaterial = new THREE$a.MeshBasicMaterial({
          side: THREE$a.DoubleSide,
          depthWrite: true
        });
        obj.__defaultCapMaterial = new THREE$a.MeshBasicMaterial({
          side: THREE$a.DoubleSide,
          depthWrite: true
        });
        obj.add(new THREE$a.Mesh(void 0, [
          obj.__defaultSideMaterial,
          // side material
          obj.__defaultCapMaterial
          // cap material
        ]));
        obj.add(new THREE$a.LineSegments(void 0, new THREE$a.LineBasicMaterial()));
        obj.__globeObjType = "polygon";
        return obj;
      },
      updateObj: function updateObj(obj, _ref2) {
        var coords = _ref2.coords, capColor = _ref2.capColor, capMaterial = _ref2.capMaterial, sideColor = _ref2.sideColor, sideMaterial = _ref2.sideMaterial, strokeColor = _ref2.strokeColor, altitude = _ref2.altitude, capCurvatureResolution = _ref2.capCurvatureResolution;
        var _obj$children = _slicedToArray6(obj.children, 2), conicObj = _obj$children[0], strokeObj = _obj$children[1];
        var addStroke = !!strokeColor;
        strokeObj.visible = addStroke;
        if (!objMatch(conicObj.geometry.parameters || {}, {
          polygonGeoJson: coords,
          curvatureResolution: capCurvatureResolution
        })) {
          conicObj.geometry && conicObj.geometry.dispose();
          conicObj.geometry = new ConicPolygonBufferGeometry(coords, 0, GLOBE_RADIUS, false, true, true, capCurvatureResolution);
        }
        if (addStroke && (!strokeObj.geometry.parameters || strokeObj.geometry.parameters.geoJson.coordinates !== coords || strokeObj.geometry.parameters.resolution !== capCurvatureResolution)) {
          strokeObj.geometry && strokeObj.geometry.dispose();
          strokeObj.geometry = new GeoJsonGeometry({
            type: "Polygon",
            coordinates: coords
          }, GLOBE_RADIUS, capCurvatureResolution);
        }
        conicObj.material[0] = sideMaterial || obj.__defaultSideMaterial;
        conicObj.material[1] = capMaterial || obj.__defaultCapMaterial;
        [!sideMaterial && sideColor, !capMaterial && capColor].forEach(function(color2, materialIdx) {
          if (!color2) return;
          var material2 = conicObj.material[materialIdx];
          var opacity2 = colorAlpha(color2);
          material2.color.set(colorStr2Hex(color2));
          material2.transparent = opacity2 < 1;
          material2.opacity = opacity2;
        });
        if (addStroke) {
          var material = strokeObj.material;
          var opacity = colorAlpha(strokeColor);
          material.color.set(colorStr2Hex(strokeColor));
          material.transparent = opacity < 1;
          material.opacity = opacity;
        }
        var targetD = {
          alt: altitude
        };
        var applyUpdate = function applyUpdate2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt;
          conicObj.scale.x = conicObj.scale.y = conicObj.scale.z = 1 + alt;
          addStroke && (strokeObj.scale.x = strokeObj.scale.y = strokeObj.scale.z = 1 + alt + 1e-4);
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          alt: -1e-3
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.polygonsTransitionDuration || state.polygonsTransitionDuration < 0 || currentTargetD.alt === targetD.alt) {
            applyUpdate(targetD);
          } else {
            state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.polygonsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
          }
        }
      }
    });
  }
});
function objMatch(obj, attrs) {
  var compFn = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return function(a, b) {
      return a === b;
    };
  };
  return Object.entries(attrs).every(function(_ref3) {
    var _ref4 = _slicedToArray6(_ref3, 2), k = _ref4[0], v2 = _ref4[1];
    return obj.hasOwnProperty(k) && compFn(k)(obj[k], v2);
  });
}
var THREE$9 = window.THREE ? window.THREE : {
  BufferGeometry,
  CircleGeometry,
  DoubleSide,
  Mesh,
  MeshLambertMaterial,
  Vector3
};
var bfg = Object.assign({}, BufferGeometryUtils_exports);
var BufferGeometryUtils = bfg.BufferGeometryUtils || bfg;
var HexedPolygonsLayerKapsule = index({
  props: {
    hexPolygonsData: {
      "default": []
    },
    hexPolygonGeoJsonGeometry: {
      "default": "geometry"
    },
    hexPolygonColor: {
      "default": function _default13() {
        return "#ffffaa";
      }
    },
    hexPolygonAltitude: {
      "default": 1e-3
    },
    // in units of globe radius
    hexPolygonResolution: {
      "default": 3
    },
    // 0-15. Level 0 partitions the earth in 122 (mostly) hexagonal cells. Each subsequent level sub-divides the previous in roughly 7 hexagons.
    hexPolygonMargin: {
      "default": 0.2
    },
    // in fraction of hex diameter
    hexPolygonUseDots: {
      "default": false
    },
    // if points should be circular instead of hexagonal
    hexPolygonCurvatureResolution: {
      "default": 5
    },
    // in angular degrees, only relevant for hex tops
    hexPolygonDotResolution: {
      "default": 12
    },
    // how many slice segments in the dot circle's circumference
    hexPolygonsTransitionDuration: {
      "default": 0,
      triggerUpdate: false
    }
    // ms
  },
  init: function init7(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
  },
  update: function update8(state) {
    var geoJsonAccessor = index3(state.hexPolygonGeoJsonGeometry);
    var colorAccessor = index3(state.hexPolygonColor);
    var altitudeAccessor = index3(state.hexPolygonAltitude);
    var resolutionAccessor = index3(state.hexPolygonResolution);
    var marginAccessor = index3(state.hexPolygonMargin);
    var useDotsAccessor = index3(state.hexPolygonUseDots);
    var curvatureResolutionAccessor = index3(state.hexPolygonCurvatureResolution);
    var dotResolutionAccessor = index3(state.hexPolygonDotResolution);
    threeDigest(state.hexPolygonsData, state.scene, {
      createObj: function createObj(d) {
        var obj = new THREE$9.Mesh(void 0, new THREE$9.MeshLambertMaterial({
          side: THREE$9.DoubleSide
        }));
        obj.__globeObjType = "hexPolygon";
        return obj;
      },
      updateObj: function updateObj(obj, d) {
        var geoJson = geoJsonAccessor(d);
        var h3Res = resolutionAccessor(d);
        var alt = altitudeAccessor(d);
        var margin = Math.max(0, Math.min(1, +marginAccessor(d)));
        var useDots = useDotsAccessor(d);
        var curvatureResolution = curvatureResolutionAccessor(d);
        var dotResolution = dotResolutionAccessor(d);
        var color2 = colorAccessor(d);
        var opacity = colorAlpha(color2);
        obj.material.color.set(colorStr2Hex(color2));
        obj.material.transparent = opacity < 1;
        obj.material.opacity = opacity;
        var targetD = {
          alt,
          margin,
          curvatureResolution
        };
        var memD = {
          geoJson,
          h3Res
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          alt: -1e-3
        });
        var currentMemD = obj.__currentMemD || memD;
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        }) || Object.keys(memD).some(function(k) {
          return currentMemD[k] !== memD[k];
        })) {
          obj.__currentMemD = memD;
          var h3Idxs = [];
          if (geoJson.type === "Polygon") {
            polygonToCells(geoJson.coordinates, h3Res, true).forEach(function(idx) {
              return h3Idxs.push(idx);
            });
          } else if (geoJson.type === "MultiPolygon") {
            geoJson.coordinates.forEach(function(coords) {
              return polygonToCells(coords, h3Res, true).forEach(function(idx) {
                return h3Idxs.push(idx);
              });
            });
          } else {
            console.warn("Unsupported GeoJson geometry type: ".concat(geoJson.type, ". Skipping geometry..."));
          }
          var hexBins = h3Idxs.map(function(h3Idx) {
            var hexCenter = cellToLatLng(h3Idx);
            var hexGeoJson = cellToBoundary(h3Idx, true).reverse();
            var centerLng = hexCenter[1];
            hexGeoJson.forEach(function(d2) {
              var edgeLng = d2[0];
              if (Math.abs(centerLng - edgeLng) > 170) {
                d2[0] += centerLng > edgeLng ? 360 : -360;
              }
            });
            return {
              h3Idx,
              hexCenter,
              hexGeoJson
            };
          });
          var applyUpdate = function applyUpdate2(td) {
            var _obj$__currentTargetD = obj.__currentTargetD = td, alt2 = _obj$__currentTargetD.alt, margin2 = _obj$__currentTargetD.margin, curvatureResolution2 = _obj$__currentTargetD.curvatureResolution;
            obj.geometry && obj.geometry.dispose();
            obj.geometry = !hexBins.length ? new THREE$9.BufferGeometry() : (BufferGeometryUtils.mergeGeometries || BufferGeometryUtils.mergeBufferGeometries)(hexBins.map(function(h) {
              var _h$hexCenter = _slicedToArray6(h.hexCenter, 2), clat = _h$hexCenter[0], clng = _h$hexCenter[1];
              if (useDots) {
                var centerPos = polar2Cartesian3(clat, clng, alt2);
                var edgePos = polar2Cartesian3(h.hexGeoJson[0][1], h.hexGeoJson[0][0], alt2);
                var r = 0.85 * (1 - margin2) * new THREE$9.Vector3(centerPos.x, centerPos.y, centerPos.z).distanceTo(new THREE$9.Vector3(edgePos.x, edgePos.y, edgePos.z));
                var geometry = new CircleGeometry(r, dotResolution);
                geometry.rotateX(deg2Rad$1(-clat));
                geometry.rotateY(deg2Rad$1(clng));
                geometry.translate(centerPos.x, centerPos.y, centerPos.z);
                return geometry;
              } else {
                var relNum = function relNum2(st, end, rat) {
                  return st - (st - end) * rat;
                };
                var _geoJson = margin2 === 0 ? h.hexGeoJson : h.hexGeoJson.map(function(_ref2) {
                  var _ref3 = _slicedToArray6(_ref2, 2), elng = _ref3[0], elat = _ref3[1];
                  return [[elng, clng], [elat, clat]].map(function(_ref4) {
                    var _ref5 = _slicedToArray6(_ref4, 2), st = _ref5[0], end = _ref5[1];
                    return relNum(st, end, margin2);
                  });
                });
                return new ConicPolygonBufferGeometry([_geoJson], GLOBE_RADIUS, GLOBE_RADIUS * (1 + alt2), false, true, false, curvatureResolution2);
              }
            }));
          };
          if (!state.hexPolygonsTransitionDuration || state.hexPolygonsTransitionDuration < 0) {
            applyUpdate(targetD);
          } else {
            state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.hexPolygonsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
          }
        }
      }
    });
  }
});
var THREE$8 = window.THREE ? window.THREE : {
  Vector3
};
function interpolateVectors(fromPnts, toPnts) {
  var extendArr = function extendArr2(arr, length) {
    var repeatItem = arr[arr.length - 1];
    return [].concat(_toConsumableArray4(arr), _toConsumableArray4(_toConsumableArray4(new Array(length - arr.length)).map(function() {
      return repeatItem;
    })));
  };
  var arrLength = Math.max(fromPnts.length, toPnts.length);
  var interpolator = array_default.apply(void 0, _toConsumableArray4([fromPnts, toPnts].map(function(pnts) {
    return pnts.map(function(_ref) {
      var x = _ref.x, y = _ref.y, z = _ref.z;
      return [x, y, z];
    });
  }).map(function(arr) {
    return extendArr(arr, arrLength);
  })));
  return function(k) {
    return k === 0 ? fromPnts : k === 1 ? toPnts : interpolator(k).map(function(_ref2) {
      var _ref3 = _slicedToArray6(_ref2, 3), x = _ref3[0], y = _ref3[1], z = _ref3[2];
      return new THREE$8.Vector3(x, y, z);
    });
  };
}
var THREE$7 = window.THREE ? window.THREE : {
  BufferGeometry,
  Color,
  Group,
  Line,
  NormalBlending,
  ShaderMaterial,
  Vector3
};
var FrameTicker$1 = import_frame_ticker.default["default"] || import_frame_ticker.default;
var gradientShaders = {
  uniforms: {
    // dash param defaults, all relative to full length
    dashOffset: {
      value: 0
    },
    dashSize: {
      value: 1
    },
    gapSize: {
      value: 0
    },
    dashTranslate: {
      value: 0
    }
    // used for animating the dash
  },
  vertexShader: "\n    uniform float dashTranslate;\n\n    attribute vec4 vertexColor;\n    varying vec4 vColor;\n\n    attribute float vertexRelDistance;\n    varying float vRelDistance;\n\n    void main() {\n      // pass through colors and distances\n      vColor = vertexColor;\n      vRelDistance = vertexRelDistance + dashTranslate;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",
  fragmentShader: "\n    uniform float dashOffset;\n    uniform float dashSize;\n    uniform float gapSize;\n\n    varying vec4 vColor;\n    varying float vRelDistance;\n\n    void main() {\n      // ignore pixels in the gap\n      if (vRelDistance < dashOffset) discard;\n      if (mod(vRelDistance - dashOffset, dashSize + gapSize) > dashSize) discard;\n\n      // set px color: [r, g, b, a], interpolated between vertices\n      gl_FragColor = vColor;\n    }\n  "
};
var PathsLayerKapsule = index({
  props: {
    pathsData: {
      "default": []
    },
    pathPoints: {
      "default": function _default14(pnts) {
        return pnts;
      }
    },
    pathPointLat: {
      "default": function _default15(arr) {
        return arr[0];
      }
    },
    pathPointLng: {
      "default": function _default16(arr) {
        return arr[1];
      }
    },
    pathPointAlt: {
      "default": 1e-3
    },
    pathResolution: {
      "default": 2
    },
    // in deg
    pathColor: {
      "default": function _default17() {
        return "#ffffaa";
      }
    },
    // single color, array of colors or color interpolation fn
    pathStroke: {},
    // in deg
    pathDashLength: {
      "default": 1
    },
    // in units of line length
    pathDashGap: {
      "default": 0
    },
    pathDashInitialGap: {
      "default": 0
    },
    pathDashAnimateTime: {
      "default": 0
    },
    // ms
    pathTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    },
    // ms
    rendererSize: {}
    // necessary to set correct fatline proportions
  },
  methods: {
    pauseAnimation: function pauseAnimation2(state) {
      var _state$ticker;
      (_state$ticker = state.ticker) === null || _state$ticker === void 0 || _state$ticker.pause();
    },
    resumeAnimation: function resumeAnimation2(state) {
      var _state$ticker2;
      (_state$ticker2 = state.ticker) === null || _state$ticker2 === void 0 || _state$ticker2.resume();
    },
    _destructor: function _destructor3(state) {
      var _state$ticker3;
      (_state$ticker3 = state.ticker) === null || _state$ticker3 === void 0 || _state$ticker3.dispose();
    }
  },
  init: function init8(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.ticker = new FrameTicker$1();
    state.ticker.onTick.add(function(_, timeDelta) {
      state.pathsData.filter(function(d) {
        return d.__threeObj && d.__threeObj.children.length && d.__threeObj.children[0].material && d.__threeObj.children[0].__dashAnimateStep;
      }).forEach(function(d) {
        var obj = d.__threeObj.children[0];
        var step = obj.__dashAnimateStep * timeDelta;
        if (obj.type === "Line") {
          var curTranslate = obj.material.uniforms.dashTranslate.value % 1e9;
          obj.material.uniforms.dashTranslate.value = curTranslate + step;
        } else if (obj.type === "Line2") {
          var offset = obj.material.dashOffset - step;
          var dashLength = obj.material.dashSize + obj.material.gapSize;
          while (offset <= -dashLength) offset += dashLength;
          obj.material.dashOffset = offset;
        }
      });
    });
  },
  update: function update9(state) {
    var pointsAccessor = index3(state.pathPoints);
    var pointLatAccessor = index3(state.pathPointLat);
    var pointLngAccessor = index3(state.pathPointLng);
    var pointAltAccessor = index3(state.pathPointAlt);
    var strokeAccessor = index3(state.pathStroke);
    var colorAccessor = index3(state.pathColor);
    var dashLengthAccessor = index3(state.pathDashLength);
    var dashGapAccessor = index3(state.pathDashGap);
    var dashInitialGapAccessor = index3(state.pathDashInitialGap);
    var dashAnimateTimeAccessor = index3(state.pathDashAnimateTime);
    var sharedShaderMaterial = new THREE$7.ShaderMaterial(_objectSpread22(_objectSpread22({}, gradientShaders), {}, {
      transparent: true,
      blending: THREE$7.NormalBlending
    }));
    threeDigest(state.pathsData, state.scene, {
      createObj: function createObj() {
        var obj = new THREE$7.Group();
        obj.__globeObjType = "path";
        return obj;
      },
      updateObj: function updateObj(group2, path) {
        var stroke = strokeAccessor(path);
        var useFatLine = stroke !== null && stroke !== void 0;
        if (!group2.children.length || useFatLine === (group2.children[0].type === "Line")) {
          emptyObject(group2);
          var _obj = useFatLine ? new Line2(new LineGeometry(), new LineMaterial()) : new THREE$7.Line(
            new THREE$7.BufferGeometry(),
            sharedShaderMaterial.clone()
            // Separate material instance per object to have dedicated uniforms (but shared shaders)
          );
          group2.add(_obj);
        }
        var obj = group2.children[0];
        var points = calcPath(pointsAccessor(path), pointLatAccessor, pointLngAccessor, pointAltAccessor, state.pathResolution);
        var dashAnimateTime = dashAnimateTimeAccessor(path);
        obj.__dashAnimateStep = dashAnimateTime > 0 ? 1e3 / dashAnimateTime : 0;
        if (!useFatLine) {
          Object.assign(obj.material.uniforms, {
            dashSize: {
              value: dashLengthAccessor(path)
            },
            gapSize: {
              value: dashGapAccessor(path)
            },
            dashOffset: {
              value: dashInitialGapAccessor(path)
            }
          });
          var vertexColorArray = calcColorVertexArray(
            colorAccessor(path),
            // single, array of colors or interpolator
            points.length
            // numSegments
          );
          var vertexRelDistanceArray = calcVertexRelDistances(
            points.length,
            // numSegments
            1,
            // num vertices per segment
            true
            // run from end to start, to animate in the correct direction
          );
          obj.geometry.setAttribute("vertexColor", vertexColorArray);
          obj.geometry.setAttribute("vertexRelDistance", vertexRelDistanceArray);
        } else {
          obj.material.resolution = state.rendererSize;
          {
            var dashLength = dashLengthAccessor(path);
            var dashGap = dashGapAccessor(path);
            var dashInitialGap = dashInitialGapAccessor(path);
            obj.material.dashed = dashGap > 0;
            obj.material.dashed ? obj.material.defines.USE_DASH = "" : delete obj.material.defines.USE_DASH;
            if (obj.material.dashed) {
              obj.material.dashScale = 1 / calcLineDistance(points);
              obj.material.dashSize = dashLength;
              obj.material.gapSize = dashGap;
              obj.material.dashOffset = -dashInitialGap;
            }
          }
          {
            var colors = colorAccessor(path);
            if (colors instanceof Array) {
              var _vertexColorArray = calcColorVertexArray(
                colorAccessor(path),
                // single, array of colors or interpolator
                points.length - 1,
                // numSegments
                1,
                // num vertices per segment
                false
              );
              obj.geometry.setColors(_vertexColorArray.array);
              obj.material.vertexColors = true;
            } else {
              var color2 = colors;
              var opacity = colorAlpha(color2);
              obj.material.color = new THREE$7.Color(colorStr2Hex(color2));
              obj.material.transparent = opacity < 1;
              obj.material.opacity = opacity;
              obj.material.vertexColors = false;
            }
          }
          obj.material.needsUpdate = true;
        }
        var pointsInterpolator = interpolateVectors(path.__currentTargetD && path.__currentTargetD.points || [points[0]], points);
        var applyUpdate = function applyUpdate2(td) {
          var _path$__currentTarget = path.__currentTargetD = td, stroke2 = _path$__currentTarget.stroke, interpolK = _path$__currentTarget.interpolK;
          var kPoints = path.__currentTargetD.points = pointsInterpolator(interpolK);
          if (useFatLine) {
            var _ref2;
            obj.geometry.setPositions((_ref2 = []).concat.apply(_ref2, _toConsumableArray4(kPoints.map(function(_ref3) {
              var x = _ref3.x, y = _ref3.y, z = _ref3.z;
              return [x, y, z];
            }))));
            obj.material.linewidth = stroke2;
            obj.material.dashed && obj.computeLineDistances();
          } else {
            obj.geometry.setFromPoints(kPoints);
            obj.geometry.computeBoundingSphere();
          }
        };
        var targetD = {
          stroke,
          interpolK: 1
        };
        var currentTargetD = Object.assign({}, path.__currentTargetD || targetD, {
          interpolK: 0
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.pathTransitionDuration || state.pathTransitionDuration < 0) {
            applyUpdate(targetD);
          } else {
            state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.pathTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
          }
        }
      }
    });
    function calcLineDistance(pnts) {
      var totalDist = 0;
      var prevPnt;
      pnts.forEach(function(pnt) {
        prevPnt && (totalDist += prevPnt.distanceTo(pnt));
        prevPnt = pnt;
      });
      return totalDist;
    }
    function calcPath(points, latAccessor, lngAccessor, altAccessor, angularResolution) {
      var getInterpolatedVals = function getInterpolatedVals2(start, end, numPnts) {
        var result = [];
        for (var i = 1; i <= numPnts; i++) {
          result.push(start + (end - start) * i / (numPnts + 1));
        }
        return result;
      };
      var interpolateLine3 = function interpolateLine4() {
        var lineCoords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        var maxDegDistance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        var result = [];
        var prevPnt = null;
        lineCoords.forEach(function(pnt) {
          if (prevPnt) {
            while (Math.abs(prevPnt[1] - pnt[1]) > 180) prevPnt[1] += 360 * (prevPnt[1] < pnt[1] ? 1 : -1);
            var dist2 = Math.sqrt(Math.pow(pnt[0] - prevPnt[0], 2) + Math.pow(pnt[1] - prevPnt[1], 2));
            if (dist2 > maxDegDistance) {
              var numAdditionalPnts = Math.floor(dist2 / maxDegDistance);
              var lats = getInterpolatedVals(prevPnt[0], pnt[0], numAdditionalPnts);
              var lngs = getInterpolatedVals(prevPnt[1], pnt[1], numAdditionalPnts);
              var alts = getInterpolatedVals(prevPnt[2], pnt[2], numAdditionalPnts);
              for (var i = 0, len = lats.length; i < len; i++) {
                result.push([lats[i], lngs[i], alts[i]]);
              }
            }
          }
          result.push(prevPnt = pnt);
        });
        return result;
      };
      var getVec = function getVec2(_ref4) {
        var _ref5 = _slicedToArray6(_ref4, 3), lat = _ref5[0], lng = _ref5[1], alt = _ref5[2];
        var _polar2Cartesian = polar2Cartesian3(lat, lng, alt), x = _polar2Cartesian.x, y = _polar2Cartesian.y, z = _polar2Cartesian.z;
        return new THREE$7.Vector3(x, y, z);
      };
      return interpolateLine3(points.map(function(pnt) {
        return [latAccessor(pnt), lngAccessor(pnt), altAccessor(pnt)];
      }), angularResolution).map(getVec);
    }
    function calcColorVertexArray(colors, numSegments) {
      var numVerticesPerSegment = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var includeAlpha = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var numVerticesGroup = numSegments + 1;
      var getVertexColor;
      if (colors instanceof Array || colors instanceof Function) {
        var colorInterpolator = colors instanceof Array ? linear2().domain(colors.map(function(_, idx) {
          return idx / (colors.length - 1);
        })).range(colors) : colors;
        getVertexColor = function getVertexColor2(t) {
          return color2ShaderArr(colorInterpolator(t), includeAlpha, true);
        };
      } else {
        var vertexColor = color2ShaderArr(colors, includeAlpha, true);
        getVertexColor = function getVertexColor2() {
          return vertexColor;
        };
      }
      var vertexColors = [];
      for (var v2 = 0, l = numVerticesGroup; v2 < l; v2++) {
        var _vertexColor = getVertexColor(v2 / (l - 1));
        for (var s = 0; s < numVerticesPerSegment; s++) {
          vertexColors.push(_vertexColor);
        }
      }
      return array2BufferAttr(vertexColors, includeAlpha ? 4 : 3);
    }
    function calcVertexRelDistances(numSegments) {
      var numVerticesPerSegment = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var invert = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var numVerticesGroup = numSegments + 1;
      var vertexDistances = [];
      for (var v2 = 0, l = numVerticesGroup; v2 < l; v2++) {
        var relDistance = v2 / (l - 1);
        for (var s = 0; s < numVerticesPerSegment; s++) {
          vertexDistances.push(relDistance);
        }
      }
      invert && vertexDistances.reverse();
      return array2BufferAttr(vertexDistances, 1);
    }
  }
});
var THREE$6 = window.THREE ? window.THREE : {
  Euler,
  Mesh,
  MeshLambertMaterial,
  SphereGeometry
};
var TilesLayerKapsule = index({
  props: {
    tilesData: {
      "default": []
    },
    tileLat: {
      "default": "lat"
    },
    // tile centroid
    tileLng: {
      "default": "lng"
    },
    tileAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    tileWidth: {
      "default": 1
    },
    // in lng degrees
    tileHeight: {
      "default": 1
    },
    // in lat degrees
    tileUseGlobeProjection: {
      "default": true
    },
    // whether to size tiles relative to the globe coordinate system, or independently
    tileMaterial: {
      "default": function _default18() {
        return new THREE$6.MeshLambertMaterial({
          color: "#ffbb88",
          opacity: 0.4,
          transparent: true
        });
      }
    },
    tileCurvatureResolution: {
      "default": 5
    },
    // in angular degrees
    tilesTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init9(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
  },
  update: function update10(state) {
    var latAccessor = index3(state.tileLat);
    var lngAccessor = index3(state.tileLng);
    var altitudeAccessor = index3(state.tileAltitude);
    var widthAccessor = index3(state.tileWidth);
    var heightAccessor = index3(state.tileHeight);
    var useGlobeProjectionAccessor = index3(state.tileUseGlobeProjection);
    var materialAccessor = index3(state.tileMaterial);
    var curvatureResolutionAccessor = index3(state.tileCurvatureResolution);
    threeDigest(state.tilesData, state.scene, {
      createObj: function createObj() {
        var obj = new THREE$6.Mesh();
        obj.__globeObjType = "tile";
        return obj;
      },
      updateObj: function updateObj(obj, d) {
        obj.material = materialAccessor(d);
        var useGlobeProjection = useGlobeProjectionAccessor(d);
        var curvatureResolution = curvatureResolutionAccessor(d);
        var applyPosition = function applyPosition2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng, alt = _obj$__currentTargetD.alt, width = _obj$__currentTargetD.width, height = _obj$__currentTargetD.height;
          var rotLng = deg2Rad(lng);
          var rotLat = deg2Rad(-lat);
          obj.geometry && obj.geometry.dispose();
          obj.geometry = new THREE$6.SphereGeometry(GLOBE_RADIUS * (1 + alt), Math.ceil(width / (curvatureResolution || -1)), Math.ceil(height / (curvatureResolution || -1)), deg2Rad(90 - width / 2) + (useGlobeProjection ? rotLng : 0), deg2Rad(width), deg2Rad(90 - height / 2) + (useGlobeProjection ? rotLat : 0), deg2Rad(height));
          if (!useGlobeProjection) {
            obj.setRotationFromEuler(new THREE$6.Euler(rotLat, rotLng, 0, "YXZ"));
          }
        };
        var targetD = {
          lat: +latAccessor(d),
          lng: +lngAccessor(d),
          alt: +altitudeAccessor(d),
          width: +widthAccessor(d),
          height: +heightAccessor(d)
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          width: 0,
          height: 0
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.tilesTransitionDuration || state.tilesTransitionDuration < 0) {
            applyPosition(targetD);
          } else {
            state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.tilesTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyPosition).start());
          }
        }
      }
    });
  }
});
var deg2Rad = function deg2Rad2(deg) {
  return deg * Math.PI / 180;
};
var glyphs = { "0": { x_min: 73, x_max: 715, ha: 792, o: "m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 " }, "1": { x_min: 215.671875, x_max: 574, ha: 792, o: "m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 " }, "2": { x_min: 59, x_max: 731, ha: 792, o: "m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 " }, "3": { x_min: 54, x_max: 737, ha: 792, o: "m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 " }, "4": { x_min: 48, x_max: 742.453125, ha: 792, o: "m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 " }, "5": { x_min: 54.171875, x_max: 738, ha: 792, o: "m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 " }, "6": { x_min: 53, x_max: 739, ha: 792, o: "m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 " }, "7": { x_min: 58.71875, x_max: 730.953125, ha: 792, o: "m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 " }, "8": { x_min: 55, x_max: 736, ha: 792, o: "m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 " }, "9": { x_min: 53, x_max: 739, ha: 792, o: "m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 " }, "ο": { x_min: 0, x_max: 712, ha: 815, o: "m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 " }, S: { x_min: 0, x_max: 788, ha: 890, o: "m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 " }, "¦": { x_min: 343, x_max: 449, ha: 792, o: "m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 " }, "/": { x_min: 183.25, x_max: 608.328125, ha: 792, o: "m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 " }, "Τ": { x_min: -0.4375, x_max: 777.453125, ha: 839, o: "m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 " }, y: { x_min: 0, x_max: 684.78125, ha: 771, o: "m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 " }, "Π": { x_min: 0, x_max: 803, ha: 917, o: "m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 " }, "ΐ": { x_min: -111, x_max: 339, ha: 361, o: "m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 " }, g: { x_min: 0, x_max: 686, ha: 838, o: "m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 " }, "²": { x_min: 0, x_max: 442, ha: 539, o: "m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 " }, "–": { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 " }, "Κ": { x_min: 0, x_max: 819.5625, ha: 893, o: "m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 " }, "ƒ": { x_min: -46.265625, x_max: 392, ha: 513, o: "m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 " }, e: { x_min: 0, x_max: 714, ha: 813, o: "m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 " }, "ό": { x_min: 0, x_max: 712, ha: 815, o: "m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 " }, J: { x_min: 0, x_max: 588, ha: 699, o: "m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 " }, "»": { x_min: -1, x_max: 503, ha: 601, o: "m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 " }, "©": { x_min: -3, x_max: 1008, ha: 1106, o: "m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 " }, "ώ": { x_min: 0, x_max: 922, ha: 1030, o: "m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 " }, "^": { x_min: 193.0625, x_max: 598.609375, ha: 792, o: "m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 " }, "«": { x_min: 0, x_max: 507.203125, ha: 604, o: "m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 " }, D: { x_min: 0, x_max: 828, ha: 935, o: "m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 " }, "∙": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 " }, "ÿ": { x_min: 0, x_max: 47, ha: 125, o: "m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 " }, w: { x_min: 0, x_max: 1009.71875, ha: 1100, o: "m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 " }, $: { x_min: 0, x_max: 700, ha: 793, o: "m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 " }, "\\": { x_min: -0.015625, x_max: 425.0625, ha: 522, o: "m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 " }, "µ": { x_min: 0, x_max: 697.21875, ha: 747, o: "m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 " }, "Ι": { x_min: 42, x_max: 181, ha: 297, o: "m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 " }, "Ύ": { x_min: 0, x_max: 1144.5, ha: 1214, o: "m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "’": { x_min: 0, x_max: 139, ha: 236, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 " }, "Ν": { x_min: 0, x_max: 801, ha: 915, o: "m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 " }, "-": { x_min: 8.71875, x_max: 350.390625, ha: 478, o: "m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 " }, Q: { x_min: 0, x_max: 968, ha: 1072, o: "m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 " }, "ς": { x_min: 1, x_max: 676.28125, ha: 740, o: "m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 " }, M: { x_min: 0, x_max: 954, ha: 1067, o: "m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 " }, "Ψ": { x_min: 0, x_max: 1006, ha: 1094, o: "m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 " }, C: { x_min: 0, x_max: 886, ha: 944, o: "m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 " }, "!": { x_min: 0, x_max: 138, ha: 236, o: "m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 " }, "{": { x_min: 0, x_max: 480.5625, ha: 578, o: "m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 " }, X: { x_min: -0.015625, x_max: 854.15625, ha: 940, o: "m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 " }, "#": { x_min: 0, x_max: 963.890625, ha: 1061, o: "m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 " }, "ι": { x_min: 42, x_max: 284, ha: 361, o: "m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 " }, "Ά": { x_min: 0, x_max: 906.953125, ha: 982, o: "m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 " }, ")": { x_min: 0, x_max: 318, ha: 415, o: "m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 " }, "ε": { x_min: 0, x_max: 634.71875, ha: 714, o: "m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 " }, "Δ": { x_min: 0, x_max: 952.78125, ha: 1028, o: "m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 " }, "}": { x_min: 0, x_max: 481, ha: 578, o: "m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 " }, "‰": { x_min: -3, x_max: 1672, ha: 1821, o: "m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 " }, a: { x_min: 0, x_max: 698.609375, ha: 794, o: "m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 " }, "—": { x_min: 0, x_max: 941.671875, ha: 1039, o: "m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 " }, "=": { x_min: 8.71875, x_max: 780.953125, ha: 792, o: "m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 " }, N: { x_min: 0, x_max: 801, ha: 914, o: "m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 " }, "ρ": { x_min: 0, x_max: 712, ha: 797, o: "m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 " }, "¯": { x_min: 0, x_max: 941.671875, ha: 938, o: "m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 " }, Z: { x_min: 0, x_max: 779, ha: 849, o: "m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 " }, u: { x_min: 0, x_max: 617, ha: 729, o: "m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 " }, k: { x_min: 0, x_max: 612.484375, ha: 697, o: "m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 " }, "Η": { x_min: 0, x_max: 803, ha: 917, o: "m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 " }, "Α": { x_min: 0, x_max: 906.953125, ha: 985, o: "m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 " }, s: { x_min: 0, x_max: 604, ha: 697, o: "m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 " }, B: { x_min: 0, x_max: 778, ha: 876, o: "m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 " }, "…": { x_min: 0, x_max: 614, ha: 708, o: "m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 " }, "?": { x_min: 0, x_max: 607, ha: 704, o: "m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 " }, H: { x_min: 0, x_max: 803, ha: 915, o: "m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 " }, "ν": { x_min: 0, x_max: 675, ha: 761, o: "m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 " }, c: { x_min: 1, x_max: 701.390625, ha: 775, o: "m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 " }, "¶": { x_min: 0, x_max: 566.671875, ha: 678, o: "m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 " }, "β": { x_min: 0, x_max: 660, ha: 745, o: "m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 " }, "Μ": { x_min: 0, x_max: 954, ha: 1068, o: "m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 " }, "Ό": { x_min: 0.109375, x_max: 1120, ha: 1217, o: "m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "Ή": { x_min: 0, x_max: 1158, ha: 1275, o: "m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "•": { x_min: 0, x_max: 663.890625, ha: 775, o: "m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 " }, "¥": { x_min: 0.1875, x_max: 819.546875, ha: 886, o: "m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 " }, "(": { x_min: 0, x_max: 318.0625, ha: 415, o: "m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 " }, U: { x_min: 0, x_max: 796, ha: 904, o: "m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 " }, "γ": { x_min: 0.5, x_max: 744.953125, ha: 822, o: "m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 " }, "α": { x_min: 0, x_max: 765.5625, ha: 809, o: "m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 " }, F: { x_min: 0, x_max: 683.328125, ha: 717, o: "m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 " }, "­": { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 " }, ":": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 " }, "Χ": { x_min: 0, x_max: 854.171875, ha: 935, o: "m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 " }, "*": { x_min: 116, x_max: 674, ha: 792, o: "m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 " }, "†": { x_min: 0, x_max: 777, ha: 835, o: "m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 " }, "°": { x_min: 0, x_max: 347, ha: 444, o: "m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 " }, V: { x_min: 0, x_max: 862.71875, ha: 940, o: "m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 " }, "Ξ": { x_min: 0, x_max: 734.71875, ha: 763, o: "m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 " }, " ": { x_min: 0, x_max: 0, ha: 853 }, "Ϋ": { x_min: 0.328125, x_max: 819.515625, ha: 889, o: "m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 " }, "”": { x_min: 0, x_max: 347, ha: 454, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 " }, "@": { x_min: 0, x_max: 1260, ha: 1357, o: "m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 " }, "Ί": { x_min: 0, x_max: 499, ha: 613, o: "m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 " }, i: { x_min: 14, x_max: 136, ha: 275, o: "m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 " }, "Β": { x_min: 0, x_max: 778, ha: 877, o: "m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 " }, "υ": { x_min: 0, x_max: 617, ha: 725, o: "m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 " }, "]": { x_min: 0, x_max: 275, ha: 372, o: "m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 " }, m: { x_min: 0, x_max: 1019, ha: 1128, o: "m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 " }, "χ": { x_min: 8.328125, x_max: 780.5625, ha: 815, o: "m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 " }, "ί": { x_min: 42, x_max: 326.71875, ha: 361, o: "m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 " }, "Ζ": { x_min: 0, x_max: 779.171875, ha: 850, o: "m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 " }, R: { x_min: 0, x_max: 781.953125, ha: 907, o: "m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 " }, o: { x_min: 0, x_max: 713, ha: 821, o: "m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 " }, K: { x_min: 0, x_max: 819.46875, ha: 906, o: "m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 " }, ",": { x_min: 0, x_max: 142, ha: 239, o: "m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 " }, d: { x_min: 0, x_max: 683, ha: 796, o: "m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 " }, "¨": { x_min: -109, x_max: 247, ha: 232, o: "m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 " }, E: { x_min: 0, x_max: 736.109375, ha: 789, o: "m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 " }, Y: { x_min: 0, x_max: 820, ha: 886, o: "m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 " }, '"': { x_min: 0, x_max: 299, ha: 396, o: "m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 " }, "‹": { x_min: 17.984375, x_max: 773.609375, ha: 792, o: "m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 " }, "„": { x_min: 0, x_max: 364, ha: 467, o: "m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 " }, "δ": { x_min: 1, x_max: 710, ha: 810, o: "m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 " }, "έ": { x_min: 0, x_max: 634.71875, ha: 714, o: "m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 " }, "ω": { x_min: 0, x_max: 922, ha: 1031, o: "m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 " }, "´": { x_min: 0, x_max: 96, ha: 251, o: "m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 " }, "±": { x_min: 11, x_max: 781, ha: 792, o: "m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 " }, "|": { x_min: 343, x_max: 449, ha: 792, o: "m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 " }, "ϋ": { x_min: 0, x_max: 617, ha: 725, o: "m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 " }, "§": { x_min: 0, x_max: 593, ha: 690, o: "m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 " }, b: { x_min: 0, x_max: 685, ha: 783, o: "m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 " }, q: { x_min: 0, x_max: 683, ha: 876, o: "m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 " }, "Ω": { x_min: -0.171875, x_max: 969.5625, ha: 1068, o: "m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 " }, "ύ": { x_min: 0, x_max: 617, ha: 725, o: "m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 " }, z: { x_min: -0.015625, x_max: 613.890625, ha: 697, o: "m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 " }, "™": { x_min: 0, x_max: 894, ha: 1e3, o: "m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 " }, "ή": { x_min: 0.78125, x_max: 697, ha: 810, o: "m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 " }, "Θ": { x_min: 0, x_max: 960, ha: 1056, o: "m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 " }, "®": { x_min: -3, x_max: 1008, ha: 1106, o: "m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 " }, "~": { x_min: 0, x_max: 833, ha: 931, o: "m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 " }, "Ε": { x_min: 0, x_max: 736.21875, ha: 778, o: "m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 " }, "³": { x_min: 0, x_max: 450, ha: 547, o: "m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 " }, "[": { x_min: 0, x_max: 273.609375, ha: 371, o: "m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 " }, L: { x_min: 0, x_max: 645.828125, ha: 696, o: "m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 " }, "σ": { x_min: 0, x_max: 803.390625, ha: 894, o: "m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 " }, "ζ": { x_min: 0, x_max: 573, ha: 642, o: "m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 " }, "θ": { x_min: 0, x_max: 674, ha: 778, o: "m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 " }, "Ο": { x_min: 0, x_max: 958, ha: 1054, o: "m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 " }, "Γ": { x_min: 0, x_max: 705.28125, ha: 749, o: "m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 " }, " ": { x_min: 0, x_max: 0, ha: 375 }, "%": { x_min: -3, x_max: 1089, ha: 1186, o: "m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 " }, P: { x_min: 0, x_max: 726, ha: 806, o: "m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 " }, "Έ": { x_min: 0, x_max: 1078.21875, ha: 1118, o: "m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "Ώ": { x_min: 0.125, x_max: 1136.546875, ha: 1235, o: "m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 " }, _: { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 " }, "Ϊ": { x_min: -110, x_max: 246, ha: 275, o: "m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 " }, "+": { x_min: 23, x_max: 768, ha: 792, o: "m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 " }, "½": { x_min: 0, x_max: 1050, ha: 1149, o: "m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 " }, "Ρ": { x_min: 0, x_max: 720, ha: 783, o: "m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 " }, "'": { x_min: 0, x_max: 139, ha: 236, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 " }, "ª": { x_min: 0, x_max: 350, ha: 397, o: "m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 " }, "΅": { x_min: 0, x_max: 450, ha: 553, o: "m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 " }, T: { x_min: 0, x_max: 777, ha: 835, o: "m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 " }, "Φ": { x_min: 0, x_max: 915, ha: 997, o: "m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 " }, "⁋": { x_min: 0, x_max: 0, ha: 694 }, j: { x_min: -77.78125, x_max: 167, ha: 349, o: "m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 " }, "Σ": { x_min: 0, x_max: 756.953125, ha: 819, o: "m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 " }, "›": { x_min: 18.0625, x_max: 774, ha: 792, o: "m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 " }, "<": { x_min: 17.984375, x_max: 773.609375, ha: 792, o: "m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 " }, "£": { x_min: 0, x_max: 704.484375, ha: 801, o: "m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 " }, t: { x_min: 0, x_max: 367, ha: 458, o: "m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 " }, "¬": { x_min: 0, x_max: 706, ha: 803, o: "m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 " }, "λ": { x_min: 0, x_max: 750, ha: 803, o: "m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 " }, W: { x_min: 0, x_max: 1263.890625, ha: 1351, o: "m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 " }, ">": { x_min: 18.0625, x_max: 774, ha: 792, o: "m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 " }, v: { x_min: 0, x_max: 675.15625, ha: 761, o: "m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 " }, "τ": { x_min: 0.28125, x_max: 644.5, ha: 703, o: "m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 " }, "ξ": { x_min: 0, x_max: 624.9375, ha: 699, o: "m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 " }, "&": { x_min: -3, x_max: 894.25, ha: 992, o: "m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 " }, "Λ": { x_min: 0, x_max: 862.5, ha: 942, o: "m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 " }, I: { x_min: 41, x_max: 180, ha: 293, o: "m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 " }, G: { x_min: 0, x_max: 921, ha: 1011, o: "m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 " }, "ΰ": { x_min: 0, x_max: 617, ha: 725, o: "m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 " }, "`": { x_min: 0, x_max: 138.890625, ha: 236, o: "m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 " }, "·": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 " }, "Υ": { x_min: 0.328125, x_max: 819.515625, ha: 889, o: "m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 " }, r: { x_min: 0, x_max: 355.5625, ha: 432, o: "m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 " }, x: { x_min: 0, x_max: 675, ha: 764, o: "m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 " }, "μ": { x_min: 0, x_max: 696.609375, ha: 747, o: "m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 " }, h: { x_min: 0, x_max: 615, ha: 724, o: "m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 " }, ".": { x_min: 0, x_max: 142, ha: 239, o: "m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 " }, "φ": { x_min: -2, x_max: 878, ha: 974, o: "m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 " }, ";": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 " }, f: { x_min: 0, x_max: 378, ha: 472, o: "m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 " }, "“": { x_min: 1, x_max: 348.21875, ha: 454, o: "m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 " }, A: { x_min: 0.03125, x_max: 906.953125, ha: 1008, o: "m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 " }, "‘": { x_min: 1, x_max: 139.890625, ha: 236, o: "m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 " }, "ϊ": { x_min: -70, x_max: 283, ha: 361, o: "m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 " }, "π": { x_min: -0.21875, x_max: 773.21875, ha: 857, o: "m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 " }, "ά": { x_min: 0, x_max: 765.5625, ha: 809, o: "m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 " }, O: { x_min: 0, x_max: 958, ha: 1057, o: "m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 " }, n: { x_min: 0, x_max: 615, ha: 724, o: "m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 " }, l: { x_min: 41, x_max: 166, ha: 279, o: "m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 " }, "¤": { x_min: 40.09375, x_max: 728.796875, ha: 825, o: "m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 " }, "κ": { x_min: 0, x_max: 632.328125, ha: 679, o: "m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 " }, p: { x_min: 0, x_max: 685, ha: 786, o: "m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 " }, "‡": { x_min: 0, x_max: 777, ha: 835, o: "m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 " }, "ψ": { x_min: 0, x_max: 808, ha: 907, o: "m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 " }, "η": { x_min: 0.78125, x_max: 697, ha: 810, o: "m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 " } };
var cssFontWeight = "normal";
var ascender = 1189;
var underlinePosition = -100;
var cssFontStyle = "normal";
var boundingBox = { yMin: -334, xMin: -111, yMax: 1189, xMax: 1672 };
var resolution = 1e3;
var original_font_information = { postscript_name: "Helvetiker-Regular", version_string: "Version 1.00 2004 initial release", vendor_url: "http://www.magenta.gr/", full_font_name: "Helvetiker", font_family_name: "Helvetiker", copyright: "Copyright (c) Μagenta ltd, 2004", description: "", trademark: "", designer: "", designer_url: "", unique_font_identifier: "Μagenta ltd:Helvetiker:22-10-104", license_url: "http://www.ellak.gr/fonts/MgOpen/license.html", license_description: 'Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license ("Fonts") and associated documentation files (the "Font Software"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word "MgOpen", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the "MgOpen" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.', manufacturer_name: "Μagenta ltd", font_sub_family_name: "Regular" };
var descender = -334;
var familyName = "Helvetiker";
var lineHeight = 1522;
var underlineThickness = 50;
var defaultTypeFace = { glyphs, cssFontWeight, ascender, underlinePosition, cssFontStyle, boundingBox, resolution, original_font_information, descender, familyName, lineHeight, underlineThickness };
var THREE$5 = _objectSpread22(_objectSpread22({}, window.THREE ? window.THREE : {
  CircleGeometry,
  DoubleSide,
  Group,
  Mesh,
  MeshLambertMaterial,
  TextGeometry,
  Vector3
}), {}, {
  Font,
  TextGeometry
});
var LabelsLayerKapsule = index({
  props: {
    labelsData: {
      "default": []
    },
    labelLat: {
      "default": "lat"
    },
    labelLng: {
      "default": "lng"
    },
    labelAltitude: {
      "default": 0
    },
    // in units of globe radius
    labelText: {
      "default": "text"
    },
    labelSize: {
      "default": 0.5
    },
    // text height in deg
    labelTypeFace: {
      "default": defaultTypeFace,
      onChange: function onChange4(tf, state) {
        state.font = new THREE$5.Font(tf);
      }
    },
    labelColor: {
      "default": function _default19() {
        return "lightgrey";
      }
    },
    labelRotation: {
      "default": 0
    },
    // clockwise degrees, relative to the latitute parallel plane
    labelResolution: {
      "default": 3
    },
    // how many segments in the text's curves
    labelIncludeDot: {
      "default": true
    },
    labelDotRadius: {
      "default": 0.1
    },
    // in deg
    labelDotOrientation: {
      "default": function _default20() {
        return "bottom";
      }
    },
    // right, top, bottom
    labelsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init10(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
  },
  update: function update11(state) {
    var latAccessor = index3(state.labelLat);
    var lngAccessor = index3(state.labelLng);
    var altitudeAccessor = index3(state.labelAltitude);
    var textAccessor = index3(state.labelText);
    var sizeAccessor = index3(state.labelSize);
    var rotationAccessor = index3(state.labelRotation);
    var colorAccessor = index3(state.labelColor);
    var includeDotAccessor = index3(state.labelIncludeDot);
    var dotRadiusAccessor = index3(state.labelDotRadius);
    var dotOrientationAccessor = index3(state.labelDotOrientation);
    var orientations = /* @__PURE__ */ new Set(["right", "top", "bottom"]);
    var pxPerDeg = 2 * Math.PI * GLOBE_RADIUS / 360;
    var circleGeometry = new THREE$5.CircleGeometry(1, 16);
    threeDigest(state.labelsData, state.scene, {
      createObj: function createObj() {
        var material = new THREE$5.MeshLambertMaterial();
        material.side = DoubleSide;
        var obj = new THREE$5.Group();
        obj.add(new THREE$5.Mesh(circleGeometry, material));
        obj.add(new THREE$5.Mesh(void 0, material));
        obj.__globeObjType = "label";
        return obj;
      },
      updateObj: function updateObj(obj, d) {
        var _obj$children = _slicedToArray6(obj.children, 2), dotObj = _obj$children[0], textObj = _obj$children[1];
        var color2 = colorAccessor(d);
        var opacity = colorAlpha(color2);
        textObj.material.color.set(colorStr2Hex(color2));
        textObj.material.transparent = opacity < 1;
        textObj.material.opacity = opacity;
        var includeDot = includeDotAccessor(d);
        var dotOrient = dotOrientationAccessor(d);
        !includeDot || !orientations.has(dotOrient) && (dotOrient = "bottom");
        var dotR = includeDot ? +dotRadiusAccessor(d) * pxPerDeg : 1e-12;
        dotObj.scale.x = dotObj.scale.y = dotR;
        var textHeight = +sizeAccessor(d) * pxPerDeg;
        textObj.geometry && textObj.geometry.dispose();
        textObj.geometry = new THREE$5.TextGeometry(textAccessor(d), {
          font: state.font,
          size: textHeight,
          depth: 0,
          height: 0,
          curveSegments: state.labelResolution
        });
        dotOrient !== "right" && textObj.geometry.center();
        if (includeDot) {
          var padding = dotR + textHeight / 2;
          dotOrient === "right" && (textObj.position.x = padding);
          textObj.position.y = {
            right: -textHeight / 2,
            // center vertically
            top: padding + textHeight / 2,
            bottom: -padding - textHeight / 2
          }[dotOrient];
        }
        var applyPosition = function applyPosition2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng, alt = _obj$__currentTargetD.alt, rot = _obj$__currentTargetD.rot, scale2 = _obj$__currentTargetD.scale;
          Object.assign(obj.position, polar2Cartesian3(lat, lng, alt));
          obj.lookAt(state.scene.localToWorld(new THREE$5.Vector3(0, 0, 0)));
          obj.rotateY(Math.PI);
          obj.rotateZ(-rot * Math.PI / 180);
          obj.scale.x = obj.scale.y = obj.scale.z = scale2;
        };
        var targetD = {
          lat: +latAccessor(d),
          lng: +lngAccessor(d),
          alt: +altitudeAccessor(d),
          rot: +rotationAccessor(d),
          scale: 1
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          scale: 1e-12
        });
        if (Object.keys(targetD).some(function(k) {
          return currentTargetD[k] !== targetD[k];
        })) {
          if (!state.labelsTransitionDuration || state.labelsTransitionDuration < 0) {
            applyPosition(targetD);
          } else {
            state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.labelsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyPosition).start());
          }
        }
      }
    });
  }
});
var THREE$4 = window.THREE ? window.THREE : {
  BufferGeometry
};
var CircleLineGeometry = function(_THREE$BufferGeometry) {
  function CircleLineGeometry2() {
    var _this;
    var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
    var segmentCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 32;
    _classCallCheck4(this, CircleLineGeometry2);
    _this = _callSuper3(this, CircleLineGeometry2);
    _this.type = "CircleLineGeometry";
    _this.parameters = {
      radius,
      segmentCount
    };
    var points = [];
    for (var i = 0; i <= segmentCount; i++) {
      var theta = (i / segmentCount - 0.25) * Math.PI * 2;
      points.push({
        x: Math.cos(theta) * radius,
        y: Math.sin(theta) * radius,
        z: 0
      });
    }
    _this.setFromPoints(points);
    return _this;
  }
  _inherits3(CircleLineGeometry2, _THREE$BufferGeometry);
  return _createClass4(CircleLineGeometry2);
}(THREE$4.BufferGeometry);
var THREE$3 = window.THREE ? window.THREE : {
  Color,
  Group,
  Line,
  LineBasicMaterial,
  Vector3
};
var FrameTicker = import_frame_ticker.default["default"] || import_frame_ticker.default;
var RingsLayerKapsule = index({
  props: {
    ringsData: {
      "default": []
    },
    ringLat: {
      "default": "lat"
    },
    ringLng: {
      "default": "lng"
    },
    ringAltitude: {
      "default": 15e-4
    },
    ringColor: {
      "default": function _default21() {
        return "#ffffaa";
      },
      triggerUpdate: false
    },
    // single color, array of colors or color interpolation fn
    ringResolution: {
      "default": 64,
      triggerUpdate: false
    },
    // how many slice segments in each circle's circumference
    ringMaxRadius: {
      "default": 2,
      triggerUpdate: false
    },
    // degrees
    ringPropagationSpeed: {
      "default": 1,
      triggerUpdate: false
    },
    // degrees/s
    ringRepeatPeriod: {
      "default": 700,
      triggerUpdate: false
    }
    // ms
  },
  methods: {
    pauseAnimation: function pauseAnimation3(state) {
      var _state$ticker;
      (_state$ticker = state.ticker) === null || _state$ticker === void 0 || _state$ticker.pause();
    },
    resumeAnimation: function resumeAnimation3(state) {
      var _state$ticker2;
      (_state$ticker2 = state.ticker) === null || _state$ticker2 === void 0 || _state$ticker2.resume();
    },
    _destructor: function _destructor4(state) {
      var _state$ticker3;
      (_state$ticker3 = state.ticker) === null || _state$ticker3 === void 0 || _state$ticker3.dispose();
    }
  },
  init: function init11(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.ticker = new FrameTicker();
    state.ticker.onTick.add(function(time2) {
      if (!state.ringsData.length) return;
      var colorAccessor = index3(state.ringColor);
      var altitudeAccessor = index3(state.ringAltitude);
      var maxRadiusAccessor = index3(state.ringMaxRadius);
      var propagationSpeedAccessor = index3(state.ringPropagationSpeed);
      var repeatPeriodAccessor = index3(state.ringRepeatPeriod);
      state.ringsData.filter(function(d) {
        return d.__threeObj;
      }).forEach(function(d) {
        var obj = d.__threeObj;
        if ((obj.__nextRingTime || 0) <= time2) {
          var periodSecs = repeatPeriodAccessor(d) / 1e3;
          obj.__nextRingTime = time2 + (periodSecs <= 0 ? Infinity : periodSecs);
          var circleObj = new THREE$3.Line(new CircleLineGeometry(1, state.ringResolution), new THREE$3.LineBasicMaterial());
          var colors = colorAccessor(d);
          var isMultiColor = colors instanceof Array || colors instanceof Function;
          var colorInterpolator;
          if (!isMultiColor) {
            circleObj.material.color = new THREE$3.Color(colorStr2Hex(colors));
            setMaterialOpacity(circleObj.material, colorAlpha(colors));
          } else {
            if (colors instanceof Array) {
              colorInterpolator = linear2().domain(colors.map(function(_, idx) {
                return idx / (colors.length - 1);
              })).range(colors);
              circleObj.material.transparent = colors.some(function(c3) {
                return colorAlpha(c3) < 1;
              });
            } else {
              colorInterpolator = colors;
              circleObj.material.transparent = true;
            }
          }
          var curveR = GLOBE_RADIUS * (1 + altitudeAccessor(d));
          var maxRadius = maxRadiusAccessor(d);
          var maxAngle = maxRadius * Math.PI / 180;
          var propagationSpeed = propagationSpeedAccessor(d);
          var isReverse = propagationSpeed <= 0;
          var updateFn = function updateFn2(_ref2) {
            var t = _ref2.t;
            var ang = (isReverse ? 1 - t : t) * maxAngle;
            circleObj.scale.x = circleObj.scale.y = curveR * Math.sin(ang);
            circleObj.position.z = curveR * (1 - Math.cos(ang));
            if (isMultiColor) {
              var color2 = colorInterpolator(t);
              circleObj.material.color = new THREE$3.Color(colorStr2Hex(color2));
              circleObj.material.transparent && (circleObj.material.opacity = colorAlpha(color2));
            }
          };
          if (propagationSpeed === 0) {
            updateFn({
              t: 0
            });
            obj.add(circleObj);
          } else {
            var transitionTime = Math.abs(maxRadius / propagationSpeed) * 1e3;
            state.tweenGroup.add(new Tween({
              t: 0
            }).to({
              t: 1
            }, transitionTime).onUpdate(updateFn).onStart(function() {
              return obj.add(circleObj);
            }).onComplete(function() {
              obj.remove(circleObj);
              _deallocate(circleObj);
            }).start());
          }
        }
      });
    });
  },
  update: function update12(state) {
    var latAccessor = index3(state.ringLat);
    var lngAccessor = index3(state.ringLng);
    var altitudeAccessor = index3(state.ringAltitude);
    var globeCenter = state.scene.localToWorld(new THREE$3.Vector3(0, 0, 0));
    threeDigest(
      state.ringsData,
      state.scene,
      {
        createObj: function createObj() {
          var obj = new THREE$3.Group();
          obj.__globeObjType = "ring";
          return obj;
        },
        updateObj: function updateObj(obj, d) {
          var lat = latAccessor(d);
          var lng = lngAccessor(d);
          var alt = altitudeAccessor(d);
          Object.assign(obj.position, polar2Cartesian3(lat, lng, alt));
          obj.lookAt(globeCenter);
        }
      },
      {
        removeDelay: 3e4
      }
      // wait until all rings are gone
    );
  }
});
var THREE$2 = _objectSpread22(_objectSpread22({}, window.THREE ? window.THREE : {}), {}, {
  CSS2DObject
});
var HtmlElementsLayerKapsule = index({
  props: {
    htmlElementsData: {
      "default": []
    },
    htmlLat: {
      "default": "lat"
    },
    htmlLng: {
      "default": "lng"
    },
    htmlAltitude: {
      "default": 0
    },
    // in units of globe radius
    htmlElement: {},
    htmlTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    },
    // ms
    isBehindGlobe: {
      onChange: function onChange5() {
        this.updateObjVisibility();
      },
      triggerUpdate: false
    }
  },
  methods: {
    updateObjVisibility: function updateObjVisibility(state, obj) {
      var objs = obj ? [obj] : state.htmlElementsData.map(function(d) {
        return d.__threeObj;
      }).filter(function(d) {
        return d;
      });
      objs.forEach(function(obj2) {
        return obj2.visible = !state.isBehindGlobe || !state.isBehindGlobe(obj2.position);
      });
    }
  },
  init: function init12(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
  },
  update: function update13(state, changedProps) {
    var _this = this;
    var latAccessor = index3(state.htmlLat);
    var lngAccessor = index3(state.htmlLng);
    var altitudeAccessor = index3(state.htmlAltitude);
    var elemAccessor = index3(state.htmlElement);
    threeDigest(state.htmlElementsData, state.scene, {
      // objs need to be recreated if this prop has changed
      purge: changedProps.hasOwnProperty("htmlElement"),
      createObj: function createObj(d) {
        var elem = elemAccessor(d);
        var obj = new THREE$2.CSS2DObject(elem);
        obj.__globeObjType = "html";
        return obj;
      },
      updateObj: function updateObj(obj, d) {
        var applyUpdate = function applyUpdate2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng;
          Object.assign(obj.position, polar2Cartesian3(lat, lng, alt));
          _this.updateObjVisibility(obj);
        };
        var targetD = {
          lat: +latAccessor(d),
          lng: +lngAccessor(d),
          alt: +altitudeAccessor(d)
        };
        if (!state.htmlTransitionDuration || state.htmlTransitionDuration < 0 || !obj.__currentTargetD) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(obj.__currentTargetD).to(targetD, state.htmlTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
    });
  }
});
var THREE$1 = window.THREE ? window.THREE : {
  Euler,
  Group,
  Mesh,
  MeshLambertMaterial,
  SphereGeometry
};
var ObjectsLayerKapsule = index({
  props: {
    objectsData: {
      "default": []
    },
    objectLat: {
      "default": "lat"
    },
    objectLng: {
      "default": "lng"
    },
    objectAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    objectFacesSurface: {
      "default": true
    },
    objectRotation: {},
    objectThreeObject: {
      "default": new THREE$1.Mesh(
        // default object: yellow sphere
        new THREE$1.SphereGeometry(1, 16, 8),
        new THREE$1.MeshLambertMaterial({
          color: "#ffffaa",
          transparent: true,
          opacity: 0.7
        })
      )
    }
  },
  init: function init13(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
  },
  update: function update14(state, changedProps) {
    var latAccessor = index3(state.objectLat);
    var lngAccessor = index3(state.objectLng);
    var altitudeAccessor = index3(state.objectAltitude);
    var parallelAccessor = index3(state.objectFacesSurface);
    var rotationAccessor = index3(state.objectRotation);
    var threeObjAccessor = index3(state.objectThreeObject);
    threeDigest(state.objectsData, state.scene, {
      // objs need to be recreated if this prop has changed
      purge: changedProps.hasOwnProperty("objectThreeObject"),
      createObj: function createObj(d) {
        var obj = threeObjAccessor(d);
        if (state.objectThreeObject === obj) {
          obj = obj.clone();
        }
        var g = new THREE$1.Group();
        g.add(obj);
        g.__globeObjType = "object";
        return g;
      },
      updateObj: function updateObj(objG, d) {
        var lat = +latAccessor(d);
        var lng = +lngAccessor(d);
        var alt = +altitudeAccessor(d);
        Object.assign(objG.position, polar2Cartesian3(lat, lng, alt));
        parallelAccessor(d) ? objG.setRotationFromEuler(new Euler(deg2Rad$1(-lat), deg2Rad$1(lng), 0, "YXZ")) : objG.rotation.set(0, 0, 0);
        var obj = objG.children[0];
        var rot = rotationAccessor(d);
        rot && obj.setRotationFromEuler(new Euler(deg2Rad$1(rot.x || 0), deg2Rad$1(rot.y || 0), deg2Rad$1(rot.z || 0)));
      }
    });
  }
});
var CustomLayerKapsule = index({
  props: {
    customLayerData: {
      "default": []
    },
    customThreeObject: {},
    customThreeObjectUpdate: {
      triggerUpdate: false
    }
  },
  init: function init14(threeObj, state) {
    emptyObject(threeObj);
    state.scene = threeObj;
  },
  update: function update15(state, changedProps) {
    if (!state.customThreeObjectUpdate) {
      emptyObject(state.scene);
    }
    var customObjectAccessor = index3(state.customThreeObject);
    var customObjectUpdateAccessor = index3(state.customThreeObjectUpdate);
    threeDigest(state.customLayerData, state.scene, {
      // objs need to be recreated if this prop has changed
      purge: changedProps.hasOwnProperty("customThreeObject"),
      createObj: function createObj(d) {
        var obj = customObjectAccessor(d, GLOBE_RADIUS);
        if (obj) {
          if (state.customThreeObject === obj) {
            obj = obj.clone();
          }
          obj.__globeObjType = "custom";
        }
        return obj;
      },
      updateObj: function updateObj(obj, d) {
        return customObjectUpdateAccessor(obj, d, GLOBE_RADIUS);
      }
    });
  }
});
var THREE3 = window.THREE ? window.THREE : {
  Group,
  Vector2,
  Vector3
};
var layers = ["globeLayer", "pointsLayer", "arcsLayer", "hexBinLayer", "heatmapsLayer", "polygonsLayer", "hexedPolygonsLayer", "pathsLayer", "tilesLayer", "labelsLayer", "ringsLayer", "htmlElementsLayer", "objectsLayer", "customLayer"];
var bindGlobeLayer = linkKapsule("globeLayer", GlobeLayerKapsule);
var linkedGlobeLayerProps = Object.assign.apply(Object, _toConsumableArray4(["globeImageUrl", "bumpImageUrl", "showGlobe", "showGraticules", "showAtmosphere", "atmosphereColor", "atmosphereAltitude"].map(function(p) {
  return _defineProperty2({}, p, bindGlobeLayer.linkProp(p));
})));
var linkedGlobeLayerMethods = Object.assign.apply(Object, _toConsumableArray4(["globeMaterial"].map(function(p) {
  return _defineProperty2({}, p, bindGlobeLayer.linkMethod(p));
})));
var bindPointsLayer = linkKapsule("pointsLayer", PointsLayerKapsule);
var linkedPointsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["pointsData", "pointLat", "pointLng", "pointColor", "pointAltitude", "pointRadius", "pointResolution", "pointsMerge", "pointsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindPointsLayer.linkProp(p));
})));
var bindArcsLayer = linkKapsule("arcsLayer", ArcsLayerKapsule);
var linkedArcsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["arcsData", "arcStartLat", "arcStartLng", "arcEndLat", "arcEndLng", "arcColor", "arcAltitude", "arcAltitudeAutoScale", "arcStroke", "arcCurveResolution", "arcCircularResolution", "arcDashLength", "arcDashGap", "arcDashInitialGap", "arcDashAnimateTime", "arcsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindArcsLayer.linkProp(p));
})));
var bindHexBinLayer = linkKapsule("hexBinLayer", HexBinLayerKapsule);
var linkedHexBinLayerProps = Object.assign.apply(Object, _toConsumableArray4(["hexBinPointsData", "hexBinPointLat", "hexBinPointLng", "hexBinPointWeight", "hexBinResolution", "hexMargin", "hexTopCurvatureResolution", "hexTopColor", "hexSideColor", "hexAltitude", "hexBinMerge", "hexTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindHexBinLayer.linkProp(p));
})));
var bindHeatmapsLayer = linkKapsule("heatmapsLayer", HeatmapsLayerKapsule);
var linkedHeatmapsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["heatmapsData", "heatmapPoints", "heatmapPointLat", "heatmapPointLng", "heatmapPointWeight", "heatmapBandwidth", "heatmapColorFn", "heatmapColorSaturation", "heatmapBaseAltitude", "heatmapTopAltitude", "heatmapsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindHeatmapsLayer.linkProp(p));
})));
var bindHexedPolygonsLayer = linkKapsule("hexedPolygonsLayer", HexedPolygonsLayerKapsule);
var linkedHexedPolygonsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["hexPolygonsData", "hexPolygonGeoJsonGeometry", "hexPolygonColor", "hexPolygonAltitude", "hexPolygonResolution", "hexPolygonMargin", "hexPolygonUseDots", "hexPolygonCurvatureResolution", "hexPolygonDotResolution", "hexPolygonsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindHexedPolygonsLayer.linkProp(p));
})));
var bindPolygonsLayer = linkKapsule("polygonsLayer", PolygonsLayerKapsule);
var linkedPolygonsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["polygonsData", "polygonGeoJsonGeometry", "polygonCapColor", "polygonCapMaterial", "polygonSideColor", "polygonSideMaterial", "polygonStrokeColor", "polygonAltitude", "polygonCapCurvatureResolution", "polygonsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindPolygonsLayer.linkProp(p));
})));
var bindPathsLayer = linkKapsule("pathsLayer", PathsLayerKapsule);
var linkedPathsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["pathsData", "pathPoints", "pathPointLat", "pathPointLng", "pathPointAlt", "pathResolution", "pathColor", "pathStroke", "pathDashLength", "pathDashGap", "pathDashInitialGap", "pathDashAnimateTime", "pathTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindPathsLayer.linkProp(p));
})));
var bindTilesLayer = linkKapsule("tilesLayer", TilesLayerKapsule);
var linkedTilesLayerProps = Object.assign.apply(Object, _toConsumableArray4(["tilesData", "tileLat", "tileLng", "tileAltitude", "tileWidth", "tileHeight", "tileUseGlobeProjection", "tileMaterial", "tileCurvatureResolution", "tilesTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindTilesLayer.linkProp(p));
})));
var bindLabelsLayer = linkKapsule("labelsLayer", LabelsLayerKapsule);
var linkedLabelsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["labelsData", "labelLat", "labelLng", "labelAltitude", "labelRotation", "labelText", "labelSize", "labelTypeFace", "labelColor", "labelResolution", "labelIncludeDot", "labelDotRadius", "labelDotOrientation", "labelsTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindLabelsLayer.linkProp(p));
})));
var bindRingsLayer = linkKapsule("ringsLayer", RingsLayerKapsule);
var linkedRingsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["ringsData", "ringLat", "ringLng", "ringAltitude", "ringColor", "ringResolution", "ringMaxRadius", "ringPropagationSpeed", "ringRepeatPeriod"].map(function(p) {
  return _defineProperty2({}, p, bindRingsLayer.linkProp(p));
})));
var bindHtmlElementsLayer = linkKapsule("htmlElementsLayer", HtmlElementsLayerKapsule);
var linkedHtmlElementsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["htmlElementsData", "htmlLat", "htmlLng", "htmlAltitude", "htmlElement", "htmlTransitionDuration"].map(function(p) {
  return _defineProperty2({}, p, bindHtmlElementsLayer.linkProp(p));
})));
var bindObjectsLayer = linkKapsule("objectsLayer", ObjectsLayerKapsule);
var linkedObjectsLayerProps = Object.assign.apply(Object, _toConsumableArray4(["objectsData", "objectLat", "objectLng", "objectAltitude", "objectRotation", "objectFacesSurface", "objectThreeObject"].map(function(p) {
  return _defineProperty2({}, p, bindObjectsLayer.linkProp(p));
})));
var bindCustomLayer = linkKapsule("customLayer", CustomLayerKapsule);
var linkedCustomLayerProps = Object.assign.apply(Object, _toConsumableArray4(["customLayerData", "customThreeObject", "customThreeObjectUpdate"].map(function(p) {
  return _defineProperty2({}, p, bindCustomLayer.linkProp(p));
})));
var Globe = index({
  props: _objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22(_objectSpread22({
    onGlobeReady: {
      triggerUpdate: false
    },
    rendererSize: {
      "default": new THREE3.Vector2(window.innerWidth, window.innerHeight),
      onChange: function onChange6(rendererSize, state) {
        state.pathsLayer.rendererSize(rendererSize);
      },
      triggerUpdate: false
    }
  }, linkedGlobeLayerProps), linkedPointsLayerProps), linkedArcsLayerProps), linkedHexBinLayerProps), linkedHeatmapsLayerProps), linkedPolygonsLayerProps), linkedHexedPolygonsLayerProps), linkedPathsLayerProps), linkedTilesLayerProps), linkedLabelsLayerProps), linkedRingsLayerProps), linkedHtmlElementsLayerProps), linkedObjectsLayerProps), linkedCustomLayerProps),
  methods: _objectSpread22({
    getGlobeRadius,
    getCoords: function getCoords(state) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return polar2Cartesian3.apply(void 0, args);
    },
    toGeoCoords: function toGeoCoords(state) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      return cartesian2Polar.apply(void 0, args);
    },
    setPointOfView: function setPointOfView(state, globalPov, globePos) {
      var isBehindGlobe = void 0;
      if (globalPov) {
        var globeRadius = getGlobeRadius();
        var pov = globePos ? globalPov.clone().sub(globePos) : globalPov;
        var povDist, povEdgeDist, povEdgeAngle;
        isBehindGlobe = function isBehindGlobe2(pos) {
          povDist === void 0 && (povDist = pov.length());
          povEdgeDist === void 0 && (povEdgeDist = Math.sqrt(Math.pow(povDist, 2) - Math.pow(globeRadius, 2)));
          povEdgeAngle === void 0 && (povEdgeAngle = Math.acos(povEdgeDist / povDist));
          var povPosDist = pov.distanceTo(pos);
          if (povPosDist < povEdgeDist) return false;
          var posDist = pos.length();
          var povPosAngle = Math.acos((Math.pow(povDist, 2) + Math.pow(povPosDist, 2) - Math.pow(posDist, 2)) / (2 * povDist * povPosDist));
          return povPosAngle < povEdgeAngle;
        };
      }
      state.layersThatNeedBehindGlobeChecker.forEach(function(l) {
        return l.isBehindGlobe(isBehindGlobe);
      });
    },
    pauseAnimation: function pauseAnimation4(state) {
      if (state.animationFrameRequestId !== null) {
        cancelAnimationFrame(state.animationFrameRequestId);
        state.animationFrameRequestId = null;
      }
      state.pausableLayers.forEach(function(l) {
        var _l$pauseAnimation;
        return (_l$pauseAnimation = l.pauseAnimation) === null || _l$pauseAnimation === void 0 ? void 0 : _l$pauseAnimation.call(l);
      });
      return this;
    },
    resumeAnimation: function resumeAnimation4(state) {
      if (state.animationFrameRequestId === null) {
        this._animationCycle();
      }
      state.pausableLayers.forEach(function(l) {
        var _l$resumeAnimation;
        return (_l$resumeAnimation = l.resumeAnimation) === null || _l$resumeAnimation === void 0 ? void 0 : _l$resumeAnimation.call(l);
      });
      return this;
    },
    _animationCycle: function _animationCycle(state) {
      state.animationFrameRequestId = requestAnimationFrame(this._animationCycle);
      state.tweenGroup.update();
    },
    _destructor: function _destructor5(state) {
      this.pauseAnimation();
      state.destructableLayers.forEach(function(l) {
        return l._destructor();
      });
    }
  }, linkedGlobeLayerMethods),
  stateInit: function stateInit2() {
    var tweenGroup = new Group2();
    var initProps = {
      tweenGroup
    };
    var layers2 = {
      globeLayer: GlobeLayerKapsule(initProps),
      pointsLayer: PointsLayerKapsule(initProps),
      arcsLayer: ArcsLayerKapsule(initProps),
      hexBinLayer: HexBinLayerKapsule(initProps),
      heatmapsLayer: HeatmapsLayerKapsule(initProps),
      polygonsLayer: PolygonsLayerKapsule(initProps),
      hexedPolygonsLayer: HexedPolygonsLayerKapsule(initProps),
      pathsLayer: PathsLayerKapsule(initProps),
      tilesLayer: TilesLayerKapsule(initProps),
      labelsLayer: LabelsLayerKapsule(initProps),
      ringsLayer: RingsLayerKapsule(initProps),
      htmlElementsLayer: HtmlElementsLayerKapsule(initProps),
      objectsLayer: ObjectsLayerKapsule(initProps),
      customLayer: CustomLayerKapsule(initProps)
    };
    return _objectSpread22(_objectSpread22({
      tweenGroup
    }, layers2), {}, {
      layersThatNeedBehindGlobeChecker: Object.values(layers2).filter(function(l) {
        return l.hasOwnProperty("isBehindGlobe");
      }),
      destructableLayers: Object.values(layers2).filter(function(l) {
        return l.hasOwnProperty("_destructor");
      }),
      pausableLayers: Object.values(layers2).filter(function(l) {
        return l.hasOwnProperty("pauseAnimation");
      })
    });
  },
  init: function init15(threeObj, state, _ref16) {
    var _ref16$animateIn = _ref16.animateIn, animateIn = _ref16$animateIn === void 0 ? true : _ref16$animateIn, _ref16$waitForGlobeRe = _ref16.waitForGlobeReady, waitForGlobeReady = _ref16$waitForGlobeRe === void 0 ? true : _ref16$waitForGlobeRe;
    emptyObject(threeObj);
    state.scene = threeObj;
    state.scene.visible = false;
    layers.forEach(function(layer) {
      var g = new THREE3.Group();
      state.scene.add(g);
      state[layer](g);
    });
    var initGlobe = function initGlobe2() {
      if (animateIn) {
        state.scene.scale.set(1e-6, 1e-6, 1e-6);
        state.tweenGroup.add(new Tween({
          k: 1e-6
        }).to({
          k: 1
        }, 600).easing(Easing.Quadratic.Out).onUpdate(function(_ref17) {
          var k = _ref17.k;
          return state.scene.scale.set(k, k, k);
        }).start());
        var rotAxis = new THREE3.Vector3(0, 1, 0);
        state.tweenGroup.add(new Tween({
          rot: Math.PI * 2
        }).to({
          rot: 0
        }, 1200).easing(Easing.Quintic.Out).onUpdate(function(_ref18) {
          var rot = _ref18.rot;
          return state.scene.setRotationFromAxisAngle(rotAxis, rot);
        }).start());
      }
      state.scene.visible = true;
      state.onGlobeReady && state.onGlobeReady();
    };
    waitForGlobeReady ? state.globeLayer.onReady(initGlobe) : initGlobe();
    this._animationCycle();
  },
  update: function update16(state) {
  }
});
function fromKapsule(kapsule) {
  var baseClass = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Object;
  var initKapsuleWithSelf = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var FromKapsule = function(_baseClass) {
    function FromKapsule2() {
      var _this;
      _classCallCheck4(this, FromKapsule2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper3(this, FromKapsule2, [].concat(args));
      _this.__kapsuleInstance = kapsule.apply(void 0, args).apply(void 0, [].concat(_toConsumableArray4(initKapsuleWithSelf ? [_this] : []), args));
      return _this;
    }
    _inherits3(FromKapsule2, _baseClass);
    return _createClass4(FromKapsule2);
  }(baseClass);
  Object.keys(kapsule()).forEach(function(m) {
    return FromKapsule.prototype[m] = function() {
      var _this$__kapsuleInstan;
      var returnVal = (_this$__kapsuleInstan = this.__kapsuleInstance)[m].apply(_this$__kapsuleInstan, arguments);
      return returnVal === this.__kapsuleInstance ? this : returnVal;
    };
  });
  return FromKapsule;
}
var three = window.THREE ? window.THREE : {
  Group
};
var threeGlobe = fromKapsule(Globe, three.Group, true);

// node_modules/three/examples/jsm/controls/TrackballControls.js
var _changeEvent = { type: "change" };
var _startEvent = { type: "start" };
var _endEvent = { type: "end" };
var _EPS = 1e-6;
var _STATE = { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };
var _v2 = new Vector2();
var _mouseChange = new Vector2();
var _objectUp = new Vector3();
var _pan = new Vector3();
var _axis = new Vector3();
var _quaternion = new Quaternion();
var _eyeDirection = new Vector3();
var _objectUpDirection = new Vector3();
var _objectSidewaysDirection = new Vector3();
var _moveDirection = new Vector3();
var TrackballControls = class extends Controls {
  constructor(object2, domElement = null) {
    super(object2, domElement);
    this.enabled = true;
    this.screen = { left: 0, top: 0, width: 0, height: 0 };
    this.rotateSpeed = 1;
    this.zoomSpeed = 1.2;
    this.panSpeed = 0.3;
    this.noRotate = false;
    this.noZoom = false;
    this.noPan = false;
    this.staticMoving = false;
    this.dynamicDampingFactor = 0.2;
    this.minDistance = 0;
    this.maxDistance = Infinity;
    this.minZoom = 0;
    this.maxZoom = Infinity;
    this.keys = [
      "KeyA",
      "KeyS",
      "KeyD"
      /*D*/
    ];
    this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };
    this.state = _STATE.NONE;
    this.keyState = _STATE.NONE;
    this.target = new Vector3();
    this._lastPosition = new Vector3();
    this._lastZoom = 1;
    this._touchZoomDistanceStart = 0;
    this._touchZoomDistanceEnd = 0;
    this._lastAngle = 0;
    this._eye = new Vector3();
    this._movePrev = new Vector2();
    this._moveCurr = new Vector2();
    this._lastAxis = new Vector3();
    this._zoomStart = new Vector2();
    this._zoomEnd = new Vector2();
    this._panStart = new Vector2();
    this._panEnd = new Vector2();
    this._pointers = [];
    this._pointerPositions = {};
    this._onPointerMove = onPointerMove.bind(this);
    this._onPointerDown = onPointerDown.bind(this);
    this._onPointerUp = onPointerUp.bind(this);
    this._onPointerCancel = onPointerCancel.bind(this);
    this._onContextMenu = onContextMenu.bind(this);
    this._onMouseWheel = onMouseWheel.bind(this);
    this._onKeyDown = onKeyDown.bind(this);
    this._onKeyUp = onKeyUp.bind(this);
    this._onTouchStart = onTouchStart.bind(this);
    this._onTouchMove = onTouchMove.bind(this);
    this._onTouchEnd = onTouchEnd.bind(this);
    this._onMouseDown = onMouseDown.bind(this);
    this._onMouseMove = onMouseMove.bind(this);
    this._onMouseUp = onMouseUp.bind(this);
    this._target0 = this.target.clone();
    this._position0 = this.object.position.clone();
    this._up0 = this.object.up.clone();
    this._zoom0 = this.object.zoom;
    if (domElement !== null) {
      this.connect();
      this.handleResize();
    }
    this.update();
  }
  connect() {
    window.addEventListener("keydown", this._onKeyDown);
    window.addEventListener("keyup", this._onKeyUp);
    this.domElement.addEventListener("pointerdown", this._onPointerDown);
    this.domElement.addEventListener("pointercancel", this._onPointerCancel);
    this.domElement.addEventListener("wheel", this._onMouseWheel, { passive: false });
    this.domElement.addEventListener("contextmenu", this._onContextMenu);
    this.domElement.style.touchAction = "none";
  }
  disconnect() {
    window.removeEventListener("keydown", this._onKeyDown);
    window.removeEventListener("keyup", this._onKeyUp);
    this.domElement.removeEventListener("pointerdown", this._onPointerDown);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
    this.domElement.removeEventListener("pointercancel", this._onPointerCancel);
    this.domElement.removeEventListener("wheel", this._onMouseWheel);
    this.domElement.removeEventListener("contextmenu", this._onContextMenu);
    this.domElement.style.touchAction = "auto";
  }
  dispose() {
    this.disconnect();
  }
  handleResize() {
    const box = this.domElement.getBoundingClientRect();
    const d = this.domElement.ownerDocument.documentElement;
    this.screen.left = box.left + window.pageXOffset - d.clientLeft;
    this.screen.top = box.top + window.pageYOffset - d.clientTop;
    this.screen.width = box.width;
    this.screen.height = box.height;
  }
  update() {
    this._eye.subVectors(this.object.position, this.target);
    if (!this.noRotate) {
      this._rotateCamera();
    }
    if (!this.noZoom) {
      this._zoomCamera();
    }
    if (!this.noPan) {
      this._panCamera();
    }
    this.object.position.addVectors(this.target, this._eye);
    if (this.object.isPerspectiveCamera) {
      this._checkDistances();
      this.object.lookAt(this.target);
      if (this._lastPosition.distanceToSquared(this.object.position) > _EPS) {
        this.dispatchEvent(_changeEvent);
        this._lastPosition.copy(this.object.position);
      }
    } else if (this.object.isOrthographicCamera) {
      this.object.lookAt(this.target);
      if (this._lastPosition.distanceToSquared(this.object.position) > _EPS || this._lastZoom !== this.object.zoom) {
        this.dispatchEvent(_changeEvent);
        this._lastPosition.copy(this.object.position);
        this._lastZoom = this.object.zoom;
      }
    } else {
      console.warn("THREE.TrackballControls: Unsupported camera type.");
    }
  }
  reset() {
    this.state = _STATE.NONE;
    this.keyState = _STATE.NONE;
    this.target.copy(this._target0);
    this.object.position.copy(this._position0);
    this.object.up.copy(this._up0);
    this.object.zoom = this._zoom0;
    this.object.updateProjectionMatrix();
    this._eye.subVectors(this.object.position, this.target);
    this.object.lookAt(this.target);
    this.dispatchEvent(_changeEvent);
    this._lastPosition.copy(this.object.position);
    this._lastZoom = this.object.zoom;
  }
  _panCamera() {
    _mouseChange.copy(this._panEnd).sub(this._panStart);
    if (_mouseChange.lengthSq()) {
      if (this.object.isOrthographicCamera) {
        const scale_x = (this.object.right - this.object.left) / this.object.zoom / this.domElement.clientWidth;
        const scale_y = (this.object.top - this.object.bottom) / this.object.zoom / this.domElement.clientWidth;
        _mouseChange.x *= scale_x;
        _mouseChange.y *= scale_y;
      }
      _mouseChange.multiplyScalar(this._eye.length() * this.panSpeed);
      _pan.copy(this._eye).cross(this.object.up).setLength(_mouseChange.x);
      _pan.add(_objectUp.copy(this.object.up).setLength(_mouseChange.y));
      this.object.position.add(_pan);
      this.target.add(_pan);
      if (this.staticMoving) {
        this._panStart.copy(this._panEnd);
      } else {
        this._panStart.add(_mouseChange.subVectors(this._panEnd, this._panStart).multiplyScalar(this.dynamicDampingFactor));
      }
    }
  }
  _rotateCamera() {
    _moveDirection.set(this._moveCurr.x - this._movePrev.x, this._moveCurr.y - this._movePrev.y, 0);
    let angle2 = _moveDirection.length();
    if (angle2) {
      this._eye.copy(this.object.position).sub(this.target);
      _eyeDirection.copy(this._eye).normalize();
      _objectUpDirection.copy(this.object.up).normalize();
      _objectSidewaysDirection.crossVectors(_objectUpDirection, _eyeDirection).normalize();
      _objectUpDirection.setLength(this._moveCurr.y - this._movePrev.y);
      _objectSidewaysDirection.setLength(this._moveCurr.x - this._movePrev.x);
      _moveDirection.copy(_objectUpDirection.add(_objectSidewaysDirection));
      _axis.crossVectors(_moveDirection, this._eye).normalize();
      angle2 *= this.rotateSpeed;
      _quaternion.setFromAxisAngle(_axis, angle2);
      this._eye.applyQuaternion(_quaternion);
      this.object.up.applyQuaternion(_quaternion);
      this._lastAxis.copy(_axis);
      this._lastAngle = angle2;
    } else if (!this.staticMoving && this._lastAngle) {
      this._lastAngle *= Math.sqrt(1 - this.dynamicDampingFactor);
      this._eye.copy(this.object.position).sub(this.target);
      _quaternion.setFromAxisAngle(this._lastAxis, this._lastAngle);
      this._eye.applyQuaternion(_quaternion);
      this.object.up.applyQuaternion(_quaternion);
    }
    this._movePrev.copy(this._moveCurr);
  }
  _zoomCamera() {
    let factor;
    if (this.state === _STATE.TOUCH_ZOOM_PAN) {
      factor = this._touchZoomDistanceStart / this._touchZoomDistanceEnd;
      this._touchZoomDistanceStart = this._touchZoomDistanceEnd;
      if (this.object.isPerspectiveCamera) {
        this._eye.multiplyScalar(factor);
      } else if (this.object.isOrthographicCamera) {
        this.object.zoom = MathUtils.clamp(this.object.zoom / factor, this.minZoom, this.maxZoom);
        if (this._lastZoom !== this.object.zoom) {
          this.object.updateProjectionMatrix();
        }
      } else {
        console.warn("THREE.TrackballControls: Unsupported camera type");
      }
    } else {
      factor = 1 + (this._zoomEnd.y - this._zoomStart.y) * this.zoomSpeed;
      if (factor !== 1 && factor > 0) {
        if (this.object.isPerspectiveCamera) {
          this._eye.multiplyScalar(factor);
        } else if (this.object.isOrthographicCamera) {
          this.object.zoom = MathUtils.clamp(this.object.zoom / factor, this.minZoom, this.maxZoom);
          if (this._lastZoom !== this.object.zoom) {
            this.object.updateProjectionMatrix();
          }
        } else {
          console.warn("THREE.TrackballControls: Unsupported camera type");
        }
      }
      if (this.staticMoving) {
        this._zoomStart.copy(this._zoomEnd);
      } else {
        this._zoomStart.y += (this._zoomEnd.y - this._zoomStart.y) * this.dynamicDampingFactor;
      }
    }
  }
  _getMouseOnScreen(pageX, pageY) {
    _v2.set(
      (pageX - this.screen.left) / this.screen.width,
      (pageY - this.screen.top) / this.screen.height
    );
    return _v2;
  }
  _getMouseOnCircle(pageX, pageY) {
    _v2.set(
      (pageX - this.screen.width * 0.5 - this.screen.left) / (this.screen.width * 0.5),
      (this.screen.height + 2 * (this.screen.top - pageY)) / this.screen.width
      // screen.width intentional
    );
    return _v2;
  }
  _addPointer(event) {
    this._pointers.push(event);
  }
  _removePointer(event) {
    delete this._pointerPositions[event.pointerId];
    for (let i = 0; i < this._pointers.length; i++) {
      if (this._pointers[i].pointerId == event.pointerId) {
        this._pointers.splice(i, 1);
        return;
      }
    }
  }
  _trackPointer(event) {
    let position = this._pointerPositions[event.pointerId];
    if (position === void 0) {
      position = new Vector2();
      this._pointerPositions[event.pointerId] = position;
    }
    position.set(event.pageX, event.pageY);
  }
  _getSecondPointerPosition(event) {
    const pointer = event.pointerId === this._pointers[0].pointerId ? this._pointers[1] : this._pointers[0];
    return this._pointerPositions[pointer.pointerId];
  }
  _checkDistances() {
    if (!this.noZoom || !this.noPan) {
      if (this._eye.lengthSq() > this.maxDistance * this.maxDistance) {
        this.object.position.addVectors(this.target, this._eye.setLength(this.maxDistance));
        this._zoomStart.copy(this._zoomEnd);
      }
      if (this._eye.lengthSq() < this.minDistance * this.minDistance) {
        this.object.position.addVectors(this.target, this._eye.setLength(this.minDistance));
        this._zoomStart.copy(this._zoomEnd);
      }
    }
  }
};
function onPointerDown(event) {
  if (this.enabled === false) return;
  if (this._pointers.length === 0) {
    this.domElement.setPointerCapture(event.pointerId);
    this.domElement.addEventListener("pointermove", this._onPointerMove);
    this.domElement.addEventListener("pointerup", this._onPointerUp);
  }
  this._addPointer(event);
  if (event.pointerType === "touch") {
    this._onTouchStart(event);
  } else {
    this._onMouseDown(event);
  }
}
function onPointerMove(event) {
  if (this.enabled === false) return;
  if (event.pointerType === "touch") {
    this._onTouchMove(event);
  } else {
    this._onMouseMove(event);
  }
}
function onPointerUp(event) {
  if (this.enabled === false) return;
  if (event.pointerType === "touch") {
    this._onTouchEnd(event);
  } else {
    this._onMouseUp();
  }
  this._removePointer(event);
  if (this._pointers.length === 0) {
    this.domElement.releasePointerCapture(event.pointerId);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
  }
}
function onPointerCancel(event) {
  this._removePointer(event);
}
function onKeyUp() {
  if (this.enabled === false) return;
  this.keyState = _STATE.NONE;
  window.addEventListener("keydown", this._onKeyDown);
}
function onKeyDown(event) {
  if (this.enabled === false) return;
  window.removeEventListener("keydown", this._onKeyDown);
  if (this.keyState !== _STATE.NONE) {
    return;
  } else if (event.code === this.keys[_STATE.ROTATE] && !this.noRotate) {
    this.keyState = _STATE.ROTATE;
  } else if (event.code === this.keys[_STATE.ZOOM] && !this.noZoom) {
    this.keyState = _STATE.ZOOM;
  } else if (event.code === this.keys[_STATE.PAN] && !this.noPan) {
    this.keyState = _STATE.PAN;
  }
}
function onMouseDown(event) {
  let mouseAction;
  switch (event.button) {
    case 0:
      mouseAction = this.mouseButtons.LEFT;
      break;
    case 1:
      mouseAction = this.mouseButtons.MIDDLE;
      break;
    case 2:
      mouseAction = this.mouseButtons.RIGHT;
      break;
    default:
      mouseAction = -1;
  }
  switch (mouseAction) {
    case MOUSE.DOLLY:
      this.state = _STATE.ZOOM;
      break;
    case MOUSE.ROTATE:
      this.state = _STATE.ROTATE;
      break;
    case MOUSE.PAN:
      this.state = _STATE.PAN;
      break;
    default:
      this.state = _STATE.NONE;
  }
  const state = this.keyState !== _STATE.NONE ? this.keyState : this.state;
  if (state === _STATE.ROTATE && !this.noRotate) {
    this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
    this._movePrev.copy(this._moveCurr);
  } else if (state === _STATE.ZOOM && !this.noZoom) {
    this._zoomStart.copy(this._getMouseOnScreen(event.pageX, event.pageY));
    this._zoomEnd.copy(this._zoomStart);
  } else if (state === _STATE.PAN && !this.noPan) {
    this._panStart.copy(this._getMouseOnScreen(event.pageX, event.pageY));
    this._panEnd.copy(this._panStart);
  }
  this.dispatchEvent(_startEvent);
}
function onMouseMove(event) {
  const state = this.keyState !== _STATE.NONE ? this.keyState : this.state;
  if (state === _STATE.ROTATE && !this.noRotate) {
    this._movePrev.copy(this._moveCurr);
    this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
  } else if (state === _STATE.ZOOM && !this.noZoom) {
    this._zoomEnd.copy(this._getMouseOnScreen(event.pageX, event.pageY));
  } else if (state === _STATE.PAN && !this.noPan) {
    this._panEnd.copy(this._getMouseOnScreen(event.pageX, event.pageY));
  }
}
function onMouseUp() {
  this.state = _STATE.NONE;
  this.dispatchEvent(_endEvent);
}
function onMouseWheel(event) {
  if (this.enabled === false) return;
  if (this.noZoom === true) return;
  event.preventDefault();
  switch (event.deltaMode) {
    case 2:
      this._zoomStart.y -= event.deltaY * 0.025;
      break;
    case 1:
      this._zoomStart.y -= event.deltaY * 0.01;
      break;
    default:
      this._zoomStart.y -= event.deltaY * 25e-5;
      break;
  }
  this.dispatchEvent(_startEvent);
  this.dispatchEvent(_endEvent);
}
function onContextMenu(event) {
  if (this.enabled === false) return;
  event.preventDefault();
}
function onTouchStart(event) {
  this._trackPointer(event);
  switch (this._pointers.length) {
    case 1:
      this.state = _STATE.TOUCH_ROTATE;
      this._moveCurr.copy(this._getMouseOnCircle(this._pointers[0].pageX, this._pointers[0].pageY));
      this._movePrev.copy(this._moveCurr);
      break;
    default:
      this.state = _STATE.TOUCH_ZOOM_PAN;
      const dx = this._pointers[0].pageX - this._pointers[1].pageX;
      const dy = this._pointers[0].pageY - this._pointers[1].pageY;
      this._touchZoomDistanceEnd = this._touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);
      const x = (this._pointers[0].pageX + this._pointers[1].pageX) / 2;
      const y = (this._pointers[0].pageY + this._pointers[1].pageY) / 2;
      this._panStart.copy(this._getMouseOnScreen(x, y));
      this._panEnd.copy(this._panStart);
      break;
  }
  this.dispatchEvent(_startEvent);
}
function onTouchMove(event) {
  this._trackPointer(event);
  switch (this._pointers.length) {
    case 1:
      this._movePrev.copy(this._moveCurr);
      this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
      break;
    default:
      const position = this._getSecondPointerPosition(event);
      const dx = event.pageX - position.x;
      const dy = event.pageY - position.y;
      this._touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);
      const x = (event.pageX + position.x) / 2;
      const y = (event.pageY + position.y) / 2;
      this._panEnd.copy(this._getMouseOnScreen(x, y));
      break;
  }
}
function onTouchEnd(event) {
  switch (this._pointers.length) {
    case 0:
      this.state = _STATE.NONE;
      break;
    case 1:
      this.state = _STATE.TOUCH_ROTATE;
      this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
      this._movePrev.copy(this._moveCurr);
      break;
    case 2:
      this.state = _STATE.TOUCH_ZOOM_PAN;
      for (let i = 0; i < this._pointers.length; i++) {
        if (this._pointers[i].pointerId !== event.pointerId) {
          const position = this._pointerPositions[this._pointers[i].pointerId];
          this._moveCurr.copy(this._getMouseOnCircle(position.x, position.y));
          this._movePrev.copy(this._moveCurr);
          break;
        }
      }
      break;
  }
  this.dispatchEvent(_endEvent);
}

// node_modules/three/examples/jsm/controls/OrbitControls.js
var _changeEvent2 = { type: "change" };
var _startEvent2 = { type: "start" };
var _endEvent2 = { type: "end" };
var _ray2 = new Ray();
var _plane = new Plane();
var _TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD);
var _v = new Vector3();
var _twoPI = 2 * Math.PI;
var _STATE2 = {
  NONE: -1,
  ROTATE: 0,
  DOLLY: 1,
  PAN: 2,
  TOUCH_ROTATE: 3,
  TOUCH_PAN: 4,
  TOUCH_DOLLY_PAN: 5,
  TOUCH_DOLLY_ROTATE: 6
};
var _EPS2 = 1e-6;
var OrbitControls = class extends Controls {
  constructor(object2, domElement = null) {
    super(object2, domElement);
    this.state = _STATE2.NONE;
    this.enabled = true;
    this.target = new Vector3();
    this.cursor = new Vector3();
    this.minDistance = 0;
    this.maxDistance = Infinity;
    this.minZoom = 0;
    this.maxZoom = Infinity;
    this.minTargetRadius = 0;
    this.maxTargetRadius = Infinity;
    this.minPolarAngle = 0;
    this.maxPolarAngle = Math.PI;
    this.minAzimuthAngle = -Infinity;
    this.maxAzimuthAngle = Infinity;
    this.enableDamping = false;
    this.dampingFactor = 0.05;
    this.enableZoom = true;
    this.zoomSpeed = 1;
    this.enableRotate = true;
    this.rotateSpeed = 1;
    this.enablePan = true;
    this.panSpeed = 1;
    this.screenSpacePanning = true;
    this.keyPanSpeed = 7;
    this.zoomToCursor = false;
    this.autoRotate = false;
    this.autoRotateSpeed = 2;
    this.keys = { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" };
    this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };
    this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };
    this.target0 = this.target.clone();
    this.position0 = this.object.position.clone();
    this.zoom0 = this.object.zoom;
    this._domElementKeyEvents = null;
    this._lastPosition = new Vector3();
    this._lastQuaternion = new Quaternion();
    this._lastTargetPosition = new Vector3();
    this._quat = new Quaternion().setFromUnitVectors(object2.up, new Vector3(0, 1, 0));
    this._quatInverse = this._quat.clone().invert();
    this._spherical = new Spherical();
    this._sphericalDelta = new Spherical();
    this._scale = 1;
    this._panOffset = new Vector3();
    this._rotateStart = new Vector2();
    this._rotateEnd = new Vector2();
    this._rotateDelta = new Vector2();
    this._panStart = new Vector2();
    this._panEnd = new Vector2();
    this._panDelta = new Vector2();
    this._dollyStart = new Vector2();
    this._dollyEnd = new Vector2();
    this._dollyDelta = new Vector2();
    this._dollyDirection = new Vector3();
    this._mouse = new Vector2();
    this._performCursorZoom = false;
    this._pointers = [];
    this._pointerPositions = {};
    this._controlActive = false;
    this._onPointerMove = onPointerMove2.bind(this);
    this._onPointerDown = onPointerDown2.bind(this);
    this._onPointerUp = onPointerUp2.bind(this);
    this._onContextMenu = onContextMenu2.bind(this);
    this._onMouseWheel = onMouseWheel2.bind(this);
    this._onKeyDown = onKeyDown2.bind(this);
    this._onTouchStart = onTouchStart2.bind(this);
    this._onTouchMove = onTouchMove2.bind(this);
    this._onMouseDown = onMouseDown2.bind(this);
    this._onMouseMove = onMouseMove2.bind(this);
    this._interceptControlDown = interceptControlDown.bind(this);
    this._interceptControlUp = interceptControlUp.bind(this);
    if (this.domElement !== null) {
      this.connect();
    }
    this.update();
  }
  connect() {
    this.domElement.addEventListener("pointerdown", this._onPointerDown);
    this.domElement.addEventListener("pointercancel", this._onPointerUp);
    this.domElement.addEventListener("contextmenu", this._onContextMenu);
    this.domElement.addEventListener("wheel", this._onMouseWheel, { passive: false });
    const document2 = this.domElement.getRootNode();
    document2.addEventListener("keydown", this._interceptControlDown, { passive: true, capture: true });
    this.domElement.style.touchAction = "none";
  }
  disconnect() {
    this.domElement.removeEventListener("pointerdown", this._onPointerDown);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
    this.domElement.removeEventListener("pointercancel", this._onPointerUp);
    this.domElement.removeEventListener("wheel", this._onMouseWheel);
    this.domElement.removeEventListener("contextmenu", this._onContextMenu);
    this.stopListenToKeyEvents();
    const document2 = this.domElement.getRootNode();
    document2.removeEventListener("keydown", this._interceptControlDown, { capture: true });
    this.domElement.style.touchAction = "auto";
  }
  dispose() {
    this.disconnect();
  }
  getPolarAngle() {
    return this._spherical.phi;
  }
  getAzimuthalAngle() {
    return this._spherical.theta;
  }
  getDistance() {
    return this.object.position.distanceTo(this.target);
  }
  listenToKeyEvents(domElement) {
    domElement.addEventListener("keydown", this._onKeyDown);
    this._domElementKeyEvents = domElement;
  }
  stopListenToKeyEvents() {
    if (this._domElementKeyEvents !== null) {
      this._domElementKeyEvents.removeEventListener("keydown", this._onKeyDown);
      this._domElementKeyEvents = null;
    }
  }
  saveState() {
    this.target0.copy(this.target);
    this.position0.copy(this.object.position);
    this.zoom0 = this.object.zoom;
  }
  reset() {
    this.target.copy(this.target0);
    this.object.position.copy(this.position0);
    this.object.zoom = this.zoom0;
    this.object.updateProjectionMatrix();
    this.dispatchEvent(_changeEvent2);
    this.update();
    this.state = _STATE2.NONE;
  }
  update(deltaTime = null) {
    const position = this.object.position;
    _v.copy(position).sub(this.target);
    _v.applyQuaternion(this._quat);
    this._spherical.setFromVector3(_v);
    if (this.autoRotate && this.state === _STATE2.NONE) {
      this._rotateLeft(this._getAutoRotationAngle(deltaTime));
    }
    if (this.enableDamping) {
      this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;
      this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;
    } else {
      this._spherical.theta += this._sphericalDelta.theta;
      this._spherical.phi += this._sphericalDelta.phi;
    }
    let min3 = this.minAzimuthAngle;
    let max3 = this.maxAzimuthAngle;
    if (isFinite(min3) && isFinite(max3)) {
      if (min3 < -Math.PI) min3 += _twoPI;
      else if (min3 > Math.PI) min3 -= _twoPI;
      if (max3 < -Math.PI) max3 += _twoPI;
      else if (max3 > Math.PI) max3 -= _twoPI;
      if (min3 <= max3) {
        this._spherical.theta = Math.max(min3, Math.min(max3, this._spherical.theta));
      } else {
        this._spherical.theta = this._spherical.theta > (min3 + max3) / 2 ? Math.max(min3, this._spherical.theta) : Math.min(max3, this._spherical.theta);
      }
    }
    this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));
    this._spherical.makeSafe();
    if (this.enableDamping === true) {
      this.target.addScaledVector(this._panOffset, this.dampingFactor);
    } else {
      this.target.add(this._panOffset);
    }
    this.target.sub(this.cursor);
    this.target.clampLength(this.minTargetRadius, this.maxTargetRadius);
    this.target.add(this.cursor);
    let zoomChanged = false;
    if (this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera) {
      this._spherical.radius = this._clampDistance(this._spherical.radius);
    } else {
      const prevRadius = this._spherical.radius;
      this._spherical.radius = this._clampDistance(this._spherical.radius * this._scale);
      zoomChanged = prevRadius != this._spherical.radius;
    }
    _v.setFromSpherical(this._spherical);
    _v.applyQuaternion(this._quatInverse);
    position.copy(this.target).add(_v);
    this.object.lookAt(this.target);
    if (this.enableDamping === true) {
      this._sphericalDelta.theta *= 1 - this.dampingFactor;
      this._sphericalDelta.phi *= 1 - this.dampingFactor;
      this._panOffset.multiplyScalar(1 - this.dampingFactor);
    } else {
      this._sphericalDelta.set(0, 0, 0);
      this._panOffset.set(0, 0, 0);
    }
    if (this.zoomToCursor && this._performCursorZoom) {
      let newRadius = null;
      if (this.object.isPerspectiveCamera) {
        const prevRadius = _v.length();
        newRadius = this._clampDistance(prevRadius * this._scale);
        const radiusDelta = prevRadius - newRadius;
        this.object.position.addScaledVector(this._dollyDirection, radiusDelta);
        this.object.updateMatrixWorld();
        zoomChanged = !!radiusDelta;
      } else if (this.object.isOrthographicCamera) {
        const mouseBefore = new Vector3(this._mouse.x, this._mouse.y, 0);
        mouseBefore.unproject(this.object);
        const prevZoom = this.object.zoom;
        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));
        this.object.updateProjectionMatrix();
        zoomChanged = prevZoom !== this.object.zoom;
        const mouseAfter = new Vector3(this._mouse.x, this._mouse.y, 0);
        mouseAfter.unproject(this.object);
        this.object.position.sub(mouseAfter).add(mouseBefore);
        this.object.updateMatrixWorld();
        newRadius = _v.length();
      } else {
        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.");
        this.zoomToCursor = false;
      }
      if (newRadius !== null) {
        if (this.screenSpacePanning) {
          this.target.set(0, 0, -1).transformDirection(this.object.matrix).multiplyScalar(newRadius).add(this.object.position);
        } else {
          _ray2.origin.copy(this.object.position);
          _ray2.direction.set(0, 0, -1).transformDirection(this.object.matrix);
          if (Math.abs(this.object.up.dot(_ray2.direction)) < _TILT_LIMIT) {
            this.object.lookAt(this.target);
          } else {
            _plane.setFromNormalAndCoplanarPoint(this.object.up, this.target);
            _ray2.intersectPlane(_plane, this.target);
          }
        }
      }
    } else if (this.object.isOrthographicCamera) {
      const prevZoom = this.object.zoom;
      this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));
      if (prevZoom !== this.object.zoom) {
        this.object.updateProjectionMatrix();
        zoomChanged = true;
      }
    }
    this._scale = 1;
    this._performCursorZoom = false;
    if (zoomChanged || this._lastPosition.distanceToSquared(this.object.position) > _EPS2 || 8 * (1 - this._lastQuaternion.dot(this.object.quaternion)) > _EPS2 || this._lastTargetPosition.distanceToSquared(this.target) > _EPS2) {
      this.dispatchEvent(_changeEvent2);
      this._lastPosition.copy(this.object.position);
      this._lastQuaternion.copy(this.object.quaternion);
      this._lastTargetPosition.copy(this.target);
      return true;
    }
    return false;
  }
  _getAutoRotationAngle(deltaTime) {
    if (deltaTime !== null) {
      return _twoPI / 60 * this.autoRotateSpeed * deltaTime;
    } else {
      return _twoPI / 60 / 60 * this.autoRotateSpeed;
    }
  }
  _getZoomScale(delta) {
    const normalizedDelta = Math.abs(delta * 0.01);
    return Math.pow(0.95, this.zoomSpeed * normalizedDelta);
  }
  _rotateLeft(angle2) {
    this._sphericalDelta.theta -= angle2;
  }
  _rotateUp(angle2) {
    this._sphericalDelta.phi -= angle2;
  }
  _panLeft(distance, objectMatrix) {
    _v.setFromMatrixColumn(objectMatrix, 0);
    _v.multiplyScalar(-distance);
    this._panOffset.add(_v);
  }
  _panUp(distance, objectMatrix) {
    if (this.screenSpacePanning === true) {
      _v.setFromMatrixColumn(objectMatrix, 1);
    } else {
      _v.setFromMatrixColumn(objectMatrix, 0);
      _v.crossVectors(this.object.up, _v);
    }
    _v.multiplyScalar(distance);
    this._panOffset.add(_v);
  }
  // deltaX and deltaY are in pixels; right and down are positive
  _pan(deltaX, deltaY) {
    const element = this.domElement;
    if (this.object.isPerspectiveCamera) {
      const position = this.object.position;
      _v.copy(position).sub(this.target);
      let targetDistance = _v.length();
      targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180);
      this._panLeft(2 * deltaX * targetDistance / element.clientHeight, this.object.matrix);
      this._panUp(2 * deltaY * targetDistance / element.clientHeight, this.object.matrix);
    } else if (this.object.isOrthographicCamera) {
      this._panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element.clientWidth, this.object.matrix);
      this._panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element.clientHeight, this.object.matrix);
    } else {
      console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
      this.enablePan = false;
    }
  }
  _dollyOut(dollyScale) {
    if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {
      this._scale /= dollyScale;
    } else {
      console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
      this.enableZoom = false;
    }
  }
  _dollyIn(dollyScale) {
    if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {
      this._scale *= dollyScale;
    } else {
      console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
      this.enableZoom = false;
    }
  }
  _updateZoomParameters(x, y) {
    if (!this.zoomToCursor) {
      return;
    }
    this._performCursorZoom = true;
    const rect = this.domElement.getBoundingClientRect();
    const dx = x - rect.left;
    const dy = y - rect.top;
    const w = rect.width;
    const h = rect.height;
    this._mouse.x = dx / w * 2 - 1;
    this._mouse.y = -(dy / h) * 2 + 1;
    this._dollyDirection.set(this._mouse.x, this._mouse.y, 1).unproject(this.object).sub(this.object.position).normalize();
  }
  _clampDistance(dist2) {
    return Math.max(this.minDistance, Math.min(this.maxDistance, dist2));
  }
  //
  // event callbacks - update the object state
  //
  _handleMouseDownRotate(event) {
    this._rotateStart.set(event.clientX, event.clientY);
  }
  _handleMouseDownDolly(event) {
    this._updateZoomParameters(event.clientX, event.clientX);
    this._dollyStart.set(event.clientX, event.clientY);
  }
  _handleMouseDownPan(event) {
    this._panStart.set(event.clientX, event.clientY);
  }
  _handleMouseMoveRotate(event) {
    this._rotateEnd.set(event.clientX, event.clientY);
    this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);
    const element = this.domElement;
    this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight);
    this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);
    this._rotateStart.copy(this._rotateEnd);
    this.update();
  }
  _handleMouseMoveDolly(event) {
    this._dollyEnd.set(event.clientX, event.clientY);
    this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);
    if (this._dollyDelta.y > 0) {
      this._dollyOut(this._getZoomScale(this._dollyDelta.y));
    } else if (this._dollyDelta.y < 0) {
      this._dollyIn(this._getZoomScale(this._dollyDelta.y));
    }
    this._dollyStart.copy(this._dollyEnd);
    this.update();
  }
  _handleMouseMovePan(event) {
    this._panEnd.set(event.clientX, event.clientY);
    this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);
    this._pan(this._panDelta.x, this._panDelta.y);
    this._panStart.copy(this._panEnd);
    this.update();
  }
  _handleMouseWheel(event) {
    this._updateZoomParameters(event.clientX, event.clientY);
    if (event.deltaY < 0) {
      this._dollyIn(this._getZoomScale(event.deltaY));
    } else if (event.deltaY > 0) {
      this._dollyOut(this._getZoomScale(event.deltaY));
    }
    this.update();
  }
  _handleKeyDown(event) {
    let needsUpdate = false;
    switch (event.code) {
      case this.keys.UP:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          this._rotateUp(_twoPI * this.rotateSpeed / this.domElement.clientHeight);
        } else {
          this._pan(0, this.keyPanSpeed);
        }
        needsUpdate = true;
        break;
      case this.keys.BOTTOM:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          this._rotateUp(-_twoPI * this.rotateSpeed / this.domElement.clientHeight);
        } else {
          this._pan(0, -this.keyPanSpeed);
        }
        needsUpdate = true;
        break;
      case this.keys.LEFT:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          this._rotateLeft(_twoPI * this.rotateSpeed / this.domElement.clientHeight);
        } else {
          this._pan(this.keyPanSpeed, 0);
        }
        needsUpdate = true;
        break;
      case this.keys.RIGHT:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          this._rotateLeft(-_twoPI * this.rotateSpeed / this.domElement.clientHeight);
        } else {
          this._pan(-this.keyPanSpeed, 0);
        }
        needsUpdate = true;
        break;
    }
    if (needsUpdate) {
      event.preventDefault();
      this.update();
    }
  }
  _handleTouchStartRotate(event) {
    if (this._pointers.length === 1) {
      this._rotateStart.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x = 0.5 * (event.pageX + position.x);
      const y = 0.5 * (event.pageY + position.y);
      this._rotateStart.set(x, y);
    }
  }
  _handleTouchStartPan(event) {
    if (this._pointers.length === 1) {
      this._panStart.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x = 0.5 * (event.pageX + position.x);
      const y = 0.5 * (event.pageY + position.y);
      this._panStart.set(x, y);
    }
  }
  _handleTouchStartDolly(event) {
    const position = this._getSecondPointerPosition(event);
    const dx = event.pageX - position.x;
    const dy = event.pageY - position.y;
    const distance = Math.sqrt(dx * dx + dy * dy);
    this._dollyStart.set(0, distance);
  }
  _handleTouchStartDollyPan(event) {
    if (this.enableZoom) this._handleTouchStartDolly(event);
    if (this.enablePan) this._handleTouchStartPan(event);
  }
  _handleTouchStartDollyRotate(event) {
    if (this.enableZoom) this._handleTouchStartDolly(event);
    if (this.enableRotate) this._handleTouchStartRotate(event);
  }
  _handleTouchMoveRotate(event) {
    if (this._pointers.length == 1) {
      this._rotateEnd.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x = 0.5 * (event.pageX + position.x);
      const y = 0.5 * (event.pageY + position.y);
      this._rotateEnd.set(x, y);
    }
    this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);
    const element = this.domElement;
    this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight);
    this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);
    this._rotateStart.copy(this._rotateEnd);
  }
  _handleTouchMovePan(event) {
    if (this._pointers.length === 1) {
      this._panEnd.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x = 0.5 * (event.pageX + position.x);
      const y = 0.5 * (event.pageY + position.y);
      this._panEnd.set(x, y);
    }
    this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);
    this._pan(this._panDelta.x, this._panDelta.y);
    this._panStart.copy(this._panEnd);
  }
  _handleTouchMoveDolly(event) {
    const position = this._getSecondPointerPosition(event);
    const dx = event.pageX - position.x;
    const dy = event.pageY - position.y;
    const distance = Math.sqrt(dx * dx + dy * dy);
    this._dollyEnd.set(0, distance);
    this._dollyDelta.set(0, Math.pow(this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed));
    this._dollyOut(this._dollyDelta.y);
    this._dollyStart.copy(this._dollyEnd);
    const centerX = (event.pageX + position.x) * 0.5;
    const centerY = (event.pageY + position.y) * 0.5;
    this._updateZoomParameters(centerX, centerY);
  }
  _handleTouchMoveDollyPan(event) {
    if (this.enableZoom) this._handleTouchMoveDolly(event);
    if (this.enablePan) this._handleTouchMovePan(event);
  }
  _handleTouchMoveDollyRotate(event) {
    if (this.enableZoom) this._handleTouchMoveDolly(event);
    if (this.enableRotate) this._handleTouchMoveRotate(event);
  }
  // pointers
  _addPointer(event) {
    this._pointers.push(event.pointerId);
  }
  _removePointer(event) {
    delete this._pointerPositions[event.pointerId];
    for (let i = 0; i < this._pointers.length; i++) {
      if (this._pointers[i] == event.pointerId) {
        this._pointers.splice(i, 1);
        return;
      }
    }
  }
  _isTrackingPointer(event) {
    for (let i = 0; i < this._pointers.length; i++) {
      if (this._pointers[i] == event.pointerId) return true;
    }
    return false;
  }
  _trackPointer(event) {
    let position = this._pointerPositions[event.pointerId];
    if (position === void 0) {
      position = new Vector2();
      this._pointerPositions[event.pointerId] = position;
    }
    position.set(event.pageX, event.pageY);
  }
  _getSecondPointerPosition(event) {
    const pointerId = event.pointerId === this._pointers[0] ? this._pointers[1] : this._pointers[0];
    return this._pointerPositions[pointerId];
  }
  //
  _customWheelEvent(event) {
    const mode2 = event.deltaMode;
    const newEvent = {
      clientX: event.clientX,
      clientY: event.clientY,
      deltaY: event.deltaY
    };
    switch (mode2) {
      case 1:
        newEvent.deltaY *= 16;
        break;
      case 2:
        newEvent.deltaY *= 100;
        break;
    }
    if (event.ctrlKey && !this._controlActive) {
      newEvent.deltaY *= 10;
    }
    return newEvent;
  }
};
function onPointerDown2(event) {
  if (this.enabled === false) return;
  if (this._pointers.length === 0) {
    this.domElement.setPointerCapture(event.pointerId);
    this.domElement.addEventListener("pointermove", this._onPointerMove);
    this.domElement.addEventListener("pointerup", this._onPointerUp);
  }
  if (this._isTrackingPointer(event)) return;
  this._addPointer(event);
  if (event.pointerType === "touch") {
    this._onTouchStart(event);
  } else {
    this._onMouseDown(event);
  }
}
function onPointerMove2(event) {
  if (this.enabled === false) return;
  if (event.pointerType === "touch") {
    this._onTouchMove(event);
  } else {
    this._onMouseMove(event);
  }
}
function onPointerUp2(event) {
  this._removePointer(event);
  switch (this._pointers.length) {
    case 0:
      this.domElement.releasePointerCapture(event.pointerId);
      this.domElement.removeEventListener("pointermove", this._onPointerMove);
      this.domElement.removeEventListener("pointerup", this._onPointerUp);
      this.dispatchEvent(_endEvent2);
      this.state = _STATE2.NONE;
      break;
    case 1:
      const pointerId = this._pointers[0];
      const position = this._pointerPositions[pointerId];
      this._onTouchStart({ pointerId, pageX: position.x, pageY: position.y });
      break;
  }
}
function onMouseDown2(event) {
  let mouseAction;
  switch (event.button) {
    case 0:
      mouseAction = this.mouseButtons.LEFT;
      break;
    case 1:
      mouseAction = this.mouseButtons.MIDDLE;
      break;
    case 2:
      mouseAction = this.mouseButtons.RIGHT;
      break;
    default:
      mouseAction = -1;
  }
  switch (mouseAction) {
    case MOUSE.DOLLY:
      if (this.enableZoom === false) return;
      this._handleMouseDownDolly(event);
      this.state = _STATE2.DOLLY;
      break;
    case MOUSE.ROTATE:
      if (event.ctrlKey || event.metaKey || event.shiftKey) {
        if (this.enablePan === false) return;
        this._handleMouseDownPan(event);
        this.state = _STATE2.PAN;
      } else {
        if (this.enableRotate === false) return;
        this._handleMouseDownRotate(event);
        this.state = _STATE2.ROTATE;
      }
      break;
    case MOUSE.PAN:
      if (event.ctrlKey || event.metaKey || event.shiftKey) {
        if (this.enableRotate === false) return;
        this._handleMouseDownRotate(event);
        this.state = _STATE2.ROTATE;
      } else {
        if (this.enablePan === false) return;
        this._handleMouseDownPan(event);
        this.state = _STATE2.PAN;
      }
      break;
    default:
      this.state = _STATE2.NONE;
  }
  if (this.state !== _STATE2.NONE) {
    this.dispatchEvent(_startEvent2);
  }
}
function onMouseMove2(event) {
  switch (this.state) {
    case _STATE2.ROTATE:
      if (this.enableRotate === false) return;
      this._handleMouseMoveRotate(event);
      break;
    case _STATE2.DOLLY:
      if (this.enableZoom === false) return;
      this._handleMouseMoveDolly(event);
      break;
    case _STATE2.PAN:
      if (this.enablePan === false) return;
      this._handleMouseMovePan(event);
      break;
  }
}
function onMouseWheel2(event) {
  if (this.enabled === false || this.enableZoom === false || this.state !== _STATE2.NONE) return;
  event.preventDefault();
  this.dispatchEvent(_startEvent2);
  this._handleMouseWheel(this._customWheelEvent(event));
  this.dispatchEvent(_endEvent2);
}
function onKeyDown2(event) {
  if (this.enabled === false || this.enablePan === false) return;
  this._handleKeyDown(event);
}
function onTouchStart2(event) {
  this._trackPointer(event);
  switch (this._pointers.length) {
    case 1:
      switch (this.touches.ONE) {
        case TOUCH.ROTATE:
          if (this.enableRotate === false) return;
          this._handleTouchStartRotate(event);
          this.state = _STATE2.TOUCH_ROTATE;
          break;
        case TOUCH.PAN:
          if (this.enablePan === false) return;
          this._handleTouchStartPan(event);
          this.state = _STATE2.TOUCH_PAN;
          break;
        default:
          this.state = _STATE2.NONE;
      }
      break;
    case 2:
      switch (this.touches.TWO) {
        case TOUCH.DOLLY_PAN:
          if (this.enableZoom === false && this.enablePan === false) return;
          this._handleTouchStartDollyPan(event);
          this.state = _STATE2.TOUCH_DOLLY_PAN;
          break;
        case TOUCH.DOLLY_ROTATE:
          if (this.enableZoom === false && this.enableRotate === false) return;
          this._handleTouchStartDollyRotate(event);
          this.state = _STATE2.TOUCH_DOLLY_ROTATE;
          break;
        default:
          this.state = _STATE2.NONE;
      }
      break;
    default:
      this.state = _STATE2.NONE;
  }
  if (this.state !== _STATE2.NONE) {
    this.dispatchEvent(_startEvent2);
  }
}
function onTouchMove2(event) {
  this._trackPointer(event);
  switch (this.state) {
    case _STATE2.TOUCH_ROTATE:
      if (this.enableRotate === false) return;
      this._handleTouchMoveRotate(event);
      this.update();
      break;
    case _STATE2.TOUCH_PAN:
      if (this.enablePan === false) return;
      this._handleTouchMovePan(event);
      this.update();
      break;
    case _STATE2.TOUCH_DOLLY_PAN:
      if (this.enableZoom === false && this.enablePan === false) return;
      this._handleTouchMoveDollyPan(event);
      this.update();
      break;
    case _STATE2.TOUCH_DOLLY_ROTATE:
      if (this.enableZoom === false && this.enableRotate === false) return;
      this._handleTouchMoveDollyRotate(event);
      this.update();
      break;
    default:
      this.state = _STATE2.NONE;
  }
}
function onContextMenu2(event) {
  if (this.enabled === false) return;
  event.preventDefault();
}
function interceptControlDown(event) {
  if (event.key === "Control") {
    this._controlActive = true;
    const document2 = this.domElement.getRootNode();
    document2.addEventListener("keyup", this._interceptControlUp, { passive: true, capture: true });
  }
}
function interceptControlUp(event) {
  if (event.key === "Control") {
    this._controlActive = false;
    const document2 = this.domElement.getRootNode();
    document2.removeEventListener("keyup", this._interceptControlUp, { passive: true, capture: true });
  }
}

// node_modules/three/examples/jsm/controls/FlyControls.js
var _changeEvent3 = { type: "change" };
var _EPS3 = 1e-6;
var _tmpQuaternion = new Quaternion();
var FlyControls = class extends Controls {
  constructor(object2, domElement = null) {
    super(object2, domElement);
    this.movementSpeed = 1;
    this.rollSpeed = 5e-3;
    this.dragToLook = false;
    this.autoForward = false;
    this._moveState = { up: 0, down: 0, left: 0, right: 0, forward: 0, back: 0, pitchUp: 0, pitchDown: 0, yawLeft: 0, yawRight: 0, rollLeft: 0, rollRight: 0 };
    this._moveVector = new Vector3(0, 0, 0);
    this._rotationVector = new Vector3(0, 0, 0);
    this._lastQuaternion = new Quaternion();
    this._lastPosition = new Vector3();
    this._status = 0;
    this._onKeyDown = onKeyDown3.bind(this);
    this._onKeyUp = onKeyUp2.bind(this);
    this._onPointerMove = onPointerMove3.bind(this);
    this._onPointerDown = onPointerDown3.bind(this);
    this._onPointerUp = onPointerUp3.bind(this);
    this._onPointerCancel = onPointerCancel2.bind(this);
    this._onContextMenu = onContextMenu3.bind(this);
    if (domElement !== null) {
      this.connect();
    }
  }
  connect() {
    window.addEventListener("keydown", this._onKeyDown);
    window.addEventListener("keyup", this._onKeyUp);
    this.domElement.addEventListener("pointermove", this._onPointerMove);
    this.domElement.addEventListener("pointerdown", this._onPointerDown);
    this.domElement.addEventListener("pointerup", this._onPointerUp);
    this.domElement.addEventListener("pointercancel", this._onPointerCancel);
    this.domElement.addEventListener("contextmenu", this._onContextMenu);
  }
  disconnect() {
    window.removeEventListener("keydown", this._onKeyDown);
    window.removeEventListener("keyup", this._onKeyUp);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerdown", this._onPointerDown);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
    this.domElement.removeEventListener("pointercancel", this._onPointerCancel);
    this.domElement.removeEventListener("contextmenu", this._onContextMenu);
  }
  dispose() {
    this.disconnect();
  }
  update(delta) {
    if (this.enabled === false) return;
    const object2 = this.object;
    const moveMult = delta * this.movementSpeed;
    const rotMult = delta * this.rollSpeed;
    object2.translateX(this._moveVector.x * moveMult);
    object2.translateY(this._moveVector.y * moveMult);
    object2.translateZ(this._moveVector.z * moveMult);
    _tmpQuaternion.set(this._rotationVector.x * rotMult, this._rotationVector.y * rotMult, this._rotationVector.z * rotMult, 1).normalize();
    object2.quaternion.multiply(_tmpQuaternion);
    if (this._lastPosition.distanceToSquared(object2.position) > _EPS3 || 8 * (1 - this._lastQuaternion.dot(object2.quaternion)) > _EPS3) {
      this.dispatchEvent(_changeEvent3);
      this._lastQuaternion.copy(object2.quaternion);
      this._lastPosition.copy(object2.position);
    }
  }
  // private
  _updateMovementVector() {
    const forward = this._moveState.forward || this.autoForward && !this._moveState.back ? 1 : 0;
    this._moveVector.x = -this._moveState.left + this._moveState.right;
    this._moveVector.y = -this._moveState.down + this._moveState.up;
    this._moveVector.z = -forward + this._moveState.back;
  }
  _updateRotationVector() {
    this._rotationVector.x = -this._moveState.pitchDown + this._moveState.pitchUp;
    this._rotationVector.y = -this._moveState.yawRight + this._moveState.yawLeft;
    this._rotationVector.z = -this._moveState.rollRight + this._moveState.rollLeft;
  }
  _getContainerDimensions() {
    if (this.domElement != document) {
      return {
        size: [this.domElement.offsetWidth, this.domElement.offsetHeight],
        offset: [this.domElement.offsetLeft, this.domElement.offsetTop]
      };
    } else {
      return {
        size: [window.innerWidth, window.innerHeight],
        offset: [0, 0]
      };
    }
  }
};
function onKeyDown3(event) {
  if (event.altKey || this.enabled === false) {
    return;
  }
  switch (event.code) {
    case "ShiftLeft":
    case "ShiftRight":
      this.movementSpeedMultiplier = 0.1;
      break;
    case "KeyW":
      this._moveState.forward = 1;
      break;
    case "KeyS":
      this._moveState.back = 1;
      break;
    case "KeyA":
      this._moveState.left = 1;
      break;
    case "KeyD":
      this._moveState.right = 1;
      break;
    case "KeyR":
      this._moveState.up = 1;
      break;
    case "KeyF":
      this._moveState.down = 1;
      break;
    case "ArrowUp":
      this._moveState.pitchUp = 1;
      break;
    case "ArrowDown":
      this._moveState.pitchDown = 1;
      break;
    case "ArrowLeft":
      this._moveState.yawLeft = 1;
      break;
    case "ArrowRight":
      this._moveState.yawRight = 1;
      break;
    case "KeyQ":
      this._moveState.rollLeft = 1;
      break;
    case "KeyE":
      this._moveState.rollRight = 1;
      break;
  }
  this._updateMovementVector();
  this._updateRotationVector();
}
function onKeyUp2(event) {
  if (this.enabled === false) return;
  switch (event.code) {
    case "ShiftLeft":
    case "ShiftRight":
      this.movementSpeedMultiplier = 1;
      break;
    case "KeyW":
      this._moveState.forward = 0;
      break;
    case "KeyS":
      this._moveState.back = 0;
      break;
    case "KeyA":
      this._moveState.left = 0;
      break;
    case "KeyD":
      this._moveState.right = 0;
      break;
    case "KeyR":
      this._moveState.up = 0;
      break;
    case "KeyF":
      this._moveState.down = 0;
      break;
    case "ArrowUp":
      this._moveState.pitchUp = 0;
      break;
    case "ArrowDown":
      this._moveState.pitchDown = 0;
      break;
    case "ArrowLeft":
      this._moveState.yawLeft = 0;
      break;
    case "ArrowRight":
      this._moveState.yawRight = 0;
      break;
    case "KeyQ":
      this._moveState.rollLeft = 0;
      break;
    case "KeyE":
      this._moveState.rollRight = 0;
      break;
  }
  this._updateMovementVector();
  this._updateRotationVector();
}
function onPointerDown3(event) {
  if (this.enabled === false) return;
  if (this.dragToLook) {
    this._status++;
  } else {
    switch (event.button) {
      case 0:
        this._moveState.forward = 1;
        break;
      case 2:
        this._moveState.back = 1;
        break;
    }
    this._updateMovementVector();
  }
}
function onPointerMove3(event) {
  if (this.enabled === false) return;
  if (!this.dragToLook || this._status > 0) {
    const container = this._getContainerDimensions();
    const halfWidth = container.size[0] / 2;
    const halfHeight = container.size[1] / 2;
    this._moveState.yawLeft = -(event.pageX - container.offset[0] - halfWidth) / halfWidth;
    this._moveState.pitchDown = (event.pageY - container.offset[1] - halfHeight) / halfHeight;
    this._updateRotationVector();
  }
}
function onPointerUp3(event) {
  if (this.enabled === false) return;
  if (this.dragToLook) {
    this._status--;
    this._moveState.yawLeft = this._moveState.pitchDown = 0;
  } else {
    switch (event.button) {
      case 0:
        this._moveState.forward = 0;
        break;
      case 2:
        this._moveState.back = 0;
        break;
    }
    this._updateMovementVector();
  }
  this._updateRotationVector();
}
function onPointerCancel2() {
  if (this.enabled === false) return;
  if (this.dragToLook) {
    this._status = 0;
    this._moveState.yawLeft = this._moveState.pitchDown = 0;
  } else {
    this._moveState.forward = 0;
    this._moveState.back = 0;
    this._updateMovementVector();
  }
  this._updateRotationVector();
}
function onContextMenu3(event) {
  if (this.enabled === false) return;
  event.preventDefault();
}

// node_modules/three/examples/jsm/shaders/CopyShader.js
var CopyShader = {
  name: "CopyShader",
  uniforms: {
    "tDiffuse": { value: null },
    "opacity": { value: 1 }
  },
  vertexShader: (
    /* glsl */
    `

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`
  ),
  fragmentShader: (
    /* glsl */
    `

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`
  )
};

// node_modules/three/examples/jsm/postprocessing/Pass.js
var Pass = class {
  constructor() {
    this.isPass = true;
    this.enabled = true;
    this.needsSwap = true;
    this.clear = false;
    this.renderToScreen = false;
  }
  setSize() {
  }
  render() {
    console.error("THREE.Pass: .render() must be implemented in derived pass.");
  }
  dispose() {
  }
};
var _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);
var FullscreenTriangleGeometry = class extends BufferGeometry {
  constructor() {
    super();
    this.setAttribute("position", new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));
    this.setAttribute("uv", new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));
  }
};
var _geometry = new FullscreenTriangleGeometry();
var FullScreenQuad = class {
  constructor(material) {
    this._mesh = new Mesh(_geometry, material);
  }
  dispose() {
    this._mesh.geometry.dispose();
  }
  render(renderer3) {
    renderer3.render(this._mesh, _camera);
  }
  get material() {
    return this._mesh.material;
  }
  set material(value) {
    this._mesh.material = value;
  }
};

// node_modules/three/examples/jsm/postprocessing/ShaderPass.js
var ShaderPass = class extends Pass {
  constructor(shader, textureID) {
    super();
    this.textureID = textureID !== void 0 ? textureID : "tDiffuse";
    if (shader instanceof ShaderMaterial) {
      this.uniforms = shader.uniforms;
      this.material = shader;
    } else if (shader) {
      this.uniforms = UniformsUtils.clone(shader.uniforms);
      this.material = new ShaderMaterial({
        name: shader.name !== void 0 ? shader.name : "unspecified",
        defines: Object.assign({}, shader.defines),
        uniforms: this.uniforms,
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader
      });
    }
    this.fsQuad = new FullScreenQuad(this.material);
  }
  render(renderer3, writeBuffer, readBuffer) {
    if (this.uniforms[this.textureID]) {
      this.uniforms[this.textureID].value = readBuffer.texture;
    }
    this.fsQuad.material = this.material;
    if (this.renderToScreen) {
      renderer3.setRenderTarget(null);
      this.fsQuad.render(renderer3);
    } else {
      renderer3.setRenderTarget(writeBuffer);
      if (this.clear) renderer3.clear(renderer3.autoClearColor, renderer3.autoClearDepth, renderer3.autoClearStencil);
      this.fsQuad.render(renderer3);
    }
  }
  dispose() {
    this.material.dispose();
    this.fsQuad.dispose();
  }
};

// node_modules/three/examples/jsm/postprocessing/MaskPass.js
var MaskPass = class extends Pass {
  constructor(scene3, camera3) {
    super();
    this.scene = scene3;
    this.camera = camera3;
    this.clear = true;
    this.needsSwap = false;
    this.inverse = false;
  }
  render(renderer3, writeBuffer, readBuffer) {
    const context = renderer3.getContext();
    const state = renderer3.state;
    state.buffers.color.setMask(false);
    state.buffers.depth.setMask(false);
    state.buffers.color.setLocked(true);
    state.buffers.depth.setLocked(true);
    let writeValue, clearValue;
    if (this.inverse) {
      writeValue = 0;
      clearValue = 1;
    } else {
      writeValue = 1;
      clearValue = 0;
    }
    state.buffers.stencil.setTest(true);
    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);
    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 4294967295);
    state.buffers.stencil.setClear(clearValue);
    state.buffers.stencil.setLocked(true);
    renderer3.setRenderTarget(readBuffer);
    if (this.clear) renderer3.clear();
    renderer3.render(this.scene, this.camera);
    renderer3.setRenderTarget(writeBuffer);
    if (this.clear) renderer3.clear();
    renderer3.render(this.scene, this.camera);
    state.buffers.color.setLocked(false);
    state.buffers.depth.setLocked(false);
    state.buffers.color.setMask(true);
    state.buffers.depth.setMask(true);
    state.buffers.stencil.setLocked(false);
    state.buffers.stencil.setFunc(context.EQUAL, 1, 4294967295);
    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);
    state.buffers.stencil.setLocked(true);
  }
};
var ClearMaskPass = class extends Pass {
  constructor() {
    super();
    this.needsSwap = false;
  }
  render(renderer3) {
    renderer3.state.buffers.stencil.setLocked(false);
    renderer3.state.buffers.stencil.setTest(false);
  }
};

// node_modules/three/examples/jsm/postprocessing/EffectComposer.js
var EffectComposer = class {
  constructor(renderer3, renderTarget) {
    this.renderer = renderer3;
    this._pixelRatio = renderer3.getPixelRatio();
    if (renderTarget === void 0) {
      const size = renderer3.getSize(new Vector2());
      this._width = size.width;
      this._height = size.height;
      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType });
      renderTarget.texture.name = "EffectComposer.rt1";
    } else {
      this._width = renderTarget.width;
      this._height = renderTarget.height;
    }
    this.renderTarget1 = renderTarget;
    this.renderTarget2 = renderTarget.clone();
    this.renderTarget2.texture.name = "EffectComposer.rt2";
    this.writeBuffer = this.renderTarget1;
    this.readBuffer = this.renderTarget2;
    this.renderToScreen = true;
    this.passes = [];
    this.copyPass = new ShaderPass(CopyShader);
    this.copyPass.material.blending = NoBlending;
    this.clock = new Clock();
  }
  swapBuffers() {
    const tmp = this.readBuffer;
    this.readBuffer = this.writeBuffer;
    this.writeBuffer = tmp;
  }
  addPass(pass) {
    this.passes.push(pass);
    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
  }
  insertPass(pass, index5) {
    this.passes.splice(index5, 0, pass);
    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
  }
  removePass(pass) {
    const index5 = this.passes.indexOf(pass);
    if (index5 !== -1) {
      this.passes.splice(index5, 1);
    }
  }
  isLastEnabledPass(passIndex) {
    for (let i = passIndex + 1; i < this.passes.length; i++) {
      if (this.passes[i].enabled) {
        return false;
      }
    }
    return true;
  }
  render(deltaTime) {
    if (deltaTime === void 0) {
      deltaTime = this.clock.getDelta();
    }
    const currentRenderTarget = this.renderer.getRenderTarget();
    let maskActive = false;
    for (let i = 0, il = this.passes.length; i < il; i++) {
      const pass = this.passes[i];
      if (pass.enabled === false) continue;
      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);
      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);
      if (pass.needsSwap) {
        if (maskActive) {
          const context = this.renderer.getContext();
          const stencil = this.renderer.state.buffers.stencil;
          stencil.setFunc(context.NOTEQUAL, 1, 4294967295);
          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);
          stencil.setFunc(context.EQUAL, 1, 4294967295);
        }
        this.swapBuffers();
      }
      if (MaskPass !== void 0) {
        if (pass instanceof MaskPass) {
          maskActive = true;
        } else if (pass instanceof ClearMaskPass) {
          maskActive = false;
        }
      }
    }
    this.renderer.setRenderTarget(currentRenderTarget);
  }
  reset(renderTarget) {
    if (renderTarget === void 0) {
      const size = this.renderer.getSize(new Vector2());
      this._pixelRatio = this.renderer.getPixelRatio();
      this._width = size.width;
      this._height = size.height;
      renderTarget = this.renderTarget1.clone();
      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
    }
    this.renderTarget1.dispose();
    this.renderTarget2.dispose();
    this.renderTarget1 = renderTarget;
    this.renderTarget2 = renderTarget.clone();
    this.writeBuffer = this.renderTarget1;
    this.readBuffer = this.renderTarget2;
  }
  setSize(width, height) {
    this._width = width;
    this._height = height;
    const effectiveWidth = this._width * this._pixelRatio;
    const effectiveHeight = this._height * this._pixelRatio;
    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);
    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);
    for (let i = 0; i < this.passes.length; i++) {
      this.passes[i].setSize(effectiveWidth, effectiveHeight);
    }
  }
  setPixelRatio(pixelRatio) {
    this._pixelRatio = pixelRatio;
    this.setSize(this._width, this._height);
  }
  dispose() {
    this.renderTarget1.dispose();
    this.renderTarget2.dispose();
    this.copyPass.dispose();
  }
};

// node_modules/three/examples/jsm/postprocessing/RenderPass.js
var RenderPass = class extends Pass {
  constructor(scene3, camera3, overrideMaterial = null, clearColor = null, clearAlpha = null) {
    super();
    this.scene = scene3;
    this.camera = camera3;
    this.overrideMaterial = overrideMaterial;
    this.clearColor = clearColor;
    this.clearAlpha = clearAlpha;
    this.clear = true;
    this.clearDepth = false;
    this.needsSwap = false;
    this._oldClearColor = new Color();
  }
  render(renderer3, writeBuffer, readBuffer) {
    const oldAutoClear = renderer3.autoClear;
    renderer3.autoClear = false;
    let oldClearAlpha, oldOverrideMaterial;
    if (this.overrideMaterial !== null) {
      oldOverrideMaterial = this.scene.overrideMaterial;
      this.scene.overrideMaterial = this.overrideMaterial;
    }
    if (this.clearColor !== null) {
      renderer3.getClearColor(this._oldClearColor);
      renderer3.setClearColor(this.clearColor, renderer3.getClearAlpha());
    }
    if (this.clearAlpha !== null) {
      oldClearAlpha = renderer3.getClearAlpha();
      renderer3.setClearAlpha(this.clearAlpha);
    }
    if (this.clearDepth == true) {
      renderer3.clearDepth();
    }
    renderer3.setRenderTarget(this.renderToScreen ? null : readBuffer);
    if (this.clear === true) {
      renderer3.clear(renderer3.autoClearColor, renderer3.autoClearDepth, renderer3.autoClearStencil);
    }
    renderer3.render(this.scene, this.camera);
    if (this.clearColor !== null) {
      renderer3.setClearColor(this._oldClearColor);
    }
    if (this.clearAlpha !== null) {
      renderer3.setClearAlpha(oldClearAlpha);
    }
    if (this.overrideMaterial !== null) {
      this.scene.overrideMaterial = oldOverrideMaterial;
    }
    renderer3.autoClear = oldAutoClear;
  }
};

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized4(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf4(t, e) {
  return _setPrototypeOf4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e3) {
    return t4.__proto__ = e3, t4;
  }, _setPrototypeOf4(t, e);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf4(t, o);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf4(t) {
  return _getPrototypeOf4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
    return t4.__proto__ || Object.getPrototypeOf(t4);
  }, _getPrototypeOf4(t);
}

// node_modules/@babel/runtime/helpers/esm/isNativeFunction.js
function _isNativeFunction(t) {
  try {
    return -1 !== Function.toString.call(t).indexOf("[native code]");
  } catch (n) {
    return "function" == typeof t;
  }
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct4() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t4) {
  }
  return (_isNativeReflectConstruct4 = function _isNativeReflectConstruct5() {
    return !!t;
  })();
}

// node_modules/@babel/runtime/helpers/esm/construct.js
function _construct2(t, e, r) {
  if (_isNativeReflectConstruct4()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf4(p, r.prototype), p;
}

// node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js
function _wrapNativeSuper(t) {
  var r = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
  return _wrapNativeSuper = function _wrapNativeSuper2(t4) {
    if (null === t4 || !_isNativeFunction(t4)) return t4;
    if ("function" != typeof t4) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r) {
      if (r.has(t4)) return r.get(t4);
      r.set(t4, Wrapper);
    }
    function Wrapper() {
      return _construct2(t4, arguments, _getPrototypeOf4(this).constructor);
    }
    return Wrapper.prototype = Object.create(t4.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    }), _setPrototypeOf4(Wrapper, t4);
  }, _wrapNativeSuper(t);
}

// node_modules/polished/dist/polished.esm.js
var ERRORS = {
  "1": "Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\n\n",
  "2": "Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\n\n",
  "3": "Passed an incorrect argument to a color function, please pass a string representation of a color.\n\n",
  "4": "Couldn't generate valid rgb string from %s, it returned %s.\n\n",
  "5": "Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\n\n",
  "6": "Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\n\n",
  "7": "Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\n\n",
  "8": "Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\n\n",
  "9": "Please provide a number of steps to the modularScale helper.\n\n",
  "10": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
  "11": 'Invalid value passed as base to modularScale, expected number or em string but got "%s"\n\n',
  "12": 'Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.\n\n',
  "13": 'Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.\n\n',
  "14": 'Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',
  "15": 'Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',
  "16": "You must provide a template to this method.\n\n",
  "17": "You passed an unsupported selector state to this method.\n\n",
  "18": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
  "19": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
  "20": "expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
  "21": "expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  "22": "expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  "23": "fontFace expects a name of a font-family.\n\n",
  "24": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
  "25": "fontFace expects localFonts to be an array.\n\n",
  "26": "fontFace expects fileFormats to be an array.\n\n",
  "27": "radialGradient requries at least 2 color-stops to properly render.\n\n",
  "28": "Please supply a filename to retinaImage() as the first argument.\n\n",
  "29": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
  "30": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  "31": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\n\n",
  "32": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\n\n",
  "33": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\n\n",
  "34": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
  "35": 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',
  "36": "Property must be a string value.\n\n",
  "37": "Syntax Error at %s.\n\n",
  "38": "Formula contains a function that needs parentheses at %s.\n\n",
  "39": "Formula is missing closing parenthesis at %s.\n\n",
  "40": "Formula has too many closing parentheses at %s.\n\n",
  "41": "All values in a formula must have the same unit or be unitless.\n\n",
  "42": "Please provide a number of steps to the modularScale helper.\n\n",
  "43": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
  "44": "Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\n\n",
  "45": "Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\n\n",
  "46": "Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\n\n",
  "47": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
  "48": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
  "49": "Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
  "50": "Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\n\n",
  "51": "Expects the first argument object to have the properties prop, fromSize, and toSize.\n\n",
  "52": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
  "53": "fontFace expects localFonts to be an array.\n\n",
  "54": "fontFace expects fileFormats to be an array.\n\n",
  "55": "fontFace expects a name of a font-family.\n\n",
  "56": "linearGradient requries at least 2 color-stops to properly render.\n\n",
  "57": "radialGradient requries at least 2 color-stops to properly render.\n\n",
  "58": "Please supply a filename to retinaImage() as the first argument.\n\n",
  "59": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
  "60": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  "61": "Property must be a string value.\n\n",
  "62": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
  "63": 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',
  "64": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\n\n",
  "65": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\n\n",
  "66": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\n\n",
  "67": "You must provide a template to this method.\n\n",
  "68": "You passed an unsupported selector state to this method.\n\n",
  "69": 'Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.\n\n',
  "70": 'Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.\n\n',
  "71": 'Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.\n\n',
  "72": 'Passed invalid base value %s to %s(), please pass a value like "12px" or 12.\n\n',
  "73": "Please provide a valid CSS variable.\n\n",
  "74": "CSS variable not found and no default was provided.\n\n",
  "75": "important requires a valid style object, got a %s instead.\n\n",
  "76": "fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.\n\n",
  "77": 'remToPx expects a value in "rem" but you provided it in "%s".\n\n',
  "78": 'base must be set in "px" or "%" but you set it in "%s".\n'
};
function format2() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var a = args[0];
  var b = [];
  var c3;
  for (c3 = 1; c3 < args.length; c3 += 1) {
    b.push(args[c3]);
  }
  b.forEach(function(d) {
    a = a.replace(/%[a-z]/, d);
  });
  return a;
}
var PolishedError = function(_Error) {
  _inheritsLoose(PolishedError2, _Error);
  function PolishedError2(code) {
    var _this;
    if (false) {
      _this = _Error.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + code + " for more information.") || this;
    } else {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      _this = _Error.call(this, format2.apply(void 0, [ERRORS[code]].concat(args))) || this;
    }
    return _assertThisInitialized4(_this);
  }
  return PolishedError2;
}(_wrapNativeSuper(Error));
function endsWith(string, suffix) {
  return string.substr(-suffix.length) === suffix;
}
var cssRegex$1 = /^([+-]?(?:\d+|\d*\.\d+))([a-z]*|%)$/;
function stripUnit(value) {
  if (typeof value !== "string") return value;
  var matchedValue = value.match(cssRegex$1);
  return matchedValue ? parseFloat(value) : value;
}
var pxtoFactory = function pxtoFactory2(to) {
  return function(pxval, base) {
    if (base === void 0) {
      base = "16px";
    }
    var newPxval = pxval;
    var newBase = base;
    if (typeof pxval === "string") {
      if (!endsWith(pxval, "px")) {
        throw new PolishedError(69, to, pxval);
      }
      newPxval = stripUnit(pxval);
    }
    if (typeof base === "string") {
      if (!endsWith(base, "px")) {
        throw new PolishedError(70, to, base);
      }
      newBase = stripUnit(base);
    }
    if (typeof newPxval === "string") {
      throw new PolishedError(71, pxval, to);
    }
    if (typeof newBase === "string") {
      throw new PolishedError(72, base, to);
    }
    return "" + newPxval / newBase + to;
  };
};
var pixelsto = pxtoFactory;
var em = pixelsto("em");
var rem = pixelsto("rem");
function colorToInt(color2) {
  return Math.round(color2 * 255);
}
function convertToInt(red, green, blue) {
  return colorToInt(red) + "," + colorToInt(green) + "," + colorToInt(blue);
}
function hslToRgb2(hue2, saturation, lightness, convert) {
  if (convert === void 0) {
    convert = convertToInt;
  }
  if (saturation === 0) {
    return convert(lightness, lightness, lightness);
  }
  var huePrime = (hue2 % 360 + 360) % 360 / 60;
  var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
  var red = 0;
  var green = 0;
  var blue = 0;
  if (huePrime >= 0 && huePrime < 1) {
    red = chroma;
    green = secondComponent;
  } else if (huePrime >= 1 && huePrime < 2) {
    red = secondComponent;
    green = chroma;
  } else if (huePrime >= 2 && huePrime < 3) {
    green = chroma;
    blue = secondComponent;
  } else if (huePrime >= 3 && huePrime < 4) {
    green = secondComponent;
    blue = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    red = secondComponent;
    blue = chroma;
  } else if (huePrime >= 5 && huePrime < 6) {
    red = chroma;
    blue = secondComponent;
  }
  var lightnessModification = lightness - chroma / 2;
  var finalRed = red + lightnessModification;
  var finalGreen = green + lightnessModification;
  var finalBlue = blue + lightnessModification;
  return convert(finalRed, finalGreen, finalBlue);
}
var namedColorMap = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "00ffff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "0000ff",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "00ffff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "ff00ff",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "639",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
function nameToHex(color2) {
  if (typeof color2 !== "string") return color2;
  var normalizedColorName = color2.toLowerCase();
  return namedColorMap[normalizedColorName] ? "#" + namedColorMap[normalizedColorName] : color2;
}
var hexRegex = /^#[a-fA-F0-9]{6}$/;
var hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;
var reducedHexRegex = /^#[a-fA-F0-9]{3}$/;
var reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;
var rgbRegex = /^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i;
var rgbaRegex = /^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
var hslRegex = /^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
var hslaRegex = /^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
function parseToRgb(color2) {
  if (typeof color2 !== "string") {
    throw new PolishedError(3);
  }
  var normalizedColor = nameToHex(color2);
  if (normalizedColor.match(hexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16)
    };
  }
  if (normalizedColor.match(hexRgbaRegex)) {
    var alpha = parseFloat((parseInt("" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16),
      alpha
    };
  }
  if (normalizedColor.match(reducedHexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16)
    };
  }
  if (normalizedColor.match(reducedRgbaHexRegex)) {
    var _alpha = parseFloat((parseInt("" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16),
      alpha: _alpha
    };
  }
  var rgbMatched = rgbRegex.exec(normalizedColor);
  if (rgbMatched) {
    return {
      red: parseInt("" + rgbMatched[1], 10),
      green: parseInt("" + rgbMatched[2], 10),
      blue: parseInt("" + rgbMatched[3], 10)
    };
  }
  var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));
  if (rgbaMatched) {
    return {
      red: parseInt("" + rgbaMatched[1], 10),
      green: parseInt("" + rgbaMatched[2], 10),
      blue: parseInt("" + rgbaMatched[3], 10),
      alpha: parseFloat("" + rgbaMatched[4]) > 1 ? parseFloat("" + rgbaMatched[4]) / 100 : parseFloat("" + rgbaMatched[4])
    };
  }
  var hslMatched = hslRegex.exec(normalizedColor);
  if (hslMatched) {
    var hue2 = parseInt("" + hslMatched[1], 10);
    var saturation = parseInt("" + hslMatched[2], 10) / 100;
    var lightness = parseInt("" + hslMatched[3], 10) / 100;
    var rgbColorString = "rgb(" + hslToRgb2(hue2, saturation, lightness) + ")";
    var hslRgbMatched = rgbRegex.exec(rgbColorString);
    if (!hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, rgbColorString);
    }
    return {
      red: parseInt("" + hslRgbMatched[1], 10),
      green: parseInt("" + hslRgbMatched[2], 10),
      blue: parseInt("" + hslRgbMatched[3], 10)
    };
  }
  var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));
  if (hslaMatched) {
    var _hue = parseInt("" + hslaMatched[1], 10);
    var _saturation = parseInt("" + hslaMatched[2], 10) / 100;
    var _lightness = parseInt("" + hslaMatched[3], 10) / 100;
    var _rgbColorString = "rgb(" + hslToRgb2(_hue, _saturation, _lightness) + ")";
    var _hslRgbMatched = rgbRegex.exec(_rgbColorString);
    if (!_hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, _rgbColorString);
    }
    return {
      red: parseInt("" + _hslRgbMatched[1], 10),
      green: parseInt("" + _hslRgbMatched[2], 10),
      blue: parseInt("" + _hslRgbMatched[3], 10),
      alpha: parseFloat("" + hslaMatched[4]) > 1 ? parseFloat("" + hslaMatched[4]) / 100 : parseFloat("" + hslaMatched[4])
    };
  }
  throw new PolishedError(5);
}
function rgbToHsl2(color2) {
  var red = color2.red / 255;
  var green = color2.green / 255;
  var blue = color2.blue / 255;
  var max3 = Math.max(red, green, blue);
  var min3 = Math.min(red, green, blue);
  var lightness = (max3 + min3) / 2;
  if (max3 === min3) {
    if (color2.alpha !== void 0) {
      return {
        hue: 0,
        saturation: 0,
        lightness,
        alpha: color2.alpha
      };
    } else {
      return {
        hue: 0,
        saturation: 0,
        lightness
      };
    }
  }
  var hue2;
  var delta = max3 - min3;
  var saturation = lightness > 0.5 ? delta / (2 - max3 - min3) : delta / (max3 + min3);
  switch (max3) {
    case red:
      hue2 = (green - blue) / delta + (green < blue ? 6 : 0);
      break;
    case green:
      hue2 = (blue - red) / delta + 2;
      break;
    default:
      hue2 = (red - green) / delta + 4;
      break;
  }
  hue2 *= 60;
  if (color2.alpha !== void 0) {
    return {
      hue: hue2,
      saturation,
      lightness,
      alpha: color2.alpha
    };
  }
  return {
    hue: hue2,
    saturation,
    lightness
  };
}
function parseToHsl(color2) {
  return rgbToHsl2(parseToRgb(color2));
}
var reduceHexValue = function reduceHexValue2(value) {
  if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {
    return "#" + value[1] + value[3] + value[5];
  }
  return value;
};
var reduceHexValue$1 = reduceHexValue;
function numberToHex(value) {
  var hex2 = value.toString(16);
  return hex2.length === 1 ? "0" + hex2 : hex2;
}
function colorToHex(color2) {
  return numberToHex(Math.round(color2 * 255));
}
function convertToHex(red, green, blue) {
  return reduceHexValue$1("#" + colorToHex(red) + colorToHex(green) + colorToHex(blue));
}
function hslToHex(hue2, saturation, lightness) {
  return hslToRgb2(hue2, saturation, lightness, convertToHex);
}
function hsl3(value, saturation, lightness) {
  if (typeof value === "number" && typeof saturation === "number" && typeof lightness === "number") {
    return hslToHex(value, saturation, lightness);
  } else if (typeof value === "object" && saturation === void 0 && lightness === void 0) {
    return hslToHex(value.hue, value.saturation, value.lightness);
  }
  throw new PolishedError(1);
}
function hsla2(value, saturation, lightness, alpha) {
  if (typeof value === "number" && typeof saturation === "number" && typeof lightness === "number" && typeof alpha === "number") {
    return alpha >= 1 ? hslToHex(value, saturation, lightness) : "rgba(" + hslToRgb2(value, saturation, lightness) + "," + alpha + ")";
  } else if (typeof value === "object" && saturation === void 0 && lightness === void 0 && alpha === void 0) {
    return value.alpha >= 1 ? hslToHex(value.hue, value.saturation, value.lightness) : "rgba(" + hslToRgb2(value.hue, value.saturation, value.lightness) + "," + value.alpha + ")";
  }
  throw new PolishedError(2);
}
function rgb2(value, green, blue) {
  if (typeof value === "number" && typeof green === "number" && typeof blue === "number") {
    return reduceHexValue$1("#" + numberToHex(value) + numberToHex(green) + numberToHex(blue));
  } else if (typeof value === "object" && green === void 0 && blue === void 0) {
    return reduceHexValue$1("#" + numberToHex(value.red) + numberToHex(value.green) + numberToHex(value.blue));
  }
  throw new PolishedError(6);
}
function rgba2(firstValue, secondValue, thirdValue, fourthValue) {
  if (typeof firstValue === "string" && typeof secondValue === "number") {
    var rgbValue = parseToRgb(firstValue);
    return "rgba(" + rgbValue.red + "," + rgbValue.green + "," + rgbValue.blue + "," + secondValue + ")";
  } else if (typeof firstValue === "number" && typeof secondValue === "number" && typeof thirdValue === "number" && typeof fourthValue === "number") {
    return fourthValue >= 1 ? rgb2(firstValue, secondValue, thirdValue) : "rgba(" + firstValue + "," + secondValue + "," + thirdValue + "," + fourthValue + ")";
  } else if (typeof firstValue === "object" && secondValue === void 0 && thirdValue === void 0 && fourthValue === void 0) {
    return firstValue.alpha >= 1 ? rgb2(firstValue.red, firstValue.green, firstValue.blue) : "rgba(" + firstValue.red + "," + firstValue.green + "," + firstValue.blue + "," + firstValue.alpha + ")";
  }
  throw new PolishedError(7);
}
var isRgb = function isRgb2(color2) {
  return typeof color2.red === "number" && typeof color2.green === "number" && typeof color2.blue === "number" && (typeof color2.alpha !== "number" || typeof color2.alpha === "undefined");
};
var isRgba = function isRgba2(color2) {
  return typeof color2.red === "number" && typeof color2.green === "number" && typeof color2.blue === "number" && typeof color2.alpha === "number";
};
var isHsl = function isHsl2(color2) {
  return typeof color2.hue === "number" && typeof color2.saturation === "number" && typeof color2.lightness === "number" && (typeof color2.alpha !== "number" || typeof color2.alpha === "undefined");
};
var isHsla = function isHsla2(color2) {
  return typeof color2.hue === "number" && typeof color2.saturation === "number" && typeof color2.lightness === "number" && typeof color2.alpha === "number";
};
function toColorString(color2) {
  if (typeof color2 !== "object") throw new PolishedError(8);
  if (isRgba(color2)) return rgba2(color2);
  if (isRgb(color2)) return rgb2(color2);
  if (isHsla(color2)) return hsla2(color2);
  if (isHsl(color2)) return hsl3(color2);
  throw new PolishedError(8);
}
function curried(f, length, acc) {
  return function fn() {
    var combined = acc.concat(Array.prototype.slice.call(arguments));
    return combined.length >= length ? f.apply(this, combined) : curried(f, length, combined);
  };
}
function curry(f) {
  return curried(f, f.length, []);
}
function adjustHue(degree, color2) {
  if (color2 === "transparent") return color2;
  var hslColor = parseToHsl(color2);
  return toColorString(_extends({}, hslColor, {
    hue: hslColor.hue + parseFloat(degree)
  }));
}
var curriedAdjustHue = curry(adjustHue);
function guard(lowerBoundary, upperBoundary, value) {
  return Math.max(lowerBoundary, Math.min(upperBoundary, value));
}
function darken2(amount, color2) {
  if (color2 === "transparent") return color2;
  var hslColor = parseToHsl(color2);
  return toColorString(_extends({}, hslColor, {
    lightness: guard(0, 1, hslColor.lightness - parseFloat(amount))
  }));
}
var curriedDarken = curry(darken2);
function desaturate2(amount, color2) {
  if (color2 === "transparent") return color2;
  var hslColor = parseToHsl(color2);
  return toColorString(_extends({}, hslColor, {
    saturation: guard(0, 1, hslColor.saturation - parseFloat(amount))
  }));
}
var curriedDesaturate = curry(desaturate2);
function lighten2(amount, color2) {
  if (color2 === "transparent") return color2;
  var hslColor = parseToHsl(color2);
  return toColorString(_extends({}, hslColor, {
    lightness: guard(0, 1, hslColor.lightness + parseFloat(amount))
  }));
}
var curriedLighten = curry(lighten2);
function mix(weight, color2, otherColor) {
  if (color2 === "transparent") return otherColor;
  if (otherColor === "transparent") return color2;
  if (weight === 0) return otherColor;
  var parsedColor1 = parseToRgb(color2);
  var color1 = _extends({}, parsedColor1, {
    alpha: typeof parsedColor1.alpha === "number" ? parsedColor1.alpha : 1
  });
  var parsedColor2 = parseToRgb(otherColor);
  var color22 = _extends({}, parsedColor2, {
    alpha: typeof parsedColor2.alpha === "number" ? parsedColor2.alpha : 1
  });
  var alphaDelta = color1.alpha - color22.alpha;
  var x = parseFloat(weight) * 2 - 1;
  var y = x * alphaDelta === -1 ? x : x + alphaDelta;
  var z = 1 + x * alphaDelta;
  var weight1 = (y / z + 1) / 2;
  var weight2 = 1 - weight1;
  var mixedColor = {
    red: Math.floor(color1.red * weight1 + color22.red * weight2),
    green: Math.floor(color1.green * weight1 + color22.green * weight2),
    blue: Math.floor(color1.blue * weight1 + color22.blue * weight2),
    alpha: color1.alpha * parseFloat(weight) + color22.alpha * (1 - parseFloat(weight))
  };
  return rgba2(mixedColor);
}
var curriedMix = curry(mix);
var mix$1 = curriedMix;
function opacify(amount, color2) {
  if (color2 === "transparent") return color2;
  var parsedColor = parseToRgb(color2);
  var alpha = typeof parsedColor.alpha === "number" ? parsedColor.alpha : 1;
  var colorWithAlpha = _extends({}, parsedColor, {
    alpha: guard(0, 1, (alpha * 100 + parseFloat(amount) * 100) / 100)
  });
  return rgba2(colorWithAlpha);
}
var curriedOpacify = curry(opacify);
var curriedOpacify$1 = curriedOpacify;
function saturate2(amount, color2) {
  if (color2 === "transparent") return color2;
  var hslColor = parseToHsl(color2);
  return toColorString(_extends({}, hslColor, {
    saturation: guard(0, 1, hslColor.saturation + parseFloat(amount))
  }));
}
var curriedSaturate = curry(saturate2);
function setHue(hue2, color2) {
  if (color2 === "transparent") return color2;
  return toColorString(_extends({}, parseToHsl(color2), {
    hue: parseFloat(hue2)
  }));
}
var curriedSetHue = curry(setHue);
function setLightness(lightness, color2) {
  if (color2 === "transparent") return color2;
  return toColorString(_extends({}, parseToHsl(color2), {
    lightness: parseFloat(lightness)
  }));
}
var curriedSetLightness = curry(setLightness);
function setSaturation(saturation, color2) {
  if (color2 === "transparent") return color2;
  return toColorString(_extends({}, parseToHsl(color2), {
    saturation: parseFloat(saturation)
  }));
}
var curriedSetSaturation = curry(setSaturation);
function shade(percentage, color2) {
  if (color2 === "transparent") return color2;
  return mix$1(parseFloat(percentage), "rgb(0, 0, 0)", color2);
}
var curriedShade = curry(shade);
function tint(percentage, color2) {
  if (color2 === "transparent") return color2;
  return mix$1(parseFloat(percentage), "rgb(255, 255, 255)", color2);
}
var curriedTint = curry(tint);
function transparentize(amount, color2) {
  if (color2 === "transparent") return color2;
  var parsedColor = parseToRgb(color2);
  var alpha = typeof parsedColor.alpha === "number" ? parsedColor.alpha : 1;
  var colorWithAlpha = _extends({}, parsedColor, {
    alpha: guard(0, 1, +(alpha * 100 - parseFloat(amount) * 100).toFixed(2) / 100)
  });
  return rgba2(colorWithAlpha);
}
var curriedTransparentize = curry(transparentize);

// node_modules/three-render-objects/dist/three-render-objects.mjs
function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;
  if (typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z = ".scene-nav-info {\n  bottom: 5px;\n  width: 100%;\n  text-align: center;\n  color: slategrey;\n  opacity: 0.7;\n  font-size: 10px;\n}\n\n.scene-tooltip {\n  top: 0;\n  color: lavender;\n  font-size: 15px;\n}\n\n.scene-nav-info, .scene-tooltip {\n  position: absolute;\n  font-family: sans-serif;\n  pointer-events: none;\n  user-select: none;\n}\n\n.scene-container canvas:focus {\n  outline: none;\n}";
styleInject(css_248z);
function _arrayLikeToArray7(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithHoles7(r) {
  if (Array.isArray(r)) return r;
}
function _arrayWithoutHoles5(r) {
  if (Array.isArray(r)) return _arrayLikeToArray7(r);
}
function _defineProperty3(e, r, t) {
  return (r = _toPropertyKey4(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}
function _iterableToArray5(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _iterableToArrayLimit7(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u4, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) ;
      else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t.return && (u4 = t.return(), Object(u4) !== u4)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest7() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray7(r, e) {
  return _arrayWithHoles7(r) || _iterableToArrayLimit7(r, e) || _unsupportedIterableToArray7(r, e) || _nonIterableRest7();
}
function _toConsumableArray5(r) {
  return _arrayWithoutHoles5(r) || _iterableToArray5(r) || _unsupportedIterableToArray7(r) || _nonIterableSpread5();
}
function _toPrimitive4(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey4(t) {
  var i = _toPrimitive4(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _unsupportedIterableToArray7(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray7(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray7(r, a) : void 0;
  }
}
var three2 = window.THREE ? window.THREE : {
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  Raycaster,
  SRGBColorSpace,
  TextureLoader,
  Vector2,
  Vector3,
  Box3,
  Color,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  BackSide,
  EventDispatcher,
  MOUSE,
  Quaternion,
  Spherical,
  Clock
};
var threeRenderObjects = index({
  props: {
    width: {
      "default": window.innerWidth,
      onChange: function onChange7(width, state, prevWidth) {
        isNaN(width) && (state.width = prevWidth);
      }
    },
    height: {
      "default": window.innerHeight,
      onChange: function onChange8(height, state, prevHeight) {
        isNaN(height) && (state.height = prevHeight);
      }
    },
    backgroundColor: {
      "default": "#000011"
    },
    backgroundImageUrl: {},
    onBackgroundImageLoaded: {},
    showNavInfo: {
      "default": true
    },
    skyRadius: {
      "default": 5e4
    },
    objects: {
      "default": []
    },
    lights: {
      "default": []
    },
    enablePointerInteraction: {
      "default": true,
      onChange: function onChange9(_, state) {
        state.hoverObj = null;
        if (state.toolTipElem) state.toolTipElem.innerHTML = "";
      },
      triggerUpdate: false
    },
    lineHoverPrecision: {
      "default": 1,
      triggerUpdate: false
    },
    hoverOrderComparator: {
      "default": function _default22() {
        return -1;
      },
      triggerUpdate: false
    },
    // keep existing order by default
    hoverFilter: {
      "default": function _default23() {
        return true;
      },
      triggerUpdate: false
    },
    // exclude objects from interaction
    tooltipContent: {
      triggerUpdate: false
    },
    hoverDuringDrag: {
      "default": false,
      triggerUpdate: false
    },
    clickAfterDrag: {
      "default": false,
      triggerUpdate: false
    },
    onHover: {
      "default": function _default24() {
      },
      triggerUpdate: false
    },
    onClick: {
      "default": function _default25() {
      },
      triggerUpdate: false
    },
    onRightClick: {
      triggerUpdate: false
    }
  },
  methods: {
    tick: function tick(state) {
      if (state.initialised) {
        state.controls.update && state.controls.update(Math.min(1, state.clock.getDelta()));
        state.postProcessingComposer ? state.postProcessingComposer.render() : state.renderer.render(state.scene, state.camera);
        state.extraRenderers.forEach(function(r) {
          return r.render(state.scene, state.camera);
        });
        if (state.enablePointerInteraction) {
          var topObject = null;
          if (state.hoverDuringDrag || !state.isPointerDragging) {
            var intersects2 = this.intersectingObjects(state.pointerPos.x, state.pointerPos.y).filter(function(d) {
              return state.hoverFilter(d.object);
            }).sort(function(a, b) {
              return state.hoverOrderComparator(a.object, b.object);
            });
            var topIntersect = intersects2.length ? intersects2[0] : null;
            topObject = topIntersect ? topIntersect.object : null;
            state.intersectionPoint = topIntersect ? topIntersect.point : null;
          }
          if (topObject !== state.hoverObj) {
            state.onHover(topObject, state.hoverObj);
            state.toolTipElem.innerHTML = topObject ? index3(state.tooltipContent)(topObject) || "" : "";
            state.hoverObj = topObject;
          }
        }
        state.tweenGroup.update();
      }
      return this;
    },
    getPointerPos: function getPointerPos(state) {
      var _state$pointerPos = state.pointerPos, x = _state$pointerPos.x, y = _state$pointerPos.y;
      return {
        x,
        y
      };
    },
    cameraPosition: function cameraPosition(state, position, lookAt, transitionDuration) {
      var camera3 = state.camera;
      if (position && state.initialised) {
        var finalPos = position;
        var finalLookAt = lookAt || {
          x: 0,
          y: 0,
          z: 0
        };
        if (!transitionDuration) {
          setCameraPos(finalPos);
          setLookAt(finalLookAt);
        } else {
          var camPos = Object.assign({}, camera3.position);
          var camLookAt = getLookAt();
          state.tweenGroup.add(new Tween(camPos).to(finalPos, transitionDuration).easing(Easing.Quadratic.Out).onUpdate(setCameraPos).start());
          state.tweenGroup.add(new Tween(camLookAt).to(finalLookAt, transitionDuration / 3).easing(Easing.Quadratic.Out).onUpdate(setLookAt).start());
        }
        return this;
      }
      return Object.assign({}, camera3.position, {
        lookAt: getLookAt()
      });
      function setCameraPos(pos) {
        var x = pos.x, y = pos.y, z = pos.z;
        if (x !== void 0) camera3.position.x = x;
        if (y !== void 0) camera3.position.y = y;
        if (z !== void 0) camera3.position.z = z;
      }
      function setLookAt(lookAt2) {
        var lookAtVect = new three2.Vector3(lookAt2.x, lookAt2.y, lookAt2.z);
        if (state.controls.target) {
          state.controls.target = lookAtVect;
        } else {
          camera3.lookAt(lookAtVect);
        }
      }
      function getLookAt() {
        return Object.assign(new three2.Vector3(0, 0, -1e3).applyQuaternion(camera3.quaternion).add(camera3.position));
      }
    },
    zoomToFit: function zoomToFit(state) {
      var transitionDuration = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var padding = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;
      for (var _len = arguments.length, bboxArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        bboxArgs[_key - 3] = arguments[_key];
      }
      return this.fitToBbox(this.getBbox.apply(this, bboxArgs), transitionDuration, padding);
    },
    fitToBbox: function fitToBbox(state, bbox) {
      var transitionDuration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var padding = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 10;
      var camera3 = state.camera;
      if (bbox) {
        var center = new three2.Vector3(0, 0, 0);
        var maxBoxSide = Math.max.apply(Math, _toConsumableArray5(Object.entries(bbox).map(function(_ref) {
          var _ref2 = _slicedToArray7(_ref, 2), coordType = _ref2[0], coords = _ref2[1];
          return Math.max.apply(Math, _toConsumableArray5(coords.map(function(c3) {
            return Math.abs(center[coordType] - c3);
          })));
        }))) * 2;
        var paddedFov = (1 - padding * 2 / state.height) * camera3.fov;
        var fitHeightDistance = maxBoxSide / Math.atan(paddedFov * Math.PI / 180);
        var fitWidthDistance = fitHeightDistance / camera3.aspect;
        var distance = Math.max(fitHeightDistance, fitWidthDistance);
        if (distance > 0) {
          var newCameraPosition = center.clone().sub(camera3.position).normalize().multiplyScalar(-distance);
          this.cameraPosition(newCameraPosition, center, transitionDuration);
        }
      }
      return this;
    },
    getBbox: function getBbox(state) {
      var objFilter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
        return true;
      };
      var box = new three2.Box3(new three2.Vector3(0, 0, 0), new three2.Vector3(0, 0, 0));
      var objs = state.objects.filter(objFilter);
      if (!objs.length) return null;
      objs.forEach(function(obj) {
        return box.expandByObject(obj);
      });
      return Object.assign.apply(Object, _toConsumableArray5(["x", "y", "z"].map(function(c3) {
        return _defineProperty3({}, c3, [box.min[c3], box.max[c3]]);
      })));
    },
    getScreenCoords: function getScreenCoords(state, x, y, z) {
      var vec2 = new three2.Vector3(x, y, z);
      vec2.project(this.camera());
      return {
        // align relative pos to canvas dimensions
        x: (vec2.x + 1) * state.width / 2,
        y: -(vec2.y - 1) * state.height / 2
      };
    },
    getSceneCoords: function getSceneCoords(state, screenX, screenY) {
      var distance = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var relCoords = new three2.Vector2(screenX / state.width * 2 - 1, -(screenY / state.height) * 2 + 1);
      var raycaster = new three2.Raycaster();
      raycaster.setFromCamera(relCoords, state.camera);
      return Object.assign({}, raycaster.ray.at(distance, new three2.Vector3()));
    },
    intersectingObjects: function intersectingObjects(state, x, y) {
      var relCoords = new three2.Vector2(x / state.width * 2 - 1, -(y / state.height) * 2 + 1);
      var raycaster = new three2.Raycaster();
      raycaster.params.Line.threshold = state.lineHoverPrecision;
      raycaster.setFromCamera(relCoords, state.camera);
      return raycaster.intersectObjects(state.objects, true);
    },
    renderer: function renderer(state) {
      return state.renderer;
    },
    scene: function scene(state) {
      return state.scene;
    },
    camera: function camera(state) {
      return state.camera;
    },
    postProcessingComposer: function postProcessingComposer(state) {
      return state.postProcessingComposer;
    },
    controls: function controls(state) {
      return state.controls;
    },
    tbControls: function tbControls(state) {
      return state.controls;
    }
    // to be deprecated
  },
  stateInit: function stateInit3() {
    return {
      scene: new three2.Scene(),
      camera: new three2.PerspectiveCamera(),
      clock: new three2.Clock(),
      tweenGroup: new Group2()
    };
  },
  init: function init16(domNode, state) {
    var _ref4 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref4$controlType = _ref4.controlType, controlType = _ref4$controlType === void 0 ? "trackball" : _ref4$controlType, _ref4$rendererConfig = _ref4.rendererConfig, rendererConfig = _ref4$rendererConfig === void 0 ? {} : _ref4$rendererConfig, _ref4$extraRenderers = _ref4.extraRenderers, extraRenderers = _ref4$extraRenderers === void 0 ? [] : _ref4$extraRenderers, _ref4$waitForLoadComp = _ref4.waitForLoadComplete, waitForLoadComplete = _ref4$waitForLoadComp === void 0 ? true : _ref4$waitForLoadComp;
    domNode.innerHTML = "";
    domNode.appendChild(state.container = document.createElement("div"));
    state.container.className = "scene-container";
    state.container.style.position = "relative";
    state.container.appendChild(state.navInfo = document.createElement("div"));
    state.navInfo.className = "scene-nav-info";
    state.navInfo.textContent = {
      orbit: "Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan",
      trackball: "Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan",
      fly: "WASD: move, R|F: up | down, Q|E: roll, up|down: pitch, left|right: yaw"
    }[controlType] || "";
    state.navInfo.style.display = state.showNavInfo ? null : "none";
    state.toolTipElem = document.createElement("div");
    state.toolTipElem.classList.add("scene-tooltip");
    state.container.appendChild(state.toolTipElem);
    state.pointerPos = new three2.Vector2();
    state.pointerPos.x = -2;
    state.pointerPos.y = -2;
    ["pointermove", "pointerdown"].forEach(function(evType) {
      return state.container.addEventListener(evType, function(ev) {
        evType === "pointerdown" && (state.isPointerPressed = true);
        !state.isPointerDragging && ev.type === "pointermove" && (ev.pressure > 0 || state.isPointerPressed) && (ev.pointerType !== "touch" || ev.movementX === void 0 || [ev.movementX, ev.movementY].some(function(m) {
          return Math.abs(m) > 1;
        })) && (state.isPointerDragging = true);
        if (state.enablePointerInteraction) {
          var offset = getOffset(state.container);
          state.pointerPos.x = ev.pageX - offset.left;
          state.pointerPos.y = ev.pageY - offset.top;
          state.toolTipElem.style.top = "".concat(state.pointerPos.y, "px");
          state.toolTipElem.style.left = "".concat(state.pointerPos.x, "px");
          state.toolTipElem.style.transform = "translate(-".concat(state.pointerPos.x / state.width * 100, "%, ").concat(
            // flip to above if near bottom
            state.height - state.pointerPos.y < 100 ? "calc(-100% - 8px)" : "21px",
            ")"
          );
        }
        function getOffset(el) {
          var rect = el.getBoundingClientRect(), scrollLeft = window.pageXOffset || document.documentElement.scrollLeft, scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          return {
            top: rect.top + scrollTop,
            left: rect.left + scrollLeft
          };
        }
      }, {
        passive: true
      });
    });
    state.container.addEventListener("pointerup", function(ev) {
      state.isPointerPressed = false;
      if (state.isPointerDragging) {
        state.isPointerDragging = false;
        if (!state.clickAfterDrag) return;
      }
      requestAnimationFrame(function() {
        if (ev.button === 0) {
          state.onClick(state.hoverObj || null, ev, state.intersectionPoint);
        }
        if (ev.button === 2 && state.onRightClick) {
          state.onRightClick(state.hoverObj || null, ev, state.intersectionPoint);
        }
      });
    }, {
      passive: true,
      capture: true
    });
    state.container.addEventListener("contextmenu", function(ev) {
      if (state.onRightClick) ev.preventDefault();
    });
    state.renderer = new three2.WebGLRenderer(Object.assign({
      antialias: true,
      alpha: true
    }, rendererConfig));
    state.renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));
    state.container.appendChild(state.renderer.domElement);
    state.extraRenderers = extraRenderers;
    state.extraRenderers.forEach(function(r) {
      r.domElement.style.position = "absolute";
      r.domElement.style.top = "0px";
      r.domElement.style.pointerEvents = "none";
      state.container.appendChild(r.domElement);
    });
    state.postProcessingComposer = new EffectComposer(state.renderer);
    state.postProcessingComposer.addPass(new RenderPass(state.scene, state.camera));
    state.controls = new {
      trackball: TrackballControls,
      orbit: OrbitControls,
      fly: FlyControls
    }[controlType](state.camera, state.renderer.domElement);
    if (controlType === "fly") {
      state.controls.movementSpeed = 300;
      state.controls.rollSpeed = Math.PI / 6;
      state.controls.dragToLook = true;
    }
    if (controlType === "trackball" || controlType === "orbit") {
      state.controls.minDistance = 0.1;
      state.controls.maxDistance = state.skyRadius;
      state.controls.addEventListener("start", function() {
        state.controlsEngaged = true;
      });
      state.controls.addEventListener("change", function() {
        if (state.controlsEngaged) {
          state.controlsDragging = true;
        }
      });
      state.controls.addEventListener("end", function() {
        state.controlsEngaged = false;
        state.controlsDragging = false;
      });
    }
    [state.renderer, state.postProcessingComposer].concat(_toConsumableArray5(state.extraRenderers)).forEach(function(r) {
      return r.setSize(state.width, state.height);
    });
    state.camera.aspect = state.width / state.height;
    state.camera.updateProjectionMatrix();
    state.camera.position.z = 1e3;
    state.scene.add(state.skysphere = new three2.Mesh());
    state.skysphere.visible = false;
    state.loadComplete = state.scene.visible = !waitForLoadComplete;
    window.scene = state.scene;
  },
  update: function update17(state, changedProps) {
    if (state.width && state.height && (changedProps.hasOwnProperty("width") || changedProps.hasOwnProperty("height"))) {
      state.container.style.width = "".concat(state.width, "px");
      state.container.style.height = "".concat(state.height, "px");
      [state.renderer, state.postProcessingComposer].concat(_toConsumableArray5(state.extraRenderers)).forEach(function(r) {
        return r.setSize(state.width, state.height);
      });
      state.camera.aspect = state.width / state.height;
      state.camera.updateProjectionMatrix();
    }
    if (changedProps.hasOwnProperty("skyRadius") && state.skyRadius) {
      state.controls.hasOwnProperty("maxDistance") && changedProps.skyRadius && (state.controls.maxDistance = Math.min(state.controls.maxDistance, state.skyRadius));
      state.camera.far = state.skyRadius * 2.5;
      state.camera.updateProjectionMatrix();
      state.skysphere.geometry = new three2.SphereGeometry(state.skyRadius);
    }
    if (changedProps.hasOwnProperty("backgroundColor")) {
      var alpha = parseToRgb(state.backgroundColor).alpha;
      if (alpha === void 0) alpha = 1;
      state.renderer.setClearColor(new three2.Color(curriedOpacify$1(1, state.backgroundColor)), alpha);
    }
    if (changedProps.hasOwnProperty("backgroundImageUrl")) {
      if (!state.backgroundImageUrl) {
        state.skysphere.visible = false;
        state.skysphere.material.map = null;
        !state.loadComplete && finishLoad();
      } else {
        new three2.TextureLoader().load(state.backgroundImageUrl, function(texture) {
          texture.colorSpace = three2.SRGBColorSpace;
          state.skysphere.material = new three2.MeshBasicMaterial({
            map: texture,
            side: three2.BackSide
          });
          state.skysphere.visible = true;
          state.onBackgroundImageLoaded && setTimeout(state.onBackgroundImageLoaded);
          !state.loadComplete && finishLoad();
        });
      }
    }
    changedProps.hasOwnProperty("showNavInfo") && (state.navInfo.style.display = state.showNavInfo ? null : "none");
    if (changedProps.hasOwnProperty("lights")) {
      (changedProps.lights || []).forEach(function(light) {
        return state.scene.remove(light);
      });
      state.lights.forEach(function(light) {
        return state.scene.add(light);
      });
    }
    if (changedProps.hasOwnProperty("objects")) {
      (changedProps.objects || []).forEach(function(obj) {
        return state.scene.remove(obj);
      });
      state.objects.forEach(function(obj) {
        return state.scene.add(obj);
      });
    }
    function finishLoad() {
      state.loadComplete = state.scene.visible = true;
    }
  }
});

// node_modules/globe.gl/dist/globe.gl.mjs
function styleInject2(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;
  if (typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z2 = ".scene-container .clickable {\n  cursor: pointer;\n}";
styleInject2(css_248z2);
function _arrayLikeToArray8(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithoutHoles6(r) {
  if (Array.isArray(r)) return _arrayLikeToArray8(r);
}
function _defineProperty4(e, r, t) {
  return (r = _toPropertyKey5(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}
function _iterableToArray6(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _nonIterableSpread6() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys3(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread23(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty4(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _objectWithoutProperties4(e, t) {
  if (null == e) return {};
  var o, r, i = _objectWithoutPropertiesLoose4(e, t);
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(e);
    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}
function _objectWithoutPropertiesLoose4(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (e.includes(n)) continue;
    t[n] = r[n];
  }
  return t;
}
function _toConsumableArray6(r) {
  return _arrayWithoutHoles6(r) || _iterableToArray6(r) || _unsupportedIterableToArray8(r) || _nonIterableSpread6();
}
function _toPrimitive5(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey5(t) {
  var i = _toPrimitive5(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _unsupportedIterableToArray8(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray8(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray8(r, a) : void 0;
  }
}
function linkKapsule2(kapsulePropName, kapsuleType) {
  var dummyK = new kapsuleType();
  dummyK._destructor && dummyK._destructor();
  return {
    linkProp: function linkProp(prop) {
      return {
        "default": dummyK[prop](),
        onChange: function onChange12(v2, state) {
          state[kapsulePropName][prop](v2);
        },
        triggerUpdate: false
      };
    },
    linkMethod: function linkMethod(method) {
      return function(state) {
        var kapsuleInstance = state[kapsulePropName];
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);
        return returnVal === kapsuleInstance ? this : returnVal;
      };
    }
  };
}
var _excluded3 = ["rendererConfig", "waitForGlobeReady"];
var THREE4 = _objectSpread23(_objectSpread23({}, window.THREE ? window.THREE : {
  AmbientLight,
  DirectionalLight,
  Vector2,
  REVISION
}), {}, {
  CSS2DRenderer
});
var bindGlobe = linkKapsule2("globe", threeGlobe);
var linkedGlobeProps = Object.assign.apply(Object, _toConsumableArray6(["globeImageUrl", "bumpImageUrl", "showGlobe", "showGraticules", "showAtmosphere", "atmosphereColor", "atmosphereAltitude", "onGlobeReady", "pointsData", "pointLat", "pointLng", "pointColor", "pointAltitude", "pointRadius", "pointResolution", "pointsMerge", "pointsTransitionDuration", "arcsData", "arcStartLat", "arcStartLng", "arcEndLat", "arcEndLng", "arcColor", "arcAltitude", "arcAltitudeAutoScale", "arcStroke", "arcCurveResolution", "arcCircularResolution", "arcDashLength", "arcDashGap", "arcDashInitialGap", "arcDashAnimateTime", "arcsTransitionDuration", "polygonsData", "polygonGeoJsonGeometry", "polygonCapColor", "polygonCapMaterial", "polygonSideColor", "polygonSideMaterial", "polygonStrokeColor", "polygonAltitude", "polygonCapCurvatureResolution", "polygonsTransitionDuration", "pathsData", "pathPoints", "pathPointLat", "pathPointLng", "pathPointAlt", "pathResolution", "pathColor", "pathStroke", "pathDashLength", "pathDashGap", "pathDashInitialGap", "pathDashAnimateTime", "pathTransitionDuration", "heatmapsData", "heatmapPoints", "heatmapPointLat", "heatmapPointLng", "heatmapPointWeight", "heatmapBandwidth", "heatmapColorFn", "heatmapColorSaturation", "heatmapBaseAltitude", "heatmapTopAltitude", "heatmapsTransitionDuration", "hexBinPointsData", "hexBinPointLat", "hexBinPointLng", "hexBinPointWeight", "hexBinResolution", "hexMargin", "hexTopCurvatureResolution", "hexTopColor", "hexSideColor", "hexAltitude", "hexBinMerge", "hexTransitionDuration", "hexPolygonsData", "hexPolygonGeoJsonGeometry", "hexPolygonColor", "hexPolygonAltitude", "hexPolygonResolution", "hexPolygonMargin", "hexPolygonUseDots", "hexPolygonCurvatureResolution", "hexPolygonDotResolution", "hexPolygonsTransitionDuration", "tilesData", "tileLat", "tileLng", "tileAltitude", "tileWidth", "tileHeight", "tileUseGlobeProjection", "tileMaterial", "tileCurvatureResolution", "tilesTransitionDuration", "ringsData", "ringLat", "ringLng", "ringAltitude", "ringColor", "ringResolution", "ringMaxRadius", "ringPropagationSpeed", "ringRepeatPeriod", "labelsData", "labelLat", "labelLng", "labelAltitude", "labelRotation", "labelText", "labelSize", "labelTypeFace", "labelColor", "labelResolution", "labelIncludeDot", "labelDotRadius", "labelDotOrientation", "labelsTransitionDuration", "htmlElementsData", "htmlLat", "htmlLng", "htmlAltitude", "htmlElement", "htmlTransitionDuration", "objectsData", "objectLat", "objectLng", "objectAltitude", "objectRotation", "objectFacesSurface", "objectThreeObject", "customLayerData", "customThreeObject", "customThreeObjectUpdate"].map(function(p) {
  return _defineProperty4({}, p, bindGlobe.linkProp(p));
})));
var linkedGlobeMethods = Object.assign.apply(Object, _toConsumableArray6(["globeMaterial", "getGlobeRadius", "getCoords", "toGeoCoords"].map(function(p) {
  return _defineProperty4({}, p, bindGlobe.linkMethod(p));
})));
var bindRenderObjs = linkKapsule2("renderObjs", threeRenderObjects);
var linkedRenderObjsProps = Object.assign.apply(Object, _toConsumableArray6(["width", "height", "backgroundColor", "backgroundImageUrl", "enablePointerInteraction"].map(function(p) {
  return _defineProperty4({}, p, bindRenderObjs.linkProp(p));
})));
var linkedRenderObjsMethods = Object.assign.apply(Object, _toConsumableArray6(["lights", "postProcessingComposer"].map(function(p) {
  return _defineProperty4({}, p, bindRenderObjs.linkMethod(p));
})));
var globe = index({
  props: _objectSpread23(_objectSpread23({
    onZoom: {
      triggerUpdate: false
    },
    onGlobeClick: {
      triggerUpdate: false
    },
    onGlobeRightClick: {
      triggerUpdate: false
    },
    pointLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onPointClick: {
      triggerUpdate: false
    },
    onPointRightClick: {
      triggerUpdate: false
    },
    onPointHover: {
      triggerUpdate: false
    },
    arcLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onArcClick: {
      triggerUpdate: false
    },
    onArcRightClick: {
      triggerUpdate: false
    },
    onArcHover: {
      triggerUpdate: false
    },
    polygonLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onPolygonClick: {
      triggerUpdate: false
    },
    onPolygonRightClick: {
      triggerUpdate: false
    },
    onPolygonHover: {
      triggerUpdate: false
    },
    pathLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onPathClick: {
      triggerUpdate: false
    },
    onPathRightClick: {
      triggerUpdate: false
    },
    onPathHover: {
      triggerUpdate: false
    },
    onHeatmapClick: {
      triggerUpdate: false
    },
    onHeatmapRightClick: {
      triggerUpdate: false
    },
    onHeatmapHover: {
      triggerUpdate: false
    },
    hexLabel: {
      triggerUpdate: false
    },
    onHexClick: {
      triggerUpdate: false
    },
    onHexRightClick: {
      triggerUpdate: false
    },
    onHexHover: {
      triggerUpdate: false
    },
    hexPolygonLabel: {
      triggerUpdate: false
    },
    onHexPolygonClick: {
      triggerUpdate: false
    },
    onHexPolygonRightClick: {
      triggerUpdate: false
    },
    onHexPolygonHover: {
      triggerUpdate: false
    },
    tileLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onTileClick: {
      triggerUpdate: false
    },
    onTileRightClick: {
      triggerUpdate: false
    },
    onTileHover: {
      triggerUpdate: false
    },
    labelLabel: {
      triggerUpdate: false
    },
    onLabelClick: {
      triggerUpdate: false
    },
    onLabelRightClick: {
      triggerUpdate: false
    },
    onLabelHover: {
      triggerUpdate: false
    },
    objectLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onObjectClick: {
      triggerUpdate: false
    },
    onObjectRightClick: {
      triggerUpdate: false
    },
    onObjectHover: {
      triggerUpdate: false
    },
    customLayerLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onCustomLayerClick: {
      triggerUpdate: false
    },
    onCustomLayerRightClick: {
      triggerUpdate: false
    },
    onCustomLayerHover: {
      triggerUpdate: false
    },
    pointerEventsFilter: {
      "default": function _default26() {
        return true;
      },
      triggerUpdate: false,
      onChange: function onChange10(filterFn, state) {
        return state.renderObjs.hoverFilter(function(obj) {
          return filterFn(obj, obj.__data);
        });
      }
    },
    lineHoverPrecision: {
      "default": 0.2,
      triggerUpdate: false,
      onChange: function onChange11(val, state) {
        return state.renderObjs.lineHoverPrecision(val);
      }
    }
  }, linkedGlobeProps), linkedRenderObjsProps),
  methods: _objectSpread23(_objectSpread23({
    pauseAnimation: function pauseAnimation5(state) {
      var _state$globe;
      if (state.animationFrameRequestId !== null) {
        cancelAnimationFrame(state.animationFrameRequestId);
        state.animationFrameRequestId = null;
      }
      (_state$globe = state.globe) === null || _state$globe === void 0 || _state$globe.pauseAnimation();
      return this;
    },
    resumeAnimation: function resumeAnimation5(state) {
      var _state$globe2;
      if (state.animationFrameRequestId === null) {
        this._animationCycle();
      }
      (_state$globe2 = state.globe) === null || _state$globe2 === void 0 || _state$globe2.resumeAnimation();
      return this;
    },
    _animationCycle: function _animationCycle2(state) {
      state.renderObjs.tick();
      state.tweenGroup.update();
      state.animationFrameRequestId = requestAnimationFrame(this._animationCycle);
    },
    pointOfView: function pointOfView(state) {
      var geoCoords = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var transitionDuration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var curGeoCoords = getGeoCoords();
      if (geoCoords.lat === void 0 && geoCoords.lng === void 0 && geoCoords.altitude === void 0) {
        return curGeoCoords;
      } else {
        var finalGeoCoords = Object.assign({}, curGeoCoords, geoCoords);
        ["lat", "lng", "altitude"].forEach(function(p) {
          return finalGeoCoords[p] = +finalGeoCoords[p];
        });
        if (!transitionDuration) {
          setCameraPos(finalGeoCoords);
        } else {
          while (curGeoCoords.lng - finalGeoCoords.lng > 180) curGeoCoords.lng -= 360;
          while (curGeoCoords.lng - finalGeoCoords.lng < -180) curGeoCoords.lng += 360;
          state.tweenGroup.add(new Tween(curGeoCoords).to(finalGeoCoords, transitionDuration).easing(Easing.Cubic.InOut).onUpdate(setCameraPos).start());
        }
        return this;
      }
      function getGeoCoords() {
        return state.globe.toGeoCoords(state.renderObjs.cameraPosition());
      }
      function setCameraPos(_ref5) {
        var lat = _ref5.lat, lng = _ref5.lng, altitude = _ref5.altitude;
        state.renderObjs.cameraPosition(state.globe.getCoords(lat, lng, altitude));
      }
    },
    getScreenCoords: function getScreenCoords2(state) {
      var _state$globe3;
      for (var _len = arguments.length, geoCoords = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        geoCoords[_key - 1] = arguments[_key];
      }
      var cartesianCoords = (_state$globe3 = state.globe).getCoords.apply(_state$globe3, geoCoords);
      return state.renderObjs.getScreenCoords(cartesianCoords.x, cartesianCoords.y, cartesianCoords.z);
    },
    toGlobeCoords: function toGlobeCoords(state, x, y) {
      var globeIntersects = state.renderObjs.intersectingObjects(x, y).find(function(d) {
        return d.object.__globeObjType === "globe";
      });
      if (!globeIntersects) return null;
      var _state$globe$toGeoCoo = state.globe.toGeoCoords(globeIntersects.point), lat = _state$globe$toGeoCoo.lat, lng = _state$globe$toGeoCoo.lng;
      return {
        lat,
        lng
      };
    },
    scene: function scene2(state) {
      return state.renderObjs.scene();
    },
    // Expose scene
    camera: function camera2(state) {
      return state.renderObjs.camera();
    },
    // Expose camera
    renderer: function renderer2(state) {
      return state.renderObjs.renderer();
    },
    // Expose renderer
    controls: function controls2(state) {
      return state.renderObjs.controls();
    },
    // Expose controls
    _destructor: function _destructor6(state) {
      state.globe._destructor();
      this.pauseAnimation();
      this.pointsData([]);
      this.arcsData([]);
      this.polygonsData([]);
      this.pathsData([]);
      this.heatmapsData([]);
      this.hexBinPointsData([]);
      this.hexPolygonsData([]);
      this.tilesData([]);
      this.labelsData([]);
      this.htmlElementsData([]);
      this.objectsData([]);
      this.customLayerData([]);
    }
  }, linkedGlobeMethods), linkedRenderObjsMethods),
  stateInit: function stateInit4(_ref6) {
    var rendererConfig = _ref6.rendererConfig, _ref6$waitForGlobeRea = _ref6.waitForGlobeReady, waitForGlobeReady = _ref6$waitForGlobeRea === void 0 ? true : _ref6$waitForGlobeRea, globeInitConfig = _objectWithoutProperties4(_ref6, _excluded3);
    var globe2 = new threeGlobe(_objectSpread23({
      waitForGlobeReady
    }, globeInitConfig));
    return {
      globe: globe2,
      renderObjs: threeRenderObjects({
        controlType: "orbit",
        rendererConfig,
        waitForLoadComplete: waitForGlobeReady,
        extraRenderers: [new THREE4.CSS2DRenderer()]
        // Used in HTML elements layer
      }).skyRadius(globe2.getGlobeRadius() * 500).showNavInfo(false).objects([globe2]).lights([new THREE4.AmbientLight(13421772, Math.PI), new THREE4.DirectionalLight(16777215, 0.6 * Math.PI)]),
      tweenGroup: new Group2()
    };
  },
  init: function init17(domNode, state) {
    var _this = this;
    domNode.innerHTML = "";
    domNode.appendChild(state.container = document.createElement("div"));
    state.container.style.position = "relative";
    var roDomNode = document.createElement("div");
    state.container.appendChild(roDomNode);
    state.renderObjs(roDomNode);
    state.globe.rendererSize(state.renderObjs.renderer().getSize(new THREE4.Vector2()));
    this.pointOfView({
      altitude: 2.5
    });
    var globeR = state.globe.getGlobeRadius();
    var controls3 = state.renderObjs.controls();
    controls3.minDistance = globeR * 1.01;
    controls3.maxDistance = globeR * 100;
    controls3.enablePan = false;
    controls3.enableDamping = true;
    controls3.dampingFactor = 0.1;
    controls3.rotateSpeed = 0.3;
    controls3.zoomSpeed = 0.3;
    controls3.addEventListener("change", function() {
      var pov = _this.pointOfView();
      controls3.rotateSpeed = pov.altitude * 0.2;
      controls3.zoomSpeed = (pov.altitude + 1) * 0.1;
      state.globe.setPointOfView(state.renderObjs.camera().position);
      state.onZoom && state.onZoom(pov);
    });
    var getGlobeObj = function getGlobeObj2(object2) {
      var obj = object2;
      while (obj && !obj.hasOwnProperty("__globeObjType")) {
        obj = obj.parent;
      }
      return obj;
    };
    var dataAccessors = {
      point: function point2(d) {
        return d;
      },
      arc: function arc(d) {
        return d;
      },
      polygon: function polygon(d) {
        return d.data;
      },
      path: function path(d) {
        return d;
      },
      heatmap: function heatmap(d) {
        return d;
      },
      hexbin: function hexbin(d) {
        return d;
      },
      hexPolygon: function hexPolygon(d) {
        return d;
      },
      tile: function tile(d) {
        return d;
      },
      label: function label(d) {
        return d;
      },
      object: function object2(d) {
        return d;
      },
      custom: function custom(d) {
        return d;
      }
    };
    THREE4.REVISION < 155 && (state.renderObjs.renderer().useLegacyLights = false);
    state.renderObjs.hoverOrderComparator(function(a, b) {
      var aObj = getGlobeObj(a);
      var bObj = getGlobeObj(b);
      var isBackground = function isBackground2(o) {
        return !o;
      };
      return isBackground(aObj) - isBackground(bObj);
    }).tooltipContent(function(obj) {
      var objAccessors = {
        point: state.pointLabel,
        arc: state.arcLabel,
        polygon: state.polygonLabel,
        path: state.pathLabel,
        hexbin: state.hexLabel,
        hexPolygon: state.hexPolygonLabel,
        tile: state.tileLabel,
        label: state.labelLabel,
        object: state.objectLabel,
        custom: state.customLayerLabel
      };
      var globeObj = getGlobeObj(obj);
      var objType = globeObj && globeObj.__globeObjType;
      return globeObj && objType && objAccessors.hasOwnProperty(objType) && dataAccessors.hasOwnProperty(objType) ? index3(objAccessors[objType])(dataAccessors[objType](globeObj.__data)) || "" : "";
    }).onHover(function(obj) {
      var hoverObjFns = {
        point: state.onPointHover,
        arc: state.onArcHover,
        polygon: state.onPolygonHover,
        path: state.onPathHover,
        heatmap: state.onHeatmapHover,
        hexbin: state.onHexHover,
        hexPolygon: state.onHexPolygonHover,
        tile: state.onTileHover,
        label: state.onLabelHover,
        object: state.onObjectHover,
        custom: state.onCustomLayerHover
      };
      var clickObjFns = {
        globe: state.onGlobeClick,
        point: state.onPointClick,
        arc: state.onArcClick,
        polygon: state.onPolygonClick,
        path: state.onPathClick,
        heatmap: state.onHeatmapClick,
        hexbin: state.onHexClick,
        hexPolygon: state.onHexPolygonClick,
        tile: state.onTileClick,
        label: state.onLabelClick,
        object: state.onObjectClick,
        custom: state.onCustomLayerClick
      };
      var hoverObj = getGlobeObj(obj);
      hoverObj && !hoverObjFns.hasOwnProperty(hoverObj.__globeObjType) && (hoverObj = null);
      if (hoverObj !== state.hoverObj) {
        var prevObjType = state.hoverObj ? state.hoverObj.__globeObjType : null;
        var prevObjData = state.hoverObj ? dataAccessors[prevObjType](state.hoverObj.__data) : null;
        var objType = hoverObj ? hoverObj.__globeObjType : null;
        var objData = hoverObj ? dataAccessors[objType](hoverObj.__data) : null;
        if (prevObjType && prevObjType !== objType) {
          hoverObjFns[prevObjType] && hoverObjFns[prevObjType](null, prevObjData);
        }
        if (objType) {
          hoverObjFns[objType] && hoverObjFns[objType](objData, prevObjType === objType ? prevObjData : null);
        }
        state.renderObjs.renderer().domElement.classList[objType && clickObjFns[objType] ? "add" : "remove"]("clickable");
        state.hoverObj = hoverObj;
      }
    }).onClick(function(obj, ev, point2) {
      if (!obj) return;
      var objFns = {
        globe: state.onGlobeClick,
        point: state.onPointClick,
        arc: state.onArcClick,
        polygon: state.onPolygonClick,
        path: state.onPathClick,
        heatmap: state.onHeatmapClick,
        hexbin: state.onHexClick,
        hexPolygon: state.onHexPolygonClick,
        tile: state.onTileClick,
        label: state.onLabelClick,
        object: state.onObjectClick,
        custom: state.onCustomLayerClick
      };
      var globeObj = getGlobeObj(obj);
      var objType = globeObj.__globeObjType;
      if (globeObj && objFns.hasOwnProperty(objType) && objFns[objType]) {
        var args = [ev];
        if (objType === "globe") {
          var _this$toGeoCoords = _this.toGeoCoords(point2), lat = _this$toGeoCoords.lat, lng = _this$toGeoCoords.lng;
          args.unshift({
            lat,
            lng
          });
        } else {
          args.push(_this.toGeoCoords(point2));
        }
        dataAccessors.hasOwnProperty(objType) && args.unshift(dataAccessors[objType](globeObj.__data));
        objFns[objType].apply(objFns, args);
      }
    }).onRightClick(function(obj, ev, point2) {
      if (!obj) return;
      var objFns = {
        globe: state.onGlobeRightClick,
        point: state.onPointRightClick,
        arc: state.onArcRightClick,
        polygon: state.onPolygonRightClick,
        path: state.onPathRightClick,
        heatmap: state.onHeatmapRightClick,
        hexbin: state.onHexRightClick,
        hexPolygon: state.onHexPolygonRightClick,
        tile: state.onTileRightClick,
        label: state.onLabelRightClick,
        object: state.onObjectRightClick,
        custom: state.onCustomLayerRightClick
      };
      var globeObj = getGlobeObj(obj);
      var objType = globeObj.__globeObjType;
      if (globeObj && objFns.hasOwnProperty(objType) && objFns[objType]) {
        var args = [ev];
        if (objType === "globe") {
          var _this$toGeoCoords2 = _this.toGeoCoords(point2), lat = _this$toGeoCoords2.lat, lng = _this$toGeoCoords2.lng;
          args.unshift({
            lat,
            lng
          });
        } else {
          args.push(_this.toGeoCoords(point2));
        }
        dataAccessors.hasOwnProperty(objType) && args.unshift(dataAccessors[objType](globeObj.__data));
        objFns[objType].apply(objFns, args);
      }
    });
    this._animationCycle();
  }
});
export {
  globe as default
};
//# sourceMappingURL=globe__gl.js.map
